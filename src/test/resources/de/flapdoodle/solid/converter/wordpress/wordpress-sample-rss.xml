<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.8" created="2017-07-16 06:19" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>wicket praxis</title>
	<link>http://www.wicket-praxis.de/blog</link>
	<description>erfahrungen mit wicket aus dem projektalltag</description>
	<pubDate>Sun, 16 Jul 2017 06:19:15 +0000</pubDate>
	<language>de-DE</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.wicket-praxis.de/blog</wp:base_site_url>
	<wp:base_blog_url>http://www.wicket-praxis.de/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[michael@mosmann.de]]></wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[michael]]></wp:author_login><wp:author_email><![CDATA[michael@mosmann.de]]></wp:author_email><wp:author_display_name><![CDATA[michael]]></wp:author_display_name><wp:author_first_name><![CDATA[Michael]]></wp:author_first_name><wp:author_last_name><![CDATA[Mosmann]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[allgemein]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Allgemein]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>95</wp:term_id>
		<wp:category_nicename><![CDATA[eclipse]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[eclipse]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[maven]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Maven]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>50</wp:term_id>
		<wp:category_nicename><![CDATA[migration]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Migration]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[refactoring]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Refactoring]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[scala]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[scala]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>26</wp:term_id>
		<wp:category_nicename><![CDATA[technologie]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Technologie]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[wicket]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Wicket]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>51</wp:term_id>
		<wp:category_nicename><![CDATA[jsf-migration]]></wp:category_nicename>
		<wp:category_parent><![CDATA[migration]]></wp:category_parent>
		<wp:cat_name><![CDATA[JSF]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>52</wp:term_id>
		<wp:category_nicename><![CDATA[jsp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[migration]]></wp:category_parent>
		<wp:cat_name><![CDATA[JSP]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[135]]></wp:tag_slug>
		<wp:tag_name><![CDATA[1.3.5]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[14]]></wp:tag_slug>
		<wp:tag_name><![CDATA[1.4]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>90</wp:term_id>
		<wp:tag_slug><![CDATA[2010]]></wp:tag_slug>
		<wp:tag_name><![CDATA[2010]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[ajax]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ajax]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[ajaxfallbacklink]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ajaxfallbacklink]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>87</wp:term_id>
		<wp:tag_slug><![CDATA[ajaxrequesttarget]]></wp:tag_slug>
		<wp:tag_name><![CDATA[AjaxRequestTarget]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>65</wp:term_id>
		<wp:tag_slug><![CDATA[amazon]]></wp:tag_slug>
		<wp:tag_name><![CDATA[amazon]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>88</wp:term_id>
		<wp:tag_slug><![CDATA[android]]></wp:tag_slug>
		<wp:tag_name><![CDATA[android]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[application]]></wp:tag_slug>
		<wp:tag_name><![CDATA[application]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>99</wp:term_id>
		<wp:tag_slug><![CDATA[autocomplete]]></wp:tag_slug>
		<wp:tag_name><![CDATA[autocomplete]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>113</wp:term_id>
		<wp:tag_slug><![CDATA[back]]></wp:tag_slug>
		<wp:tag_name><![CDATA[back]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>112</wp:term_id>
		<wp:tag_slug><![CDATA[back-button]]></wp:tag_slug>
		<wp:tag_name><![CDATA[back button]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>100</wp:term_id>
		<wp:tag_slug><![CDATA[behavior]]></wp:tag_slug>
		<wp:tag_name><![CDATA[behavior]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>59</wp:term_id>
		<wp:tag_slug><![CDATA[books]]></wp:tag_slug>
		<wp:tag_name><![CDATA[books]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>111</wp:term_id>
		<wp:tag_slug><![CDATA[browser]]></wp:tag_slug>
		<wp:tag_name><![CDATA[browser]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[buch]]></wp:tag_slug>
		<wp:tag_name><![CDATA[buch]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>114</wp:term_id>
		<wp:tag_slug><![CDATA[button]]></wp:tag_slug>
		<wp:tag_name><![CDATA[button]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[cascading]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cascading]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>47</wp:term_id>
		<wp:tag_slug><![CDATA[checkgroup]]></wp:tag_slug>
		<wp:tag_name><![CDATA[checkgroup]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>105</wp:term_id>
		<wp:tag_slug><![CDATA[clickmap]]></wp:tag_slug>
		<wp:tag_name><![CDATA[clickmap]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>37</wp:term_id>
		<wp:tag_slug><![CDATA[code]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>54</wp:term_id>
		<wp:tag_slug><![CDATA[compare]]></wp:tag_slug>
		<wp:tag_name><![CDATA[compare]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>61</wp:term_id>
		<wp:tag_slug><![CDATA[component]]></wp:tag_slug>
		<wp:tag_name><![CDATA[component]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[contributor]]></wp:tag_slug>
		<wp:tag_name><![CDATA[contributor]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>119</wp:term_id>
		<wp:tag_slug><![CDATA[converter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Converter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>94</wp:term_id>
		<wp:tag_slug><![CDATA[coupling]]></wp:tag_slug>
		<wp:tag_name><![CDATA[coupling]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>55</wp:term_id>
		<wp:tag_slug><![CDATA[datatable]]></wp:tag_slug>
		<wp:tag_name><![CDATA[datatable]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>56</wp:term_id>
		<wp:tag_slug><![CDATA[dataview]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dataview]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>118</wp:term_id>
		<wp:tag_slug><![CDATA[dateformat]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DateFormat]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[db]]></wp:tag_slug>
		<wp:tag_name><![CDATA[db]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[desktop]]></wp:tag_slug>
		<wp:tag_name><![CDATA[desktop]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[detach]]></wp:tag_slug>
		<wp:tag_name><![CDATA[detach]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>74</wp:term_id>
		<wp:tag_slug><![CDATA[detached]]></wp:tag_slug>
		<wp:tag_name><![CDATA[detached]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>115</wp:term_id>
		<wp:tag_slug><![CDATA[detect]]></wp:tag_slug>
		<wp:tag_name><![CDATA[detect]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[download]]></wp:tag_slug>
		<wp:tag_name><![CDATA[download]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>66</wp:term_id>
		<wp:tag_slug><![CDATA[dpunkt]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dpunkt]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>127</wp:term_id>
		<wp:tag_slug><![CDATA[eclipse]]></wp:tag_slug>
		<wp:tag_name><![CDATA[eclipse]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>81</wp:term_id>
		<wp:tag_slug><![CDATA[email]]></wp:tag_slug>
		<wp:tag_name><![CDATA[email]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>77</wp:term_id>
		<wp:tag_slug><![CDATA[erfahrung]]></wp:tag_slug>
		<wp:tag_name><![CDATA[erfahrung]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>106</wp:term_id>
		<wp:tag_slug><![CDATA[event]]></wp:tag_slug>
		<wp:tag_name><![CDATA[event]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>108</wp:term_id>
		<wp:tag_slug><![CDATA[factory]]></wp:tag_slug>
		<wp:tag_name><![CDATA[factory]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>86</wp:term_id>
		<wp:tag_slug><![CDATA[fallback]]></wp:tag_slug>
		<wp:tag_name><![CDATA[fallback]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[favicon]]></wp:tag_slug>
		<wp:tag_name><![CDATA[favicon]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>75</wp:term_id>
		<wp:tag_slug><![CDATA[feedback]]></wp:tag_slug>
		<wp:tag_name><![CDATA[feedback]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>46</wp:term_id>
		<wp:tag_slug><![CDATA[form]]></wp:tag_slug>
		<wp:tag_name><![CDATA[form]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>45</wp:term_id>
		<wp:tag_slug><![CDATA[framework]]></wp:tag_slug>
		<wp:tag_name><![CDATA[framework]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>109</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[git]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>58</wp:term_id>
		<wp:tag_slug><![CDATA[google]]></wp:tag_slug>
		<wp:tag_name><![CDATA[google]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[grails]]></wp:tag_slug>
		<wp:tag_name><![CDATA[grails]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[gwt]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gwt]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[header]]></wp:tag_slug>
		<wp:tag_name><![CDATA[header]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[hotdeploy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hotdeploy]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[html]]></wp:tag_slug>
		<wp:tag_name><![CDATA[html]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>42</wp:term_id>
		<wp:tag_slug><![CDATA[http]]></wp:tag_slug>
		<wp:tag_name><![CDATA[http]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>97</wp:term_id>
		<wp:tag_slug><![CDATA[init]]></wp:tag_slug>
		<wp:tag_name><![CDATA[init]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[java]]></wp:tag_slug>
		<wp:tag_name><![CDATA[java]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[jetty]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jetty]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[jsf]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jsf]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>126</wp:term_id>
		<wp:tag_slug><![CDATA[jsp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[JSP]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>93</wp:term_id>
		<wp:tag_slug><![CDATA[koppelung]]></wp:tag_slug>
		<wp:tag_name><![CDATA[koppelung]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>116</wp:term_id>
		<wp:tag_slug><![CDATA[kryo2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Kryo2]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>96</wp:term_id>
		<wp:tag_slug><![CDATA[lazy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lazy]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[lines]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lines]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[link]]></wp:tag_slug>
		<wp:tag_name><![CDATA[link]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>122</wp:term_id>
		<wp:tag_slug><![CDATA[links]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Links]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>63</wp:term_id>
		<wp:tag_slug><![CDATA[listener]]></wp:tag_slug>
		<wp:tag_name><![CDATA[listener]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>57</wp:term_id>
		<wp:tag_slug><![CDATA[listview]]></wp:tag_slug>
		<wp:tag_name><![CDATA[listview]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>73</wp:term_id>
		<wp:tag_slug><![CDATA[loadable]]></wp:tag_slug>
		<wp:tag_name><![CDATA[loadable]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>69</wp:term_id>
		<wp:tag_slug><![CDATA[loadabledetachedmodel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[loadableDetachedModel]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>91</wp:term_id>
		<wp:tag_slug><![CDATA[loose]]></wp:tag_slug>
		<wp:tag_name><![CDATA[loose]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>92</wp:term_id>
		<wp:tag_slug><![CDATA[lose]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lose]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>67</wp:term_id>
		<wp:tag_slug><![CDATA[markup]]></wp:tag_slug>
		<wp:tag_name><![CDATA[markup]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>121</wp:term_id>
		<wp:tag_slug><![CDATA[maven]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Maven]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>125</wp:term_id>
		<wp:tag_slug><![CDATA[migration]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Migration]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>85</wp:term_id>
		<wp:tag_slug><![CDATA[mindmap]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mindmap]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>103</wp:term_id>
		<wp:tag_slug><![CDATA[modalwindow]]></wp:tag_slug>
		<wp:tag_name><![CDATA[modalwindow]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[model]]></wp:tag_slug>
		<wp:tag_name><![CDATA[model]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>110</wp:term_id>
		<wp:tag_slug><![CDATA[mongodb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mongodb]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>89</wp:term_id>
		<wp:tag_slug><![CDATA[next]]></wp:tag_slug>
		<wp:tag_name><![CDATA[next]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[onclick]]></wp:tag_slug>
		<wp:tag_name><![CDATA[onclick]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>62</wp:term_id>
		<wp:tag_slug><![CDATA[overview]]></wp:tag_slug>
		<wp:tag_name><![CDATA[overview]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[page]]></wp:tag_slug>
		<wp:tag_name><![CDATA[page]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>104</wp:term_id>
		<wp:tag_slug><![CDATA[parameter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[parameter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>107</wp:term_id>
		<wp:tag_slug><![CDATA[plugin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[plugin]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[praxis]]></wp:tag_slug>
		<wp:tag_name><![CDATA[praxis]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[praxisbuch]]></wp:tag_slug>
		<wp:tag_name><![CDATA[praxisbuch]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>78</wp:term_id>
		<wp:tag_slug><![CDATA[pre-optimization]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pre-optimization]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>76</wp:term_id>
		<wp:tag_slug><![CDATA[projekt]]></wp:tag_slug>
		<wp:tag_name><![CDATA[projekt]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>72</wp:term_id>
		<wp:tag_slug><![CDATA[property]]></wp:tag_slug>
		<wp:tag_name><![CDATA[property]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[real]]></wp:tag_slug>
		<wp:tag_name><![CDATA[real]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>123</wp:term_id>
		<wp:tag_slug><![CDATA[refactoring]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Refactoring]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>68</wp:term_id>
		<wp:tag_slug><![CDATA[referenzen]]></wp:tag_slug>
		<wp:tag_name><![CDATA[referenzen]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[reload]]></wp:tag_slug>
		<wp:tag_name><![CDATA[reload]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[resource]]></wp:tag_slug>
		<wp:tag_name><![CDATA[resource]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>80</wp:term_id>
		<wp:tag_slug><![CDATA[resourcen]]></wp:tag_slug>
		<wp:tag_name><![CDATA[resourcen]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>101</wp:term_id>
		<wp:tag_slug><![CDATA[rezension]]></wp:tag_slug>
		<wp:tag_name><![CDATA[rezension]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[sails]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sails]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>124</wp:term_id>
		<wp:tag_slug><![CDATA[scala]]></wp:tag_slug>
		<wp:tag_name><![CDATA[scala]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>60</wp:term_id>
		<wp:tag_slug><![CDATA[search]]></wp:tag_slug>
		<wp:tag_name><![CDATA[search]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>83</wp:term_id>
		<wp:tag_slug><![CDATA[sending]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sending]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[seo]]></wp:tag_slug>
		<wp:tag_name><![CDATA[seo]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>117</wp:term_id>
		<wp:tag_slug><![CDATA[serializer]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Serializer]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[stateless]]></wp:tag_slug>
		<wp:tag_name><![CDATA[stateless]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>84</wp:term_id>
		<wp:tag_slug><![CDATA[struktur]]></wp:tag_slug>
		<wp:tag_name><![CDATA[struktur]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>53</wp:term_id>
		<wp:tag_slug><![CDATA[submit]]></wp:tag_slug>
		<wp:tag_name><![CDATA[submit]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>64</wp:term_id>
		<wp:tag_slug><![CDATA[target]]></wp:tag_slug>
		<wp:tag_name><![CDATA[target]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[template]]></wp:tag_slug>
		<wp:tag_name><![CDATA[template]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>82</wp:term_id>
		<wp:tag_slug><![CDATA[test]]></wp:tag_slug>
		<wp:tag_name><![CDATA[test]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>70</wp:term_id>
		<wp:tag_slug><![CDATA[theme]]></wp:tag_slug>
		<wp:tag_name><![CDATA[theme]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>98</wp:term_id>
		<wp:tag_slug><![CDATA[transparent-resolver]]></wp:tag_slug>
		<wp:tag_name><![CDATA[transparent resolver]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[update]]></wp:tag_slug>
		<wp:tag_name><![CDATA[update]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>120</wp:term_id>
		<wp:tag_slug><![CDATA[wicket]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Wicket]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>71</wp:term_id>
		<wp:tag_slug><![CDATA[wicketstuff]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wicketstuff]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>79</wp:term_id>
		<wp:tag_slug><![CDATA[ziel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ziel]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[135]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[1.3.5]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[14]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[1.4]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[90]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[2010]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[2010]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ajax]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ajax]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ajaxfallbacklink]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ajaxfallbacklink]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[87]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ajaxrequesttarget]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[AjaxRequestTarget]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[allgemein]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Allgemein]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[65]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[amazon]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[amazon]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[88]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[android]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[android]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[application]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[application]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[99]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[autocomplete]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[autocomplete]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[113]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[back]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[back]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[112]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[back-button]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[back button]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[100]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[behavior]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[behavior]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blogroll]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Blogroll]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[59]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[books]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[books]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[111]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[browser]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[browser]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[buch]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[buch]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[114]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[button]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[button]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cascading]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cascading]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[checkgroup]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[checkgroup]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[105]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clickmap]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[clickmap]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[compare]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[compare]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[61]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[component]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[component]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[contributor]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[contributor]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[119]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[converter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Converter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[94]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[coupling]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[coupling]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[datatable]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[datatable]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dataview]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dataview]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[118]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dateformat]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DateFormat]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[db]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[db]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[desktop]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[desktop]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[detach]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[detach]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[74]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[detached]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[detached]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[115]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[detect]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[detect]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[download]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[download]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[66]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dpunkt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dpunkt]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[127]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[eclipse]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[eclipse]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[95]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[eclipse]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[eclipse]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[81]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[email]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[email]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[77]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[erfahrung]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[erfahrung]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[106]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[event]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[event]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[108]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[factory]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[factory]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[86]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[fallback]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[fallback]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[favicon]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[favicon]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[75]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[feedback]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[feedback]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[form]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[form]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[framework]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[framework]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[109]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[git]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[google]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[google]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[grails]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[grails]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gwt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gwt]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[header]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[header]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hotdeploy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hotdeploy]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[html]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[html]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[http]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[http]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[97]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[init]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[init]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[java]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jetty]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jetty]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jsf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jsf]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[126]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jsp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[JSP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[93]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[koppelung]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[koppelung]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[116]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kryo2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Kryo2]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[96]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lazy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lazy]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lines]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lines]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[link]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[link]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[links]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Links]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[122]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[links]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Links]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[63]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[listener]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[listener]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[listview]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[listview]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[73]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[loadable]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[loadable]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[69]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[loadabledetachedmodel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[loadableDetachedModel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[91]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[loose]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[loose]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[92]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lose]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lose]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[67]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[markup]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[markup]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[maven]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Maven]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[121]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[maven]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Maven]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[migration]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Migration]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[125]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[migration]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Migration]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[85]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mindmap]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mindmap]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[103]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[modalwindow]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[modalwindow]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[model]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[model]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[110]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mongodb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mongodb]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[89]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[next]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[next]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[onclick]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[onclick]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[62]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[overview]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[overview]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[page]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[page]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[104]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[parameter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[parameter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[107]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[plugin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[plugin]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[praxis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[praxis]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[praxisbuch]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[praxisbuch]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[78]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pre-optimization]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pre-optimization]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[76]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[projekt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[projekt]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[72]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[property]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[property]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[real]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[real]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[refactoring]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Refactoring]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[123]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[refactoring]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Refactoring]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[68]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[referenzen]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[referenzen]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[reload]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[reload]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[resource]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[resource]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[80]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[resourcen]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[resourcen]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[101]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rezension]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rezension]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[102]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rezensionen]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Rezensionen]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sails]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sails]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[124]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scala]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[scala]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scala]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[scala]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[60]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[search]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[search]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[83]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sending]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sending]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[seo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[seo]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[117]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[serializer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Serializer]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stateless]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stateless]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[84]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[struktur]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[struktur]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[submit]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[submit]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[64]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[target]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[target]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[technologie]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Technologie]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[template]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[template]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[82]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[test]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[test]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[70]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[theme]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[theme]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[98]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[transparent-resolver]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[transparent resolver]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[update]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[update]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wicket]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Wicket]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[120]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wicket]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Wicket]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[71]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wicketstuff]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wicketstuff]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[79]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ziel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ziel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jsf-migration]]></wp:term_slug>
		<wp:term_parent><![CDATA[migration]]></wp:term_parent>
		<wp:term_name><![CDATA[JSF]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jsp]]></wp:term_slug>
		<wp:term_parent><![CDATA[migration]]></wp:term_parent>
		<wp:term_name><![CDATA[JSP]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.8</generator>

	<item>
		<title>praxisbuch-wicket-buch</title>
		<link>http://www.wicket-praxis.de/blog/praxisbuch-wicket-buch/</link>
		<pubDate>Thu, 03 Sep 2009 21:17:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/praxisbuch-wicket-buch.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2009-09-03 22:17:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-03 21:17:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[praxisbuch-wicket-buch]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/praxisbuch-wicket-buch.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/praxisbuch-wicket-buch.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"120";s:6:"height";s:3:"151";s:14:"hwstring_small";s:22:"height='96' width='76'";s:4:"file";s:34:"2009/09/praxisbuch-wicket-buch.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:34:"praxisbuch-wicket-buch-120x150.jpg";s:5:"width";s:3:"120";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-praxis-code</title>
		<link>http://www.wicket-praxis.de/blog/download/wicket-praxis-code/</link>
		<pubDate>Thu, 03 Sep 2009 21:24:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-praxis-code.zip</guid>
		<description></description>
		<content:encoded><![CDATA[Codebeispiele aus dem Praxisbuch Wicket]]></content:encoded>
		<excerpt:encoded><![CDATA[Praxisbuch Wicket]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2009-09-03 22:24:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-03 21:24:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-praxis-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-praxis-code.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/wicket-praxis-code.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>twitter</title>
		<link>http://www.wicket-praxis.de/blog/twitter/</link>
		<pubDate>Sun, 06 Sep 2009 14:47:42 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/twitter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[follow me on twitter]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2009-09-06 15:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-06 14:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/twitter.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/twitter.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"120";s:6:"height";s:2:"30";s:14:"hwstring_small";s:23:"height='30' width='120'";s:4:"file";s:19:"2009/09/twitter.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-praxis-code-090914</title>
		<link>http://www.wicket-praxis.de/blog/download/wicket-praxis-code-2/</link>
		<pubDate>Mon, 14 Sep 2009 07:10:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-praxis-code1.zip</guid>
		<description></description>
		<content:encoded><![CDATA[Codebeispiele aus dem Praxisbuch Wicket]]></content:encoded>
		<excerpt:encoded><![CDATA[Praxisbuch Wicket]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2009-09-14 08:10:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-14 07:10:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-praxis-code-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-praxis-code1.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/wicket-praxis-code1.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-ajax-debug</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/15/migration-zu-wicket-ajax/wicket-ajax-debug/</link>
		<pubDate>Tue, 15 Sep 2009 06:18:28 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-ajax-debug.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Ajax Debug Window]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2009-09-15 07:18:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-15 06:18:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-ajax-debug]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>137</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-ajax-debug.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/wicket-ajax-debug.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1273";s:6:"height";s:3:"753";s:14:"hwstring_small";s:23:"height='75' width='128'";s:4:"file";s:29:"2009/09/wicket-ajax-debug.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"wicket-ajax-debug-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"wicket-ajax-debug-450x266.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"266";}s:5:"large";a:3:{s:4:"file";s:30:"wicket-ajax-debug-1024x605.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"605";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>datatable-komponente-filter-sort</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/03/datatable-vs-dataview-wicket-komponenten-wiederverwendet/datatable-komponente-filter-sort/</link>
		<pubDate>Sat, 03 Oct 2009 14:56:39 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/datatable-komponente-filter-sort.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2009-10-03 15:56:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-03 14:56:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[datatable-komponente-filter-sort]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>146</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/datatable-komponente-filter-sort.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/datatable-komponente-filter-sort.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"379";s:6:"height";s:3:"361";s:14:"hwstring_small";s:23:"height='96' width='100'";s:4:"file";s:44:"2009/10/datatable-komponente-filter-sort.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:44:"datatable-komponente-filter-sort-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dataview-komponente-filter-sort</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/03/datatable-vs-dataview-wicket-komponenten-wiederverwendet/dataview-komponente-filter-sort/</link>
		<pubDate>Sat, 03 Oct 2009 15:11:00 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/dataview-komponente-filter-sort.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2009-10-03 16:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-03 15:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dataview-komponente-filter-sort]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>146</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/dataview-komponente-filter-sort.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/dataview-komponente-filter-sort.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"374";s:6:"height";s:3:"329";s:14:"hwstring_small";s:23:"height='96' width='109'";s:4:"file";s:43:"2009/10/dataview-komponente-filter-sort.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:43:"dataview-komponente-filter-sort-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-behavior.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-behavior-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:44:56 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-behavior.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Behavior]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:44:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:44:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-behavior-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-behavior.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-behavior.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3165";s:6:"height";s:3:"687";s:14:"hwstring_small";s:23:"height='27' width='127'";s:4:"file";s:30:"2009/10/wicket-behavior.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"wicket-behavior.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"wicket-behavior.gv-450x97.jpg";s:5:"width";s:3:"450";s:6:"height";s:2:"97";}s:5:"large";a:3:{s:4:"file";s:31:"wicket-behavior.gv-1023x222.jpg";s:5:"width";s:4:"1023";s:6:"height";s:3:"222";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-comp-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:45:22 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Kompontenten - Basis]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:45:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:45:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-comp.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3797";s:6:"height";s:4:"3081";s:14:"hwstring_small";s:23:"height='96' width='118'";s:4:"file";s:26:"2009/10/wicket-comp.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"wicket-comp.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"wicket-comp.gv-450x365.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"365";}s:5:"large";a:3:{s:4:"file";s:27:"wicket-comp.gv-1024x830.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"830";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp-ext.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-comp-ext-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:46:37 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp-ext.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Komponenten inklusive Extensions]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:46:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:46:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-ext-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp-ext.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-comp-ext.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"4389";s:6:"height";s:4:"5205";s:14:"hwstring_small";s:22:"height='96' width='80'";s:4:"file";s:30:"2009/10/wicket-comp-ext.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"wicket-comp-ext.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"wicket-comp-ext.gv-379x450.jpg";s:5:"width";s:3:"379";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:31:"wicket-comp-ext.gv-863x1024.jpg";s:5:"width";s:3:"863";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-listener.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-listener-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:47:18 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-listener.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Listener]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:47:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:47:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-listener-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-listener.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-listener.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3843";s:6:"height";s:4:"1875";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:30:"2009/10/wicket-listener.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"wicket-listener.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"wicket-listener.gv-450x219.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"219";}s:5:"large";a:3:{s:4:"file";s:31:"wicket-listener.gv-1024x499.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"499";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-model.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-model-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:47:36 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-model.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Modelle]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:47:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:47:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-model-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-model.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-model.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1480";s:6:"height";s:4:"1336";s:14:"hwstring_small";s:23:"height='96' width='106'";s:4:"file";s:27:"2009/10/wicket-model.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"wicket-model.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"wicket-model.gv-450x406.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"406";}s:5:"large";a:3:{s:4:"file";s:28:"wicket-model.gv-1024x924.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"924";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-requestTarget.gv</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/wicket-requesttarget-gv/</link>
		<pubDate>Fri, 16 Oct 2009 06:47:56 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-requestTarget.gv.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket RequestTarget]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:47:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:47:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-requesttarget-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-requestTarget.gv.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/wicket-requestTarget.gv.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2445";s:6:"height";s:3:"957";s:14:"hwstring_small";s:23:"height='50' width='128'";s:4:"file";s:35:"2009/10/wicket-requestTarget.gv.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:35:"wicket-requestTarget.gv-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:35:"wicket-requestTarget.gv-450x176.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"176";}s:5:"large";a:3:{s:4:"file";s:36:"wicket-requestTarget.gv-1024x400.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"400";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-theme</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/03/wicket-theme-css-layout-fur-wicket-anwendungen/wicket-theme/</link>
		<pubDate>Tue, 03 Nov 2009 07:26:16 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/wicket-theme.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Theme Vorschau]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2009-11-03 08:26:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-03 07:26:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-theme]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>186</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/wicket-theme.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/11/wicket-theme.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1308";s:6:"height";s:4:"1050";s:14:"hwstring_small";s:23:"height='96' width='119'";s:4:"file";s:24:"2009/11/wicket-theme.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"wicket-theme-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"wicket-theme-450x361.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"361";}s:5:"large";a:3:{s:4:"file";s:25:"wicket-theme-1024x822.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"822";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pre-optimization</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/16/pre-optimization-erkennen-und-vermeiden/pre-optimization/</link>
		<pubDate>Mon, 16 Nov 2009 08:28:18 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/pre-optimization.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[pre-optimization - übersicht]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2009-11-16 09:28:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-16 08:28:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pre-optimization]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>198</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/pre-optimization.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/11/pre-optimization.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1208";s:6:"height";s:3:"906";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:28:"2009/11/pre-optimization.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"pre-optimization-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"pre-optimization-450x337.png";s:5:"width";s:3:"450";s:6:"height";s:3:"337";}s:5:"large";a:3:{s:4:"file";s:29:"pre-optimization-1024x768.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-email</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/01/sending-html-email-from-wicket-app/wicket-email/</link>
		<pubDate>Tue, 01 Dec 2009 06:50:33 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-email.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Ergebnis: Html-E-Mail aus Wicket]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2009-12-01 07:50:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-01 06:50:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-email]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>204</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-email.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/wicket-email.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"325";s:6:"height";s:3:"195";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:24:"2009/12/wicket-email.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"wicket-email-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Struktur - Übersicht aus der Arbeit am Buch</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/10/praxisbuch-wicket-ubersicht/struktur/</link>
		<pubDate>Thu, 10 Dec 2009 06:57:28 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/Struktur.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Struktur - Übersicht aus der Arbeit am Buch]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2009-12-10 07:57:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-10 06:57:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[struktur]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/Struktur.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/Struktur.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2324";s:6:"height";s:4:"2900";s:14:"hwstring_small";s:22:"height='96' width='76'";s:4:"file";s:20:"2009/12/Struktur.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"Struktur-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"Struktur-360x450.png";s:5:"width";s:3:"360";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:21:"Struktur-820x1023.png";s:5:"width";s:3:"820";s:6:"height";s:4:"1023";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-form-submit-enter</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/11/wicket-form-submit-mit-und-ohne-ajax/wicket-form-submit-enter/</link>
		<pubDate>Fri, 11 Dec 2009 08:47:48 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Submit per Enter]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2009-12-11 09:47:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-11 08:47:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-form-submit-enter]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>213</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/wicket-form-submit-enter.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"263";s:6:"height";s:3:"114";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:36:"2009/12/wicket-form-submit-enter.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"wicket-form-submit-enter-150x114.png";s:5:"width";s:3:"150";s:6:"height";s:3:"114";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-form-submit-ajaxbutton</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/11/wicket-form-submit-mit-und-ohne-ajax/wicket-form-submit-ajaxbutton/</link>
		<pubDate>Fri, 11 Dec 2009 08:48:48 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Submit per AjaxButton]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2009-12-11 09:48:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-11 08:48:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-form-submit-ajaxbutton]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>213</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/wicket-form-submit-ajaxbutton.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"271";s:6:"height";s:3:"118";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:41:"2009/12/wicket-form-submit-ajaxbutton.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:41:"wicket-form-submit-ajaxbutton-150x118.png";s:5:"width";s:3:"150";s:6:"height";s:3:"118";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-form-submit-button</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/11/wicket-form-submit-mit-und-ohne-ajax/wicket-form-submit-button/</link>
		<pubDate>Fri, 11 Dec 2009 08:49:32 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Submit per Button]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2009-12-11 09:49:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-11 08:49:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-form-submit-button]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>213</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/wicket-form-submit-button.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"263";s:6:"height";s:3:"115";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:37:"2009/12/wicket-form-submit-button.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:37:"wicket-form-submit-button-150x115.png";s:5:"width";s:3:"150";s:6:"height";s:3:"115";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-form-submit-ajaxbutton-no-javascript</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/11/wicket-form-submit-mit-und-ohne-ajax/wicket-form-submit-ajaxbutton-no-javascript/</link>
		<pubDate>Fri, 11 Dec 2009 08:50:09 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton-no-javascript.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Submit per AjaxButton]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2009-12-11 09:50:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-11 08:50:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-form-submit-ajaxbutton-no-javascript]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>213</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton-no-javascript.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/wicket-form-submit-ajaxbutton-no-javascript.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"262";s:6:"height";s:3:"117";s:14:"hwstring_small";s:23:"height='57' width='128'";s:4:"file";s:55:"2009/12/wicket-form-submit-ajaxbutton-no-javascript.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:55:"wicket-form-submit-ajaxbutton-no-javascript-150x117.png";s:5:"width";s:3:"150";s:6:"height";s:3:"117";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-template</title>
		<link>http://www.wicket-praxis.de/blog/download/wicket-template/</link>
		<pubDate>Wed, 13 Jan 2010 06:18:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/01/wicket-template.xml</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Eclipse HTML-Templates]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2010-01-13 07:18:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-13 06:18:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-template]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/01/wicket-template.xml]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/01/wicket-template.xml]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-combined-autocomplete-behavoir</title>
		<link>http://www.wicket-praxis.de/blog/2010/02/05/wicket-combined-autocomplete-behavoir/wicket-combined-autocomplete-behavoir-2/</link>
		<pubDate>Fri, 05 Feb 2010 08:08:23 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/02/wicket-combined-autocomplete-behavoir.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date><![CDATA[2010-02-05 09:08:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-05 08:08:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-combined-autocomplete-behavoir-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/02/wicket-combined-autocomplete-behavoir.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/wicket-combined-autocomplete-behavoir.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"251";s:6:"height";s:2:"90";s:14:"hwstring_small";s:23:"height='45' width='128'";s:4:"file";s:49:"2010/02/wicket-combined-autocomplete-behavoir.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:48:"wicket-combined-autocomplete-behavoir-150x90.jpg";s:5:"width";s:3:"150";s:6:"height";s:2:"90";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>frame-custom-1-alpha</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/frame-custom-1-alpha/</link>
		<pubDate>Wed, 03 Mar 2010 07:08:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-alpha.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:08:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:08:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[frame-custom-1-alpha]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-alpha.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/frame-custom-1-alpha.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:32:"2010/03/frame-custom-1-alpha.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>frame-custom-1-ie</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/frame-custom-1-ie/</link>
		<pubDate>Wed, 03 Mar 2010 07:08:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-ie.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:08:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:08:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[frame-custom-1-ie]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-ie.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/frame-custom-1-ie.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:29:"2010/03/frame-custom-1-ie.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>frame-custom-2-alpha</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/frame-custom-2-alpha/</link>
		<pubDate>Wed, 03 Mar 2010 07:08:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-alpha.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:08:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:08:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[frame-custom-2-alpha]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-alpha.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/frame-custom-2-alpha.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"20";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='19'";s:4:"file";s:32:"2010/03/frame-custom-2-alpha.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>frame-custom-2-ie</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/frame-custom-2-ie/</link>
		<pubDate>Wed, 03 Mar 2010 07:09:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-ie.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[frame-custom-2-ie]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-ie.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/frame-custom-2-ie.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"20";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='19'";s:4:"file";s:29:"2010/03/frame-custom-2-ie.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-custom-modalwindow</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/wicket-custom-modalwindow/</link>
		<pubDate>Wed, 03 Mar 2010 07:39:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-custom-modalwindow.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:39:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:39:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-custom-modalwindow]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-custom-modalwindow.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/wicket-custom-modalwindow.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"534";s:6:"height";s:3:"629";s:14:"hwstring_small";s:22:"height='96' width='81'";s:4:"file";s:37:"2010/03/wicket-custom-modalwindow.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:37:"wicket-custom-modalwindow-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:37:"wicket-custom-modalwindow-382x450.jpg";s:5:"width";s:3:"382";s:6:"height";s:3:"450";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-heatmap-ajax</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/07/wicket-heatmap-ajax-mit-parametern/wicket-heatmap-ajax/</link>
		<pubDate>Sun, 07 Mar 2010 15:17:28 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-heatmap-ajax.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2010-03-07 16:17:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-07 15:17:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-heatmap-ajax]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>257</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-heatmap-ajax.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/wicket-heatmap-ajax.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1140";s:6:"height";s:3:"397";s:14:"hwstring_small";s:23:"height='44' width='128'";s:4:"file";s:31:"2010/03/wicket-heatmap-ajax.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-heatmap-ajax-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-heatmap-ajax-450x156.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"156";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-heatmap-ajax-1024x356.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"356";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Component Factory Beispiel</title>
		<link>http://www.wicket-praxis.de/blog/2010/07/15/wicket-flexibilitat-mit-factories/wicket-component-factory/</link>
		<pubDate>Thu, 15 Jul 2010 06:56:47 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date><![CDATA[2010-07-15 07:56:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-15 06:56:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-component-factory]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>270</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/07/wicket-component-factory.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"498";s:6:"height";s:2:"80";s:14:"hwstring_small";s:23:"height='20' width='127'";s:4:"file";s:36:"2010/07/wicket-component-factory.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:35:"wicket-component-factory-150x80.jpg";s:5:"width";s:3:"150";s:6:"height";s:2:"80";}s:6:"medium";a:3:{s:4:"file";s:35:"wicket-component-factory-450x72.jpg";s:5:"width";s:3:"450";s:6:"height";s:2:"72";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Component Factory Split</title>
		<link>http://www.wicket-praxis.de/blog/2010/07/15/wicket-flexibilitat-mit-factories/wicket-component-factory-split/</link>
		<pubDate>Thu, 15 Jul 2010 07:03:10 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory-split.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2010-07-15 08:03:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-15 07:03:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-component-factory-split]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>270</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory-split.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/07/wicket-component-factory-split.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"498";s:6:"height";s:3:"142";s:14:"hwstring_small";s:23:"height='36' width='127'";s:4:"file";s:42:"2010/07/wicket-component-factory-split.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:42:"wicket-component-factory-split-150x142.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"142";}s:6:"medium";a:3:{s:4:"file";s:42:"wicket-component-factory-split-450x128.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"128";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-behavior.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-behavior-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:34:50 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-behavior.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:34:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:34:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-behavior-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-behavior.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-behavior.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3771";s:6:"height";s:3:"797";s:14:"hwstring_small";s:23:"height='27' width='128'";s:4:"file";s:31:"2011/05/wicket-behavior.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-behavior.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"wicket-behavior.gv_-450x95.jpg";s:5:"width";s:3:"450";s:6:"height";s:2:"95";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-behavior.gv_-1024x216.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"216";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-comp-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:35:06 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:35:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:35:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-comp.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3864";s:6:"height";s:4:"3156";s:14:"hwstring_small";s:23:"height='96' width='117'";s:4:"file";s:27:"2011/05/wicket-comp.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"wicket-comp.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"wicket-comp.gv_-450x367.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"367";}s:5:"large";a:3:{s:4:"file";s:28:"wicket-comp.gv_-1024x836.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"836";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp-ext.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-comp-ext-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:35:34 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp-ext.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:35:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:35:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-ext-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp-ext.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-comp-ext.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"4469";s:6:"height";s:4:"4897";s:14:"hwstring_small";s:22:"height='96' width='87'";s:4:"file";s:31:"2011/05/wicket-comp-ext.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-comp-ext.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-comp-ext.gv_-410x450.jpg";s:5:"width";s:3:"410";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-comp-ext.gv_-934x1024.jpg";s:5:"width";s:3:"934";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-listener.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-listener-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:35:56 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-listener.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:35:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:35:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-listener-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-listener.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-listener.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3912";s:6:"height";s:4:"1788";s:14:"hwstring_small";s:23:"height='58' width='128'";s:4:"file";s:31:"2011/05/wicket-listener.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-listener.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-listener.gv_-450x205.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"205";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-listener.gv_-1024x468.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"468";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-model.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-model-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:36:04 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-model.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:36:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:36:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-model-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-model.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-model.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1504";s:6:"height";s:4:"1277";s:14:"hwstring_small";s:23:"height='96' width='113'";s:4:"file";s:28:"2011/05/wicket-model.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"wicket-model.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"wicket-model.gv_-450x382.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"382";}s:5:"large";a:3:{s:4:"file";s:29:"wicket-model.gv_-1024x869.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"869";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-requestTarget.gv</title>
		<link>http://www.wicket-praxis.de/blog/wicket-requesttarget-gv-2/</link>
		<pubDate>Sun, 15 May 2011 08:36:12 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-requestTarget.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:36:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:36:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-requesttarget-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-requestTarget.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/wicket-requestTarget.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2485";s:6:"height";s:3:"996";s:14:"hwstring_small";s:23:"height='51' width='128'";s:4:"file";s:36:"2011/05/wicket-requestTarget.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"wicket-requestTarget.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:36:"wicket-requestTarget.gv_-450x180.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"180";}s:5:"large";a:3:{s:4:"file";s:37:"wicket-requestTarget.gv_-1024x410.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"410";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-comp-gv-3/</link>
		<pubDate>Tue, 17 Jul 2012 21:20:38 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Kompontenten – Basis]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:20:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:20:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-gv-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-comp.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3960";s:6:"height";s:4:"3101";s:14:"hwstring_small";s:23:"height='96' width='122'";s:4:"file";s:27:"2012/07/wicket-comp.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"wicket-comp.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"wicket-comp.gv_-450x352.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"352";}s:5:"large";a:3:{s:4:"file";s:28:"wicket-comp.gv_-1024x801.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"801";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp-ext.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-comp-ext-gv-3/</link>
		<pubDate>Tue, 17 Jul 2012 21:20:52 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Komponenten inklusive Extensions]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:20:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:20:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-ext-gv-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-comp-ext.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"4467";s:6:"height";s:4:"5064";s:14:"hwstring_small";s:22:"height='96' width='84'";s:4:"file";s:31:"2012/07/wicket-comp-ext.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-comp-ext.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-comp-ext.gv_-396x450.jpg";s:5:"width";s:3:"396";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-comp-ext.gv_-903x1024.jpg";s:5:"width";s:3:"903";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-model.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-model-gv-3/</link>
		<pubDate>Tue, 17 Jul 2012 21:23:07 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Modelle]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:23:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:23:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-model-gv-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-model.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1341";s:6:"height";s:4:"1349";s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:28:"2012/07/wicket-model.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"wicket-model.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"wicket-model.gv_-447x450.jpg";s:5:"width";s:3:"447";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:30:"wicket-model.gv_-1017x1024.jpg";s:5:"width";s:4:"1017";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Resourcen mit Jetty nachladen</title>
		<link>http://www.wicket-praxis.de/blog/2008/12/31/wicket-resourcen-mit-jetty-nachladen/</link>
		<pubDate>Wed, 31 Dec 2008 14:56:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[Bei großen Wicket-Projekten kann das hotdeployment des maven jetty plugins schonmal dazu führen, dass aus dem Vorteil ein Nachteil wird. Dabei ist das Ziel recht einfach: Nur die Html-Templates für die Wicket-Komponenten sollen neu geladen werden, wenn sich da was verändert hat. Alle Vorschläge aus den Foren sind mir zu aufwendig Außerdem mag ich die Html-Dateien nicht in das selbe Verzeichnis wie die Quelltexte legen. Ich habe mir daher einen für das Problem angepassten ResourceStreamLocator geschrieben:
<pre lang="java">public class MavenDevResourceStreamLocator extends ResourceStreamLocator
{
  String _prefix="src/main/resources/";

  public IResourceStream locate(final Class clazz, final String path)
  {
    IResourceStream located=getFileSysResourceStream(path);
    if (located != null)
    {
      // alles ok
      return located;
    }
    // fallback
    located=super.locate(clazz, path);
    return located;
  }

  private IResourceStream getFileSysResourceStream(String path)
  {
    File f=new File(_prefix+path);
    if ((f.exists()) && (f.isFile()))
    {
      return new FileResourceStream(f);
    }
    return null;
  }
}</pre>
Eingebaut wird das dann in die init-Methode der Application-Klasse wie folgt:
<pre lang="java">if (DEVELOPMENT.equalsIgnoreCase(configurationType))
{
  getResourceSettings().setResourceStreamLocator(new MavenDevResourceStreamLocator());
}</pre>
Und schon werden alle Änderungen an den Html-Dateien sichtbar.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2008-12-31 15:56:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-31 14:56:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-resourcen-mit-jetty-nachladen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hotdeploy"><![CDATA[hotdeploy]]></category>
		<category domain="post_tag" nicename="jetty"><![CDATA[jetty]]></category>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="post_tag" nicename="reload"><![CDATA[reload]]></category>
		<category domain="post_tag" nicename="resource"><![CDATA[resource]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386692949]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:18:"133.64474357268782";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:18:"120.00817723388093";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"18.53415782321196";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"352";s:5:"score";s:18:"16.890332568721906";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"327";s:5:"score";s:17:"16.13461766202701";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"68";s:5:"score";s:17:"16.13461766202701";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Impressum</title>
		<link>http://www.wicket-praxis.de/blog/impressum/</link>
		<pubDate>Wed, 31 Dec 2008 15:33:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[Michael Mosmann
Hambuurger Strasse 21
23562 Luebeck

E-Mail: michael (ät) mosmann.de
Inhaltlich Verantwortlicher gemäß § 10 Absatz 3 MDStV: Michael Mosmann (Anschrift wie oben)
Haftungshinweis: Trotz sorgfältiger inhaltlicher Kontrolle übernehmen wir keine Haftung für die Inhalte externer Links. Für den Inhalt der verlinkten Seiten sind ausschließlich deren Betreiber verantwortlich.

<strong>
Datenschutz</strong>
Wir greifen auf Drittanbieter zurück, um Anzeigen zu schalten, wenn Sie unsere Website besuchen. Diese Unternehmen nutzen möglicherweise Informationen (dies schließt nicht Ihren Namen, Ihre Adresse, E-Mail-Adresse oder Telefonnummer ein) zu Ihren Besuchen dieser und anderer Websites, damit Anzeigen zu Produkten und Diensten geschaltet werden können, die Sie interessieren. Falls Sie mehr über diese Methoden erfahren möchten oder wissen möchten, welche Möglichkeiten Sie haben, damit diese Informationen nicht von den Unternehmen verwendet werden können, <a href="http://www.google.de/privacy_ads.html">klicken Sie hier</a>

Diese Website benutzt Google Analytics, einen Webanalysedienst der Google Inc. („Google“). Google Analytics verwendet sog. „Cookies“, Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie ermöglichen. Die durch den Cookie erzeugten Informationen über Ihre Benutzung dieser Website (einschließlich Ihrer IP-Adresse) wird an einen Server von Google in den USA übertragen und dort gespeichert. Google wird diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports über die Websiteaktivitäten für die Websitebetreiber zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen zu erbringen. Auch wird Google diese Informationen gegebenenfalls an Dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit Dritte diese Daten im Auftrag von Google verarbeiten. Google wird in keinem Fall Ihre IP-Adresse mit anderen Daten von Google in Verbindung bringen. Sie können die Installation der Cookies durch eine entsprechende Einstellung Ihrer Browser Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Website vollumfänglich nutzen können. Durch die Nutzung dieser Website erklären Sie sich mit der Bearbeitung der über Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2008-12-31 16:33:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-31 15:33:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[impressum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Modell-Referenzen</title>
		<link>http://www.wicket-praxis.de/blog/2009/01/03/modell-referenzen/</link>
		<pubDate>Sat, 03 Jan 2009 10:15:11 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[Wie zeige ich eine Liste von Elementen und die Länge der Liste mit Wicket an, ohne dass ich die Liste zweimal erzeugen muss?

Für die Liste würde man ein LoadableDetachableModel benutzen und in load() das Ergebnis zurückliefern.
<pre lang="java">final LoadableDetachableModel<List<Something>> modelListe = new LoadableDetachableModel<List<Something>>()
{
  @Override
  protected List<Something> load()
  {
    return Something.asList();
  }
};</pre>
Für die Anzahl der Einträge würde ich jetzt auf dieses Modell zurückgreifen:
<pre lang="java">LoadableDetachableModel<Integer> modelAnzahl = new LoadableDetachableModel<Integer>()
{
  @Override
  protected Integer load()
  {
    return modelListe.getObject().size();
  }

  @Override
  public void detach()
  {
    modelListe.detach();
    super.detach();
  }
};</pre>
Wenn modelListe nicht mit einer Wicketkomponente verbunden wäre, würde detach für diese Modell nie aufgerufen und die Liste damit nicht neu erzeugt. Änderungen an der Liste würden sich nicht sofort in der Anzeige wiederspiegeln. Daher muss man in dem Modell, dass mit einer Wicketkomponente verbunden ist auch detach für alle referenzierten Modelle aufrufen. Es gibt eine einfachere Lösung:
<pre lang="java">public abstract class CascadingLoadableDetachableModel<M,P> extends LoadableDetachableModel<M>
{
  IModel<P> _parent;

  public CascadingLoadableDetachableModel(IModel<P> parent)
  {
    super();
    _parent=parent;
  }

  @Override
  public void detach()
  {
    super.detach();
    _parent.detach();
  }

  @Override
  protected M load()
  {
    return load(_parent.getObject());
  }

  protected abstract M load(P parentModelData);
}</pre>
Man übergibt die Modell-Referenz im Konstruktor, bekommt die Modell-Daten automatisch als Methodenparameter und detach wird auch automatisch aufgerufen:
<pre lang="java">CascadingLoadableDetachableModel<Integer,List<Something>> modelAnzahl = new CascadingLoadableDetachableModel<Integer,List<Something>>()
{
  @Override
  protected Integer load(List<Something> parentModelData)
  {
    return parentModelData.size();
  }
};</pre>
Schön kurz.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2009-01-03 11:15:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-03 10:15:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[modell-referenzen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cascading"><![CDATA[cascading]]></category>
		<category domain="post_tag" nicename="detach"><![CDATA[detach]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386676722]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"175";s:5:"score";s:18:"52.301910890771154";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"143";s:5:"score";s:17:"50.36822486917605";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:16:"32.6280997587056";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:17:"25.65902079132514";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"9.668430107975498";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:17:"7.111092908562556";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[@wicketpraxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wicketpraxis@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/wicketpraxis/statuses/1093212329</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-03 11:07:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-03 10:07:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New blog post: Modell-Referenzen http://tinyurl.com/6ufou7]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>715</wp:comment_id>
			<wp:comment_author><![CDATA[Migration zu Wicket: Model | wicket praxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.wicket-praxis.de/blog/2009/09/22/migration-zu-wicket-model/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.198.25.105]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-22 08:48:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-22 07:48:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Die Beispielliste ist eine Liste von Posten auf einer Rechnung. Wir möchten aber zum Betrag auch noch den MwSt-Anteil ausweisen. Dazu schreiben wir ein allgemeines Model, dass von einer Erweiterung des LoadableDetachableModel abgeleitet ist: CascadingLoadableDetachableModel. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>871</wp:comment_id>
			<wp:comment_author><![CDATA[Wicket Model Transformation | wicket praxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.wicket-praxis.de/blog/2009/10/28/wicket-model-transformation/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.198.25.105]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-28 07:17:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-28 06:17:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] auf die bereits geladenen Daten aus dem Model zurückzugreifen. Für diesen Zweck kann man auf eine spezialisierte Model-Klasse zurückgreifen, die sich darum kümmert, das die detach()-Methode auch für alle referenzierten [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>blala</title>
		<link>http://www.wicket-praxis.de/blog/?p=52</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2009-01-13 09:22:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Download</title>
		<link>http://www.wicket-praxis.de/blog/download/</link>
		<pubDate>Thu, 03 Sep 2009 21:34:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?page_id=110</guid>
		<description></description>
		<content:encoded><![CDATA[Hier finden Sie verschiedene Resourcen rund um Wicket zum Download

<h2>Update</h2>

Sie finden alle aktualisierten Quelltexte zum Buch und alle Beispiel-Codes bei GitHub unter folgender Url: <a href="https://github.com/michaelmosmann/wicket-praxis">https://github.com/michaelmosmann/wicket-praxis</a>

<h2>Codebeispiele</h2>

Hier können Sie die Codebeispiele aus dem Buch <a href="http://www.hanser.de/978-3-446-41909-4" target="_blank">"Praxisbuch Wicket"</a> herunterladen: <a href='http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-praxis-code1.zip'>Praxisbuch Wicket Beispielcode</a>

Entpacken Sie das Archiv in ein Verzeichnis ihrer Wahl. Installieren Sie Java und Maven. Wechseln Sie in das Verzeichnis <em>de.wicketpraxis--parentPom</em> und öffnen Sie eine Konsole. Rufen Sie in dem Verzeichnis dann <strong>mvn install</strong> auf. Nachdem der Vorgang angeschlossen wurde wechseln Sie in das Verzeichnis <em>de.wicketpraxis--webapp</em> und rufen entweder <strong>mvn jetty:run</strong> auf oder besser starten <strong>jetty.sh</strong> unter Linux oder <strong>jetty.bat</strong> unter windows.

Wenn Sie mit einem Browser dann die Adresse <strong>http://localhost:8080/</strong> aufrufen, klicken Sie auf den ersten Link um zur Webanwendung zu gelangen. Danach sehen Sie bereits eine einfache Navigationsstruktur, über die Sie alle Beispiel ansteuern und ausprobieren können.

Viel Spaß damit.

<h2>Eclipse Templates</h2>

Die Templates für die Wicketunterstützung können Sie wie folgt importieren: Menü "Window > Preferences", in dem Dialog unter "Web > HTML Files > Editor > Templates" den Button "Import" anklicken und die <a href='http://www.wicket-praxis.de/blog/wp-content/uploads/2010/01/wicket-template.xml'>Wicket-Template</a>-Datei importieren.

<h2>Updates</h2>

<strong>Neue Version</strong>

Ich habe bereits die ersten Rückmeldungen bekommen und werde demnächst eine neue Version zur Verfügung stellen. Bis dahin etwas Geduld.

<strong>Neue Version</strong>

Die neue Version steht jetzt zur Verfügung. Es wurde die verwendete Hibernate-Version angepasst und die Einstellungen für die Testdatenbank beim starten der Anwendung verwendet, so dass jetzt keine MySql-Datenbank mehr eingerichtet werden muss, um die Beispiele zu starten. Die Anpassungen sind im Persistenz-Teilprojekt in der Datei ReadMe.txt dokumentiert.

<strong>Eclipse Template</strong>

Eclipse Template-Datei auf der Seite hinzugefügt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2009-09-03 22:34:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-03 21:34:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[download]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>82000</wp:comment_id>
			<wp:comment_author><![CDATA[Jquwecze]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pitfighter@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.boards2go.com/boards/board.cgi?user=dyqeofauji</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[124.126.126.7]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-05 06:56:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-05 05:56:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can't hear you very well <a href="http://www.boards2go.com/boards/board.cgi?user=lyduqycula" rel="nofollow">ls-magazine bbs lolita portal</a>  How can I get one of these?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370413044.8105681;s:7:"message";s:79:"Akismet hat diesen Kommentar durch eine erneute Überprüfung als Spam erkannt.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370411806.205338;s:7:"message";s:138:"Akismet war es nicht möglich, diesen Kommentar zu überprüfen (Antwort: ). Akismet wird später eine erneute Überprüfung durchführen.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Umfrage: Welches Webframework benutzt Du?</title>
		<link>http://www.wicket-praxis.de/blog/?p=119</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe mal schnell eine Umfrage eingerichtet. Bin auf das Ergebnis g]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2009-09-08 23:18:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ein gesundes neues Jahr</title>
		<link>http://www.wicket-praxis.de/blog/?p=222</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2010-01-02 17:49:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ein-gesundes-neues-j]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.wicket-praxis.de/blog/?p=242</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[<code lang="java5">erferfe
er
fetf</code><code lang="html">erfwef</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2010-01-26 09:54:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket </title>
		<link>http://www.wicket-praxis.de/blog/?p=269</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2010-07-15 07:34:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>asdqd </title>
		<link>http://www.wicket-praxis.de/blog/?p=284</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2011-02-01 08:13:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-behavior.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-behavior-gv-3/</link>
		<pubDate>Tue, 17 Jul 2012 21:23:13 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Behavior]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:23:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:23:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-behavior-gv-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-behavior.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2776";s:6:"height";s:4:"1409";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:31:"2012/07/wicket-behavior.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-behavior.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-behavior.gv_-450x228.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"228";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-behavior.gv_-1024x519.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"519";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-listener.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-listener-gv-3/</link>
		<pubDate>Tue, 17 Jul 2012 21:23:18 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Listener]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:23:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:23:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-listener-gv-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-listener.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3171";s:6:"height";s:4:"1644";s:14:"hwstring_small";s:23:"height='66' width='128'";s:4:"file";s:31:"2012/07/wicket-listener.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wicket-listener.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wicket-listener.gv_-450x233.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"233";}s:5:"large";a:3:{s:4:"file";s:32:"wicket-listener.gv_-1024x530.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"530";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-requestHandler.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-requesthandler-gv/</link>
		<pubDate>Tue, 17 Jul 2012 21:23:23 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket RequestTarget]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:23:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:23:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-requesthandler-gv]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>330</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-requestHandler.gv_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2005";s:6:"height";s:4:"1160";s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:37:"2012/07/wicket-requestHandler.gv_.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:37:"wicket-requestHandler.gv_-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:37:"wicket-requestHandler.gv_-450x260.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"260";}s:5:"large";a:3:{s:4:"file";s:38:"wicket-requestHandler.gv_-1024x592.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"592";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-behavior.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-behavior-gv-4/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:32 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Behavior]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-behavior-gv-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-behavior.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2776";s:6:"height";s:4:"1157";s:14:"hwstring_small";s:23:"height='53' width='128'";s:4:"file";s:32:"2012/07/wicket-behavior.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"wicket-behavior.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"wicket-behavior.gv_1-450x187.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"187";}s:5:"large";a:3:{s:4:"file";s:33:"wicket-behavior.gv_1-1024x426.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"426";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-comp-gv-4/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:35 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Kompontenten – Basis]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-gv-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-comp.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3840";s:6:"height";s:4:"2904";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:28:"2012/07/wicket-comp.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"wicket-comp.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"wicket-comp.gv_1-450x340.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"340";}s:5:"large";a:3:{s:4:"file";s:29:"wicket-comp.gv_1-1024x774.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"774";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-comp-ext.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-comp-ext-gv-4/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:42 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Komponenten inklusive Extensions]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-comp-ext-gv-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-comp-ext.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"4347";s:6:"height";s:4:"5568";s:14:"hwstring_small";s:22:"height='96' width='74'";s:4:"file";s:32:"2012/07/wicket-comp-ext.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"wicket-comp-ext.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"wicket-comp-ext.gv_1-351x450.jpg";s:5:"width";s:3:"351";s:6:"height";s:3:"450";}s:5:"large";a:3:{s:4:"file";s:33:"wicket-comp-ext.gv_1-799x1024.jpg";s:5:"width";s:3:"799";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-listener.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-listener-gv-4/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:53 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Listener]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-listener-gv-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-listener.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3171";s:6:"height";s:4:"1644";s:14:"hwstring_small";s:23:"height='66' width='128'";s:4:"file";s:32:"2012/07/wicket-listener.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"wicket-listener.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"wicket-listener.gv_1-450x233.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"233";}s:5:"large";a:3:{s:4:"file";s:33:"wicket-listener.gv_1-1024x530.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"530";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-model.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-model-gv-4/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:56 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket Modelle]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-model-gv-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-model.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1749";s:6:"height";s:4:"1267";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:29:"2012/07/wicket-model.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"wicket-model.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"wicket-model.gv_1-450x325.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"325";}s:5:"large";a:3:{s:4:"file";s:30:"wicket-model.gv_1-1024x741.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"741";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wicket-requestHandler.gv</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-requesthandler-gv-2/</link>
		<pubDate>Wed, 18 Jul 2012 18:47:58 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Wicket RequestTarget]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:47:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:47:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-requesthandler-gv-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wicket-requestHandler.gv_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2349";s:6:"height";s:4:"1160";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:38:"2012/07/wicket-requestHandler.gv_1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:38:"wicket-requestHandler.gv_1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:38:"wicket-requestHandler.gv_1-450x222.jpg";s:5:"width";s:3:"450";s:6:"height";s:3:"222";}s:5:"large";a:3:{s:4:"file";s:39:"wicket-requestHandler.gv_1-1024x505.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"505";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Page Serializer und Performanceoptimierung - Teil 1</title>
		<link>http://www.wicket-praxis.de/blog/?p=361</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=361</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket bildet den Zustand einer Anwendung, einer Webseite nicht wie andere Frameworks über Parameter in der Url ab. Wicket-Komponenten können viel mehr ihren eigenen Zustand über normale Java-Sprachmittel abbilden. Eine Komponente kann auf diese Weise die komplexesten Informationen halten, die möglicherweise sehr schwer über Url-Parameter abgebildet werden könnten. Das hat Vorteile, aber eben auch Nachteile. Der vermutlich größte Nachteil ist der Speicherbedarf, denn die Komponenten müssen für jeden Nutzer getrennt erzeugt und verwaltet werden. Anwendungen, die den Zustand einer Nutzerinteraktion immer über Url-Parameter abbilden, können nach dem ausliefern der Seite alle temporär erzeugten Daten verwerfen.

Wicket arbeitet anders. In Wicket ist eine Seite eine Sammlung verschiedenster Komponenten und Zustände in beliebigen Objekten. Wenn der Nutzer eine Aktion auf der Seite auslöst, wird die passende Komponente in diesem Komponentenbaum gesucht und die entsprechende Methode aufgerufen. Jede Interaktion erzeugt einen neuen Zustand und Wicket erzeugt eine neue Version der Seite für den Fall, dass der Nutzer z.B. mit dem Browser-Back-Buttom auf eine ältere Seite mit einem anderen Zustand zurück navigiert. Da der Arbeitsspeicher meist ein knappes Gut ist, werden die älteren Versionen einer Seite als Objektgraph mit all den Zuständen serialisiert und auf einem Datenträger abgelegt. Und hier wird es nun spannend.

Je mehr Zustand die Komponenten halten, je mehr Daten dafür notwendig sind, desto größer ist natürlich der Speicherbedarf zu Laufzeit aber auch der Platzbedarf auf dem Datenträger. Um nicht unnötig den Speicher und die Festplatte mit temporären Daten zu belasten, wird nach dem Ausliefern der Ergebnisseite für alle Komponenten die detach()-Methode aufgerufen, die sich darum kümmern muss, alles was für den Zustand der Komponente irrelevant ist, aufzuräumen.

<strong>Überraschung vorraus</strong>

Nun hat man seine Wicket-Komponenten geschrieben und vermutet, dass man alles richtig gemacht hat oder hat einfach akzeptiert, dass z.B. der Speicherbedarf so hoch sein muss wie er eben gerade ist. Wenn man genügend Speicher hat, muss man ja nichts verändern, aber das ist vermutlich selten der Fall. Zum Glück bietet die Vorgehensweise, die Wicket an den Tag legt sehr interessante Möglichkeiten, um verschiedeneste Optimierungen vorzunehmen.

Wenn die Menge der Daten, die auf Festplatte geschrieben werden sehr hoch ist und die die CPU's im Rechner eher langweilen, kann man recht günstig Plattenplatz und Rechnengeschwindigkeit eintauschen (typische Kompression 70%, Mehrbelastung der CPU vermutlich 1-5%). Dafür benutzt man statt dem Standard-Serializer einfach die DeflatedJavaSerializer-Implementierung. **Vorsicht: die Daten, die mit dem Standard-Serializer auf die Festplatte geschrieben wurden, können nicht zurückgelesen werden.**

Besser wäre es natürlich, gleich von Anfang an weniger Temporärdaten zu erzeugen. Doch was genau welchen Platz im Speicher und später auf der Festplatte belegt, ist meist nicht ganz so einfach zu ermitteln.

<strong>Der Anfang</strong>

Zu erst habe ich versucht, die Funktion, die bei Wicket für die aufschlußreiche Darstellung sorgt, welche Komponente nicht serialisierbare Objekte enthält entsprechend zu erweitern. Allerdings steigt man da in eine der eher nicht so gut gelüfteten Kammern von Java hinunter und kann sich sicher leicht verirren, so das eine andere Alternative gefunden werden musste. Zum Glück hatten dieses Gefühl wohl auch andere und haben das Projekt Kryo gestartet (<a href="http://code.google.com/p/kryo/">http://code.google.com/p/kryo/</a>). Kryo ist eine Alternative zur Serialisierung von Javaobjekten, die sehr konfigurierbar und trotz Reflection auch schneller und kompakter serialisieren soll.

Dann gab es recht schnell bei wicketstuff ein Projekt, dass Kryo in Wicket integriert hat. Allerdings bisher nur für die Version 1.x. Ich habe das dann für Kryo2 nachgeholt und entsprechend modularisiert, so dass man in den Serialisierungsprozess eingreifen kann und auf diese Weise verschiedene Informationen ermitteln kann. Doch dazu später mehr.

<strong>Setup</strong>

Zuerst muss man sein Wicket-Projekt um eine Dependency erweitern:

&lt;dependency&gt;
&lt;groupId&gt;org.wicketstuff&lt;/groupId&gt;
&lt;artifactId&gt;wicketstuff-serializer-kryo2&lt;/artifactId&gt;
&lt;version&gt;${wicket.version}&lt;/version&gt;
&lt;/dependency&gt;

Dabei gibt es sowohl für Wicket 1.5 (ab Version 1.5.9) als auch für Wicket 6 (ab Version 6.2.1) eine Version in Maven Central.

Dann ergänzen wir unsere WebApplication-Klasse in der init()-Methode um folgende Codezeilen:

// output of report of type sizes, sorted tree report (by size), aggregated tree
ISerializedObjectTreeProcessor typeAndSortedTreeAndCollapsedSortedTreeProcessors = TreeProcessors.listOf(
new TypeSizeReport(), new SortedTreeSizeReport(), new SimilarNodeTreeTransformator(
new SortedTreeSizeReport()));

// strips class object writes from tree
TreeTransformator treeProcessors = new TreeTransformator(
typeAndSortedTreeAndCollapsedSortedTreeProcessors,
TreeTransformator.strip(new TypeFilter(Class.class)));

// serialization listener notified on every written object
ISerializationListener serializationListener = SerializationListeners.listOf(
new DefaultJavaSerializationValidator(), new AnalyzingSerializationListener(
new NativeTypesAsLabel(new ComponentIdAsLabel()), treeProcessors));

// customized serializer
InspectingKryoSerializer serializer = new InspectingKryoSerializer(Bytes.megabytes(30L),
serializationListener);

// set custom serializer as default
getFrameworkSettings().setSerializer(serializer);

getStoreSettings().setAsynchronous(false);
getStoreSettings().setInmemoryCacheSize(0);
getPageSettings().setVersionPagesByDefault(true);

Ab sofort wird für jede Seite, die serialisiert wird, eine detailierte Übersicht über die verwendeten Komponenten und den Speicherbedarf ausgegeben.

## Beispielausgabe

Wenn nun eine Seite von Wicket serialisiert wird, dann wird während des Schreibens des Objektgraphen die Anzahl der geschriebenen Bytes ermittelt und den passenden Objekten zugeteilt. Dabei gibt es gewisse Unschärfen. Wenn ein Objekt referenziert wird, wird nur das erste mal das Objekt selbst geschrieben. Jedes weitere mal wird nur eine Referenz auf das Objekt serialisiert, was natürlich viel weniger Platz in Anspruch nimmt. Insofern ist die Auswertung immer dann mit Vorsicht zu genießen, wenn ein Objekt an verschiedenen Stellen referenziert wird und nur einer den "Zuschlag" erhält.

Die Ausgabe und der ganze Serialisierungsprozess ist hochgradig anpassbar. In der Beispielkonfiguration entsteht für eine Beispielseite folgendes Ergebnis:

DEBUG - KryoSerializer - Going to serialize: '[Page class = de.wicketpraxis.usecase.models.ModelsV1Page, id = 4, render count = 1]'
DEBUG - TypeSizeReport -
===================================================================
|Type........................................................bytes|
-------------------------------------------------------------------
|de.wicketpraxis.usecase.models.ModelsV1Page...................133|
|org.apache.wicket.markup.html.basic.Label.....................102|
|java.lang.Integer..............................................21|
|java.lang.String................................................9|
|de.wicketpraxis.usecase.models.ModelsV1Page$1...................3|
|de.wicketpraxis.usecase.models.ModelsV1Page$2...................3|
|org.apache.wicket.request.mapper.parameter.PageParameters.......3|
|[Ljava.lang.Object;.............................................2|
===================================================================

DEBUG - TreeSizeReport -
===========================================================================================
| #|Type.............................................................%|.sum|.local|.child|
-------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.models.ModelsV1Page(4)................100%|.276|...129|...147|
| #4| [Ljava.lang.Object;..........................................48%|.135|.....2|...133|
|#12| org.apache.wicket.markup.html.basic.Label(now2)............24%|..67|....51|....16|
|#15| java.lang.Integer(=1343434906)............................1%|...5|.....5|.....0|
|#17| java.lang.String("now2")..................................1%|...5|.....5|.....0|
|#14| org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
|#16| java.lang.Integer(=-1)....................................0%|...1|.....1|.....0|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
| #5| org.apache.wicket.markup.html.basic.Label(now).............23%|..66|....51|....15|
| #9| java.lang.Integer(=1343434906)............................1%|...5|.....5|.....0|
| #8| org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
|#11| java.lang.String("now")...................................1%|...4|.....4|.....0|
|#10| java.lang.Integer(=-1)....................................0%|...1|.....1|.....0|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
|#18| java.lang.Integer(=1342845082)................................1%|...5|.....5|.....0|
|#22| org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
| #2| java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
|#19| java.lang.Integer(=-1)........................................0%|...1|.....1|.....0|
|#20| java.lang.Integer(=4).........................................0%|...1|.....1|.....0|
|#23| java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
===========================================================================================

DEBUG - TreeSizeReport -
============================================================================================
| #|Type.............................................................%|.sum|.local|.child|
--------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.models.ModelsV1Page(4)................100%|.276|...129|...147|
| #4| [Ljava.lang.Object;..........................................48%|.135|.....2|...133|
| #12| org.apache.wicket.markup.html.basic.Label(now2)............24%|..67|....51|....16|
|null| java.lang.Integer(=1343434906|=-1)........................2%|...6|.....6|.....0|
| #17| java.lang.String("now2")..................................1%|...5|.....5|.....0|
| #14| org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
| #5| org.apache.wicket.markup.html.basic.Label(now).............23%|..66|....51|....15|
|null| java.lang.Integer(=1343434906|=-1)........................2%|...6|.....6|.....0|
| #8| org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
| #11| java.lang.String("now")...................................1%|...4|.....4|.....0|
| #0| de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
|null| java.lang.Integer(=1|=1342845082|=-1|=4)......................3%|...9|.....9|.....0|
| #22| org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
============================================================================================

Die erste Tabelle enthält eine Aufschlüsselung nach Typen, die zweite Tabelle stellt den fast ungefilterten Komponentenbaum dar (die Klasse Component verwaltet Kindkomponenten und andere Dinge in einem Object-Array, weshalb im Baum [Ljava.lang.Object auftaucht). Die dritte Tabelle versucht gleiche Zweige zusammen zu fassen. Dabei werden die Größen aufadiert und die Labels (in Klammern dahinter) vereint. Die Angaben in den Klammern hinter den Klassennamen stellen ein Label für die Klasse dar. Bei Wicket-Komponenten ist das die Id, bei nativen Datentypen der Wert.

Und das nächste Mal sehen wir uns an, was für interessante Entdeckungen man damit machen kann. Doch zuvor ein Hinweis. Das sollten sie so nie in Produktivumgebungen einsetzen. Auch kann es bei bestehenden Anwendung zu sehr sehr umfangreichen Ausgaben kommen, so dass man in einer IDE die Logausgabe vielleicht besser in eine Datei umlenkt.

Viel Spass mit dem Experimentieren.

Den Code für die Beispielen findet man unter https://github.com/michaelmosmann/wicket-praxis/tree/master/quickstarts/de.wicketpraxis-quickstarts-15-kryo2

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2012-11-27 22:25:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Migration - Green Radish</title>
		<link>http://www.wicket-praxis.de/blog/2009/01/10/wicket-migration-green-radish/</link>
		<pubDate>Sat, 10 Jan 2009 17:27:48 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[Es ist ein schöner Moment, wenn man sich von Eigenentwicklungen trennen kann. In meinem Fall ist das ein Webframework für das ich lange keinen Ersatz gefunden habe. Nun habe ich meiner erste vollständig mit Wicket realierte Anwendung fertiggestellt. Die Migration von dem bestehenden Framework war nicht besonders schwer. Allerdings sollte sich die Wicketanwendung aus zwei Gründen genauso verhalten wie die alte Anwendung:
<ol>
	<li>Die Entwicklungszeit sollte so gering wie möglich gehalten werden, damit nicht zwei Versionen einer Anwendung zu pflegen sind.</li>
	<li>Die wichtigsten Seiten sollten an extakt gleicher Stelle auffindbar sein, damit keine Aufwendige Neuindizierung durch Google und andere Suchmaschinen notwendig wird. Der Austausch von Alt und Neu sollte jederzeit rücknehmbar sein, für den Fall, dass es zu Problemen kommt.</li>
</ol>
Heute ist der große Tag. Gerade habe ich die Anwendung auf den Server geschoben und jetzt wird umgeschalten: <a title="Green Radish Handytaschen" href="http://www.green-radish.de" target="_blank">www.green-radish.de</a>

In den nächsten Wochen werden dann verschiedene Funktionen hinzukommen, die mit Wicket so viel einfacher zu realisieren sind, dass ich mich schon auf diese Aufgaben freue. Bis dahin freue ich mich auf Feedback.

Michael:)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2009-01-10 18:27:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-10 17:27:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-migration-green-radish]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="application"><![CDATA[application]]></category>
		<category domain="post_tag" nicename="real"><![CDATA[real]]></category>
		<category domain="post_tag" nicename="seo"><![CDATA[seo]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386680691]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:17:"49.70414187774802";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"382";s:5:"score";s:18:"24.709204077850913";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"17.403174194355895";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"16.52364239673936";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"154";s:5:"score";s:18:"10.841002937606026";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"223";s:5:"score";s:17:"6.710092338421187";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[@wicketpraxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wicketpraxis@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/wicketpraxis/statuses/1109331533</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-10 18:28:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-10 17:28:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New blog post: Wicket Migration - Green Radish http://tinyurl.com/8os659]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476304</wp:comment_id>
			<wp:comment_author><![CDATA[Minnie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ud7zy6ca77@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dunviwcu.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 02:11:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 01:11:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are so awesome for helping me solve this myryest.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486689107.042064;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Favicon mit HeaderContributor</title>
		<link>http://www.wicket-praxis.de/blog/2009/01/11/favicon-mit-headercontributor/</link>
		<pubDate>Sun, 11 Jan 2009 13:34:44 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[Um seiner Wicket-Anwendung ein geeignetes Favicon zu verleihen, erstellt man einen HeaderContributor. Als Parameter dient eine ResourceReference auf das darzustellende Icon.
<pre lang="java">public class FavIconHeaderContributor implements IHeaderContributor
{
  ResourceReference _resourceReference;

  public FavIconHeaderContributor(ResourceReference resourceReference)
  {
    _resourceReference=resourceReference;
  }

  public void renderHead(IHeaderResponse response)
  {
    CharSequence url = RequestCycle.get().urlFor(_resourceReference);
    response.renderString(getFavIconReference(url));
  }

  private CharSequence getFavIconReference(CharSequence url)
  {
    StringBuilder sb=new StringBuilder();
    sb.append("<link rel=\"shortcut icon\" href=\"");
    sb.append(url);
    sb.append("\" type=\"image/x-icon\">\n");
    return sb.toString();
  }
}</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2009-01-11 14:34:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-11 13:34:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[favicon-mit-headercontributor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="contributor"><![CDATA[contributor]]></category>
		<category domain="post_tag" nicename="favicon"><![CDATA[favicon]]></category>
		<category domain="post_tag" nicename="header"><![CDATA[header]]></category>
		<category domain="post_tag" nicename="resource"><![CDATA[resource]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386676268]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:17:"48.00327089355237";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"323";s:5:"score";s:17:"31.70198530620836";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:18:"21.975250214637892";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"12.737414927338753";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"12.737414927338753";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"370";s:5:"score";s:16:"9.04477893032667";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>486</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-10 10:12:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-10 09:12:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Du kannst einen HeaderContributor in jeder Komponente hinzufügen. Man könnte sich also eine FavIcon-Komponente bauen, die verschiedene Icons anzeigt und die man dann einfach einbindet.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>485</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>485</wp:comment_id>
			<wp:comment_author><![CDATA[bert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[taseroth@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.111.241.81]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-10 09:23:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-10 08:23:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[interessanter Beitrag. Wie genau binde ich den HeaderContributer ein? Ich vermute mal in der BasePage der Anwendung?

Danke für den Blog..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>623</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[victor.ott@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 14:39:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 13:39:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Schön daß endlich jemand über die FavIcons schreibt, ich habe das immer irgendwie falsch angepackt. Ein kurzes Anwendungsbeispiel würde dieses Posting perfekt machen.     Den StringBuilder ohne capacity-Angabe sieht man leider viel zu oft, auch in Büchern, ist jedoch kein gutes Beispiel.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>706</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[losdrakanos@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.maxity.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.80.238.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-17 16:59:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-17 15:59:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gutes Beispiel. Ich habe es mal so weit ergänzt, das es einen funktionsfähigen HeaderContributer ergibt: http://devblog.drakanor.de/2009/09/favicon-with-wicket-and.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476307</wp:comment_id>
			<wp:comment_author><![CDATA[Stone]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hz9j1t18n@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://nykqxpjpmxu.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 02:24:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 01:24:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's a plsreuae to find someone who can think so clearly]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>706</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486689856.922231;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Migration von 1.3.5 auf 1.4-rc2</title>
		<link>http://www.wicket-praxis.de/blog/2009/03/02/wicket-migration-von-135-auf-14-rc2/</link>
		<pubDate>Mon, 02 Mar 2009 13:52:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[Soeben habe ich eine Migration auf Wicket 1.4-rc2 durchgeführt. Ausschlaggebend für die Migration war die Überarbeitung im Model-Bereich. Typisierte Modelle sind sehr viel handlicher und machen den Code sehr viel lesbarer. Da man die Komponenten ja auch schon generisch angelegt hat, ging diese Information bisher in den Modellen verloren.

Interessante Statistik:
<ul>
	<li>Anzahl der Java-Dateien im Webprojekt: 376</li>
	<li>Anzahl der Java-Dateien, die angepasst werden mussten: 32</li>
	<li>Zeitaufwand für die Umstellung: 1h,30min</li>
</ul>
Ich glaube, das Risiko ist gering und der Vorteil ist groß. Meine Empfehlung: Umsteigen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2009-03-02 14:52:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-03-02 13:52:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-migration-von-135-auf-14-rc2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="135"><![CDATA[1.3.5]]></category>
		<category domain="post_tag" nicename="14"><![CDATA[1.4]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386697062]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"95.86664963692687";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"25.776023319166832";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"17.403174194355895";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"16.269390698710406";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.269390698710406";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"15.546296758686829";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[@wicketpraxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wicketpraxis@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/wicketpraxis/statuses/1269218495</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-02 14:51:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-02 13:51:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New blog post: Wicket Migration von 1.3.5 auf 1.4-rc2 http://tinyurl.com/c5athp]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>onclick statt Link</title>
		<link>http://www.wicket-praxis.de/blog/2009/04/18/onclick-statt-link/</link>
		<pubDate>Sat, 18 Apr 2009 12:02:13 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[Was mir eigentlich nur durch Zufall auffiel, ist die Tatsache, dass man in Wicket einen Link auch an andere Tags als "a","area", etc binden kann. Netterweise macht Wicket dann daraus einen Javascript-Aufruf. Das geht mit einem Link und (wesentlich interessanter) auch mit einem AjaxFallbackLink.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2009-04-18 13:02:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-04-18 12:02:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[onclick-statt-link]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="ajaxfallbacklink"><![CDATA[ajaxfallbacklink]]></category>
		<category domain="post_tag" nicename="link"><![CDATA[link]]></category>
		<category domain="post_tag" nicename="onclick"><![CDATA[onclick]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386697125]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"22.800869338901897";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"382";s:5:"score";s:16:"4.56017386778038";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"265";s:5:"score";s:16:"4.56017386778038";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"257";s:5:"score";s:16:"4.56017386778038";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"249";s:5:"score";s:16:"4.56017386778038";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"220";s:5:"score";s:16:"4.56017386778038";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>413</wp:comment_id>
			<wp:comment_author><![CDATA[@wicketpraxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wicketpraxis@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/wicketpraxis/statuses/1550208957</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-18 13:59:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-18 12:59:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New blog post: onclick statt Link http://tinyurl.com/ddmrld]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1937</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.220.87.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-26 02:46:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-26 01:46:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michael,

wie läßt sich ein externer Link in einer ListView ohne Javascript darstellen? Was auch immer ich versuche, ich bekomme nur Ajax links.

Viele Grüße]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1942</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-26 09:31:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-26 08:31:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kann ich mal den Code sehen? Die ExternalLink-Klasse sollte es richten, oder verstehe ich das Problem gerade nicht?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1937</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1958</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[62.176.231.146]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-27 12:33:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-27 11:33:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hier ist der Code. Frei nach dem ListViewPage - Beispiel aus dem Buch.

Ganz unten steht der generierte HTML-Code.

Was ich gerne hätte wären ganz normale externe links, ohne JavaScript. Wie geht das?

<code>
package de.wicketpraxis.findfiles.pages;

import java.util.Arrays;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.link.ExternalLink;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;

public class ListViewPage extends WebPage {

	public ListViewPage() {

		add(new ListView("list", Arrays.asList(new ExternalLink(
				"part1", "http://www.google.de", "http://www.google.de"), new ExternalLink("part1", "http://www.findfiles.net",
				"http://www.findfiles.net"))) {

			@Override
			protected void populateItem(ListItem item) {
				ExternalLink text = item.getModelObject();
				item.add(text);
			}

		});
	}
}
</code>



Start



	
		<strong>http://www.google.de</strong>
	
		<strong>http://www.findfiles.net</strong>

	


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1961</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[62.176.231.146]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-27 13:22:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-27 12:22:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hier ist der Code. Frei nach dem ListViewPage - Beispiel aus dem Buch.

Ganz unten steht der generierte HTML-Code.

Was ich gerne hätte wären ganz normale externe links, ohne JavaScript. Wie geht das?

package de.wicketpraxis.findfiles.pages;

import java.util.Arrays;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.link.ExternalLink;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;

public class ListViewPage extends WebPage {

	public ListViewPage() {

		add(new ListView("list", Arrays.asList(new ExternalLink(
				"part1", "http://www.google.de", "http://www.google.de"), new ExternalLink("part1", "http://www.findfiles.net",
				"http://www.findfiles.net"))) {

			@Override
			protected void populateItem(ListItem item) {
				ExternalLink text = item.getModelObject();
				item.add(text);
			}

		});
	}
}]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1963</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-28 10:56:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-28 09:56:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wie sieht denn das Html der Ergebnisseite aus? Sollte man nicht eher die Liste der Links (also der url) übergeben und dann

<code>
  String url=item.getModelObject();
  item.add(new ExternalLink("link",url,url);
</code>

schreiben?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1961</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1975</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.187.45.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-28 22:53:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-28 21:53:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hier nochmal der von Dir vorgeschlagene Code:

add(new ListView("list",Arrays.asList("http://www.google.de/", "http://www.findfiles.net/")) {

			@Override
			protected void populateItem(ListItem item) {
				String url=item.getModelObject();
				item.add(new ExternalLink("link",url,url));
			}
 
		});

Hier die Html Datei. Habe die eckigen Klammern mit Geschweiften ersetzt. Es wird Javascript ausgegeben. Ich hätte gerne {a href=http....} linktext {/a} . Wie kann ich das mit Wicket machen?

{html}
{head}
{title}Start{/title}
{/head}
{body}
{table}
	{tr}
		{td}{strong}{span onclick="window.location.href='http://www.google.de/';return false;"}http://www.google.de/{/span}{/strong}{/td}
	{/tr}{tr}
		{td}{strong}{span onclick="window.location.href='http://www.findfiles.net/';return false;"}http://www.findfiles.net/{/span}{/strong}{/td}

	{/tr}
{/table}
{/body}
{/html}]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2032</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.220.83.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-01 10:53:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-01 09:53:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eine Idee, wie man externe Links ohne Javascript im Html-Code bekommt?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1975</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2038</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-01 16:07:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-01 15:07:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich glaube, die Lösung ist extrem einfach. Mann muss nur statt {span wicket:id="link"}{/span} {a wicket:id="link" }{/a} schreiben. Das Mitdenken von Wicket ist hier zum Verhängnis geworden. Wenn Wicket statt eines Links etwas anderes bekommt, dann versucht er das über javascript zu lösen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2032</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2046</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.187.83.229]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-01 23:55:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-01 22:55:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich verstehe den Satz nicht: "Mann muss nur statt -&gt; schreiben."]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2054</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-02 06:20:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-02 05:20:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Habe den Kommentar berichtigt.. hoffentlich ist es jetzt klarer. :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2046</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2056</wp:comment_id>
			<wp:comment_author><![CDATA[interessierter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.128.27.142]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-02 09:20:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-02 08:20:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Super! Danke, Michael. Hat geklappt.

Übrigens, tolles Buch. Lerne viel damit.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2060</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-02 10:50:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-02 09:50:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gern geschehen.. :)
Wenn Du mir Feedback zu den Stellen im Buch geben möchtest, die in deinen Augen nicht so gut geschrieben waren oder sonstige Kritik, dann gern per E-Mail. Oder auch als Kommentar..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476377</wp:comment_id>
			<wp:comment_author><![CDATA[Latisha]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[q9edox2p@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://lsvxbls.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 09:34:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 08:34:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You have such a wonderfully subtle way of shooting. These photos make me wish I was on-board. And since I can&#039;t be, they&#039;re more than good enough to make me feel like a part of the sc93e.What&amp;#ne;s that bridge? Looks like a huge suspension bridge, and it adds an additional element of travel and potential to the scene. Delightful!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2038</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486715648.7982421;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Die Ruhe vor dem Sturm</title>
		<link>http://www.wicket-praxis.de/blog/2009/05/11/die-ruhe-vor-dem-sturm/</link>
		<pubDate>Mon, 11 May 2009 21:10:49 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket 1.4 nähert sich der Fertigstellung. Das ist ein gutes Zeichen, auch wenn ich Wicket 1.4-rc2 bereits längere Zeit ohne Probleme produktiv einsetze. Dieses Jahr wird ein Wicket-Jahr, denn so langsam beschäftigen sich immer mehr Entwickler mit dem Framework. Außerdem erscheinen in diesem Jahr einige Bücher rund um Wicket, so dass man gespannt sein darf, welche Auswirkung aktuelle Literatur zu diesem Thema haben wird.

Für mich steht diese Jahr auch im Zeichen von Scala. Die IDE-Unterstützung verbessert sich zunehmen, so dass man jetzt schon wieder zwischen Eclipse und Netbeans wählen kann. Wenn man dann Scala mit Wicket kombiniert, könnte man bei der Umsetzungsgeschwindigkeit auch Frameworks wie Grails den Platz auch gerade bei einfachen Projekten streitig machen. Das Wicket gerade bei komplexen Projekten punktet hat sich zwar auch noch nicht überall herumgesprochen, aber je mehr Anwendungen mit Wicket realisiert werden, desto schwieriger kann man diese Entwicklung ignorieren.

Damit bleiben für mich zwei Technologien übrig, mit denen man sinnvoll Java-basierte Webanwendungen entwickeln kann: GWT und Wicket. Für alle anderen Frameworks gibt es eigentlich keine Berechtigung, weil es keine guten Gründe mehr gibt, die für deren Einsatz sprechen. Wer andere Meinung ist, kann sich ja in einem Kommentar beschweren.

Am Ende des Jahres werden wir sehen, wie dicht ich dran lag:)

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2009-05-11 22:10:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-05-11 21:10:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[die-ruhe-vor-dem-sturm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[grails]]></category>
		<category domain="post_tag" nicename="gwt"><![CDATA[gwt]]></category>
		<category domain="post_tag" nicename="jsf"><![CDATA[jsf]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386683275]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"131.16963337523288";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"83.70300020404392";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:16:"82.0423042758941";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"49.309339582819476";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"35.93840502737362";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:18:"28.359752657263524";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>473</wp:comment_id>
			<wp:comment_author><![CDATA[Drakanor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[losdrakanos@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.drakanor.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.206.198.79]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-22 13:06:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-22 12:06:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wenn man deine Aussage auf Core-Applications beschränkt, kommt für mich sogar nur Wicket in Frage. GWT mit seiner extremen JS-Konvertierung geht für mich vom Konzept her eher in Richtung Flex/Silverlight/JavaFX, auch wenn ich dafür kein Plugin benötige.
Leider ist man ja aber bei komplexen Portal-Anwendungen, wie sie im Feld der Webapplications ja eher die Regel sind, auf ganz andere Frameworks angewiesen (Liveray, OpenCms, ...), so das man die Aussage sicher nicht ganz so allgemein stehen lassen kann. ;)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>474</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.75]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-22 13:50:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-22 12:50:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In Portal-Umgebungen oder im Zusammenhang mit einem wie auch immer gearteten CMS wird es natürlich recht schnell unangenehm. Interessant wäre dabei die Wicket-Portlet-Unterstützung, die ich in Zukunft mal testen werde. Ansonsten stelle ich mir immer öfter die Frage, ob die Verschmelzung mit einem CMS nicht mehr Nach- als Vorteile verursacht. Gerade weil man mit Wicket doch recht komplexe Anwendung realisieren kann, wäre eine vielleicht denkbare Alternative die Erfassung strukturierter Informationen, die dann durch Wicket an den gewünschten Stellen dargestellt werden. Interessant wäre auch ein Live-Edit-Modus, der es Redakteuren ermöglicht, in grenzen auf die Darstellung und Anordnung Einfluss nehmen zu können. Dabei steht dann zwar nur die Flexibilität zur Verfügung die die Anwendung bereitstellen würde, könnte aber auf diese Weise auch Fehlbedienungen eindämmen.

In der Realität ist es nie so schön, wie man es sich in seinem Kopf zusammengebaut hat. Wicket ist aber flexibel genug, dass man doch recht eindrucksvoll Brücken zwischen beiden Welten bauen könnte.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>473</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>620</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[victor.ott@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://extronis.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 13:29:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 12:29:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Apropos CMS: <a href="http://code.google.com/p/brix-cms/" rel="nofollow">BRIX CMS</a>. Noch keine eigenen Erfahrungen gesammelt, Zeit reicht im Moment nicht aber ich schiele jede paar Tage in diese Richtung...
Meiner Meinung nach ist Integration von Wicket-Anwendungen in anderen Frameworks/Portalen nicht komplizierter als für  andere WebFrameworks.
Bin auch der Meinung daß dieses/nächstes Jahr Wicket-Jahre werden können. Vorletzte Woche habe ich die erste Stellenanzeige (oder Projektanfrage?) mit Wicket-Anforderungen gelesen, iirc im Raum München. Es geht los ;-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Praxis als Buch</title>
		<link>http://www.wicket-praxis.de/blog/2009/05/27/wicket-praxis-als-buch/</link>
		<pubDate>Wed, 27 May 2009 21:46:43 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[Guter Wein braucht Zeit. Ein Buch zu schreiben ist vielleicht nicht ganz so zeitaufwendig, aber eben auch nicht mal so schnell gemacht. Ein Buch über Wicket zu schreiben ist aber vermutlich noch eine zusätzliche Herausforderung. Wenn ich vorher gewusst hätte, wie viel Arbeit ich in <a href="http://www.amazon.de/Praxisbuch-Wicket-Michael-Mosmann/dp/3446419098/ref=sr_1_6?ie=UTF8&s=books&qid=1243428212&sr=1-6">Praxisbuch Wicket</a> stecken muss, hätte ich es vermutlich nicht angefangen. Aber zum Glück weiß man sowas vorher nicht und so hieß es immer wieder "Zähne zusammen beißen". Der nette Nebeneffekt: ich kenne Wicket jetzt schon sehr genau.

Und das was ich gesehen habe, verdient Respekt. Wicket ist ein sehr gut strukturiertes Softwareprojekt mit sehr guter Dokumentation in den Quelltexten und mit unglaublich vielen Möglichkeiten. Diese unglaubliche Flexibilität hat zwar dazu geführt, dass ich mehr Zeit als erwartet investieren musste, damit das Buch einen sinnvollen Rahmen findet. Aber es ist eben auch diese Flexibilität, die Wicket für so viele Webprojekte qualifiziert.

Warum habe ich das Buch geschrieben? Der Grund ist relativ einfach und indirekt egoistisch: Wenn mehr Leute Wicket benutzen, dann gibt es auch mehr Entwicklungen für Wicket (wie z.B. ein funktionierendes Plugin für Eclipse). Und das fände ich großartig. In dem ich ein Buch schreibe, in dem ich all meine Erfahrungen im Umgang mit Wicket einfließen lasse, beschleunige ich diesen Prozess, weil das Entwickeln mit Wicket wirklich Spass macht. Und wenn der Projektalltag mal nicht so viel Spaß macht, dann ist Wicket ein guter Freund, der Dir den Rücken frei hält.

Ich bin gespannt auf die Reaktionen und das Feedback. Ich danke allen die an mich geglaubt und mich unterstützt haben, und wenn es nur das beheben eines Fehlers war, der mir den Tag gerettet hat.

Michael Mosmann]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2009-05-27 22:46:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-05-27 21:46:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-praxis-als-buch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="buch"><![CDATA[buch]]></category>
		<category domain="post_tag" nicename="praxis"><![CDATA[praxis]]></category>
		<category domain="post_tag" nicename="praxisbuch"><![CDATA[praxisbuch]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386688785]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"46.87757652488804";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"194";s:5:"score";s:17:"30.67594669884119";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"30.57283522295203";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"125";s:5:"score";s:17:"23.43878826244402";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"247";s:5:"score";s:17:"23.31056414003805";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"168";s:5:"score";s:17:"23.31056414003805";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>477</wp:comment_id>
			<wp:comment_author><![CDATA[a11158]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[geoskills2000-komment@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.200.70.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-28 06:40:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-28 05:40:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich bin ebenfalls ein begeisterter Fan von Wicket. 
Das Framework ist genial strukturiert und extrem leistungsfähig. Obwohl ich mich schon über mehrere Monate mit Wicket beschäftige entdecke ich immer wieder viele neue Dinge. 
Mit Wicket kann man endlich leistungsfähige Webapplicatioen erstellen, und zwar genau so, wie man sich es immer schon als Javaprogrammierer gewünscht hat. 
Ich freue mich schon wenn das Buch bei Amazon erhältlich ist.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>479</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[losdrakanos@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.drakanor.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.206.106.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-31 17:35:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-31 16:35:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bereits jetzt, wo selbst englische Literatur dazu _noch_ rar ist, ein deutsches Buch zu Wicket. Erstaunlich, Hut ab dafür. Es steht auf alle Fälle auf meiner Einkaufsliste für dieses Jahr.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6267</wp:comment_id>
			<wp:comment_author><![CDATA[greg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.220.63.239]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-19 06:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-19 05:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michael,

auf Seite 268 Deines Buches stellst Du eine Methode vor, um für Bots die jsessionid aus der Url zu entfernen. Meine Frage ist. Wird dennoch mit jedem Botzugriff eine Session generiert? Wenn ja, kann man sie vor ihrem Timeout löschen? 

Viele Grüße

greg]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6291</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-21 16:08:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-21 15:08:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[AFAIK wird bei jedem Zugriff eine Session erzeugt. Da bei Bots vermutlich nicht garantiert werden kann, wann die Zugriffe erfolgen, würde eine in die Url kodierte Session mit hoher Sicherheit auch nicht helfen.

Die Session anhängig vom Client (Bot oder Mensch) kürzer zu halten, könnte man in Wicket könnte wie folgt lösen: In der WebApplication-Klasse überschreibt man newSession():

@Override
public Session newSession(Request request, Response response)
{
  int timeoutInSeconds = getTimeOutForBotsOrHumans(request);
  setSessionTimeout(request, timeoutInSeconds);
  return new WebSession(request);
}

protected static int getTimeOutForBotsOrHumans(Request request)
{
  // hier müsste man den Http-Header auswerten und den Timeout entsprechend setzen
  return 1800; // 30min
}

protected static void setSessionTimeout(Request request, int seconds)
{
  WebRequest webRequest=(WebRequest) request;
  HttpSession session=webRequest.getHttpServletRequest().getSession();
  if (session != null)
  {
    session.setMaxInactiveInterval(seconds);
  }
}]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket ohne Template</title>
		<link>http://www.wicket-praxis.de/blog/2009/06/16/wicket-ohne-template/</link>
		<pubDate>Tue, 16 Jun 2009 19:13:06 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[Ich spiele seit einiger Zeit mit dem Gedanken, ob man basierend auf Wicket Komponenten entwickelt, die alle das entsprechende eigene Template mitbringen. Auf diese Weise könnte man dann Webanwendungen entwickeln, ohne eine Zeile Html-Code schreiben zu müssen. Verrückte Idee?

Normalerweise reduziert sich die Arbeit mit dem Html-Templates auf das Anordnen der Komponenten. Das was übrig bleibt (eine paar div-Tags), sollte man durch den Einsatz von Layout-Komponenten ersetzen können. Dann programmiert man wie für eine Desktopanwendung und das Ergebnis sieht gleich entsprechend gut aus, wenn man zu die passende CSS-Datei mitliefert.

Bis jetzt fehlt mir noch der geeignete Ansatz und die Entscheidung für ein CSS-Framework. Für Empfehlungen und Tipps bin ich in dieser Phase sehr empfänglich. :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2009-06-16 20:13:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-16 19:13:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-ohne-template]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="desktop"><![CDATA[desktop]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="post_tag" nicename="template"><![CDATA[template]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386768489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"34.38015443372959";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"204";s:5:"score";s:18:"31.889323744098757";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"27.343717160407465";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"23.299215240301358";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"22.296890731139264";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"15.627342924422535";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>677</wp:comment_id>
			<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[c.reiter@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.64.144.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-15 09:03:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-15 08:03:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Klingt hochinteressant! Gibt es in dem Bereich schon Fortschritte?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>678</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-15 09:13:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-15 08:13:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich habe testweise schon etwas implementiert. Grundsätzlich funktioniert das, ich glaube aber, dass man nur dann daraus nutzen ziehen kann, wenn man die Komponenten sehr oft wiederverwendet. Oft verwendet man daher eine Mischung aus beiden.

Wenn ich zu einem anschaulichen Ergebnis gekommen bin, werde ich es im Blog veröffentlichen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>677</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket und Scala</title>
		<link>http://www.wicket-praxis.de/blog/2009/06/16/wicket-und-scala/</link>
		<pubDate>Tue, 16 Jun 2009 19:32:27 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[Vor kurzem habe ich mir das Buch <a href="http://www.amazon.de/gp/product/0981531601?ie=UTF8&tag=mosmannde-21&linkCode=as2&camp=1638&creative=6742&creativeASIN=0981531601">Programming in Scala</a><img style="border:none !important; margin:0px !important;" src="http://www.assoc-amazon.de/e/ir?t=mosmannde-21&l=as2&o=3&a=0981531601" border="0" alt="" width="1" height="1" /> gekauft und durchgelesen. Dabei haben mir verschiedene Dinge von Anfang an sehr gut gefallen. Ich glaube, mit Scala kann man sehr elegant entwickeln. Das sollte sich auch z.B. beim Umfang der Quelltexte bemerkbar machen. Aber diese Sätze hätte ich so nicht geschrieben, wenn es nicht auch ein paar Probleme geben würde.

Die Frage, die mich intensiv beschäftigt, lautet: Bin ich mit Scala so viel schneller, dass ich Java mit einer hervorragenden Entwicklungsumgebung im Rücken, schlagen kann. Ich habe mir Netbeans und Eclipse angesehen. Der Scala-Support ist ähm.. naja. Da ist noch sehr viel Abstand zu den Dingen, die ich in einer IDE vermissen werde. Herausragend ist das das Thema Refactoring und dass was man in Eclipse "QuickFix" nennt.

Aber um ein besseres Gefühl dafür zu bekommen, werde ich in den nächsten Wochen wohl mal damit anfangen, den Wicket-Java-Stack auf Scala umzustellen. Ob ich dabei von Spring zu Guice wechsle ist eben so offen, wie ein geschickter Ansatz in Bezug auf Hibernate.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2009-06-16 20:32:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-16 19:32:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-und-scala]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386676835]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"87.81075978337884";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"62.46823606489214";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"44.69050379348575";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"26.814302276091453";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"26.13802271576398";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"68";s:5:"score";s:18:"15.130129008587334";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Scala - der erste Versuch</title>
		<link>http://www.wicket-praxis.de/blog/2009/06/17/wicket-scala-der-erste-versuch/</link>
		<pubDate>Wed, 17 Jun 2009 22:20:51 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[So. Das klappt schon einmal. Das Aufsetzen einer Wicket-Anwendung mit Scala funktioniert wie erwartet. Label hinzufügen, einen AjaxLink einbinden und fertig ist der erste Test. Es fällt bereits angenehm auf, dass man die ganzen Typen weglassen kann. Unangenehm ist allerdings, dass das Scala-Plugin für Eclipse keine so ausgefeilte Code-Vervollständigung bietet, was sich in diesem ersten Test während des dann doch komplizierten Imports der passenden Klasse bemerkbar machte. Label<Strg><Space> liefert bei Java zuverlässig den richtigen Typ.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2009-06-17 23:20:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-17 22:20:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-scala-der-erste-versuch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386696987]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"68.98585570407432";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"63.03851199248557";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"46.04595871063109";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:17:"32.26923532405402";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"26.814302276091453";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:18:"18.418383484252438";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket und Scala - der Rückweg ist anstrengend</title>
		<link>http://www.wicket-praxis.de/blog/2009/06/19/wicket-scala/</link>
		<pubDate>Fri, 19 Jun 2009 07:20:14 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe mal ein wenig mit Scala rumgespielt und mit den Sprachmöglichkeiten, die Scala bietet, versucht aus einem Java-lastigen Wicket-Beispiel etwas zu machen, was sich wie Scala anfühlt. Zuerst der Java-Code:
<pre lang="java">package de.flapdoodle.incubator.scalawicket.web.pages;

import org.apache.wicket.Component;
import org.apache.wicket.IClusterable;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;

public class StartJava extends WebPage
{
  public StartJava()
  {
    IModel messageModel=Model.of("Huiii");
    final Label label=new Label("message",messageModel);
    label.setOutputMarkupId(true);
    
    add(label);
  
    final Bean bean=new Bean();
    bean.setName("Klaus");
    bean.setAlter(12);
   
    final Component labelName = new Label("name",new PropertyModel(bean,"name")).setOutputMarkupId(true);
    final Component labelAlter = new Label("alter",new PropertyModel(bean,"name")).setOutputMarkupId(true);
    add(labelName);
    add(labelAlter);
    
    final Form form=new Form("form", new CompoundPropertyModel(bean));
    form.add(new TextField("name")).add(new TextField("alter"));
    form.setOutputMarkupId(true);
    add(form);
    
    add(new AjaxFallbackLink("link",messageModel)
    {
      public void onClick(AjaxRequestTarget target) 
      {
        getModel().setObject("Klick");
        bean.setName("Peter");
        target.addComponent(form);
        target.addComponent(label);
        target.addComponent(labelName);
        target.addComponent(labelAlter);
      }
    });
  
    add(new AjaxLink("link2",messageModel)
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        getModel().setObject("Klack");
        bean.setAlter(24);
        target.addComponent(form);
        target.addComponent(label);
        target.addComponent(labelName);
        target.addComponent(labelAlter);
      }
    });
  }
  
  class Bean implements IClusterable
  {
    String _name;
    int _alter;
    public String getName()
    {
      return _name;
    }
    public void setName(String name)
    {
      _name = name;
    }
    public int getAlter()
    {
      return _alter;
    }
    public void setAlter(int alter)
    {
      _alter = alter;
    }
  }
}</pre>
.. und nun das ganze in Scala
<pre lang="scala">package de.flapdoodle.incubator.scalawicket.web.pages;

import org.apache.wicket.Component;
import org.apache.wicket.IClusterable;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import de.flapdoodle.incubator.scalawicket.web.wicket.WicketHelper._
import scala.reflect.BeanProperty;

class Start extends WebPage 
{
  val messageModel=Model.of("Huiii")
  val label=new Label("message",messageModel)
  label.enableAjax
  
  this+=label;

  val bean=new Bean
  bean.name="Klaus";
  bean.alter=12;

  val labelName = new Label("name",bean model {_.name}).enableAjax
  val labelAlter = new Label("alter",bean model {_.alter}).enableAjax
  this+=labelName
  this+=labelAlter
  
  val form=new Form[Bean]("form", new CompoundPropertyModel[Bean](bean));
  form+=(new TextField("name"),new TextField("alter"))
  form.enableAjax
  this+=form
  
  this+=new AjaxFallbackLink[String]("link",messageModel)
  {
    override def onClick(target: AjaxRequestTarget) = 
    {
      this.model set "Klick"
      bean.name="Peter"
      target.refresh(form,label,labelName,labelAlter)
    }
  };

  this+=new AjaxLink("link2",messageModel)
  {
    override def onClick(target: AjaxRequestTarget) =
    {
      this.model set "Klack"
      bean.alter=24
      target.refresh(form,label,labelName,labelAlter)
    }
  };

  class Bean extends IClusterable
  {
    @BeanProperty
    var name: String = _;
    @BeanProperty
    var alter: Integer = _;
  }
}</pre>
Zuerst zu den offensichtlichen Dingen:
<ul>
	<li>Java: Zeilen=91, Wörter=155, Zeichen=2.567</li>
	<li>Scala: Zeilen=69(75%), Wörter=126(81%), Zeichen=1.921(75%)</li>
</ul>
In diesem Beispiel kann Scala seine Vorteile vielleicht noch nicht richtig ausspielen. Wobei 25% weniger Schreibarbeit (wenn man vernachlässigt, dass ich einmalig etwas Scala-Code schreiben musste, was mir das ermöglicht) für dieses Beispiel vielleicht auch schon eine bemerkenswerte Menge ist.

Spannender ist folgender Umstand: Ich habe den Java-Code aus dem Scala-Code abgeleitet. Wenn ich das Beispiel direkt in Java geschrieben hätte, sähe der Code fast genauso aus. Als ich aber den Scala-Code rückübersetzte, fiel es mir sehr schwer, die ganzen Typ-Definitionen zu schreiben, die abschließende Semikolons zu setzen und Parameter in geschweifte Klammern einzubetten. Auch wenn die Unterstützung für Scala in Eclipse noch einiges Potential hat, kann man a) damit bereits erstaunlich gut arbeiten (wenn man bedenkt, welche interessanten Sprachmöglichkeiten (und damit Schwierigkeiten für eine IDE) Scala bietet).

Meine schönste Zeile Code ist in diesem Beispiel das Erzeugen eines AbstractReadOnlyModel durch den Aufruf von <strong>"bean model { _.alter }"</strong>, der in diesem Fall das selbe leistet wie ein PropertyModel, nur dass das Attribut nicht erst per Reflection ermittelt wird.

Ich warte eigentlich darauf, dass jemand Wicket nach Scala portiert, denn das Lift-Framework gefällt mir nicht so gut (da wird wieder Code in die Templates verlagert). Jetzt geht es erst einmal weiter mit Java, auch wenn der Rückweg jetzt schon ein beschwerlicher war.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2009-06-19 08:20:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-19 07:20:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-scala]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="lines"><![CDATA[lines]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386696367]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"204.79592180358242";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"131.77415176703664";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"94.91967073039292";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:18:"63.911099757951234";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"37.96786829215716";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"28.092693014979716";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>618</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[victor.ott@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://extronis.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 13:00:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 12:00:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bzgl:  "das Lift-Framework [...] (da wird wieder Code in die Templates verlagert)": soweit ich bisher über Lift lesen/verstehen konnte, soll und wird gerade dies vermieden. 

Ich gebe zu daß ich bisher Scala nur leicht angeschnuppert habe und keine Zeile mit Lift geschrieben habe, aber ... im Dokument "Starting with Lift" wird in Kapitel 1.1 explizit auf Wicket als Vorbild verwiesen. Und am Ende des Kapitels 2.6:
http://liftweb.net/docs/getting_started/mod_master.html#x1-120002.6
"In Lift, display can creep into a snippet, but business logic cannot creep into a the static display template. Yes, your designers will still have to police putting display logic in the snippet code, but the coders will not have to police business logic in the templates. "]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>621</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.16.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 13:30:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 12:30:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Die Frage, was "Code im Template" bedeutet, ist vermutlich Ansichtssache. Aber wenn man es ganz streng nimmt, dann bedeutet das z.B. keine Schleifen, keine Expressions, keine bedingten Formatierungen, z.B. lift:Util.out verstößt IMHO gegen dieses Prinzip. Nun muss man das nicht so streng sehen wie ich, aber ich finde die Wicket-Variante noch aus einem zweiten Grund besser: bis auf wenige Ausnahmen steht für eine Komponente immer wicket:id="meineKomponente", mehr nicht. Bei Lift habe ich das Gefühl, dass ich über das reine Komponentenmapping noch mehr machen kann, aber auch mehr lernen muss.

Daher war ich etwas verwundert, als ich damals bei Lift gelesen habe, dass man sich auch Wicket als Vorbild genommen hat.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>618</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9752</wp:comment_id>
			<wp:comment_author><![CDATA[mbee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mb@thomas-daily.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.8.63.90]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-09 11:03:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-09 10:03:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mich würde die Definition von WicketHelper.model() interessieren. THX.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9753</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-09 11:26:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-09 10:26:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Soweit ich abschätzen kann, ist das folgende der relevante Code:

zuerst kommt folgende Klasse zum Einsatz (implizit):
<code>
class WicketReadonlyModel[B](bean: B) extends IClusterable
{
  def model[T](func: (B) => T ): AbstractReadOnlyModel[T] =
  {
    new AbstractReadOnlyModel[T]()
    {
      override def getObject: T = 
      {
        func(bean)
      }
    }
  }
}
</code>

Glue Code
<code>
import org.apache.wicket.model._;

object WicketHelper
{
  implicit def WicketReadonlyModelWrapper[T](bean: T) = new WicketReadonlyModel(bean)
}
</code>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>9752</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Scala kommt</title>
		<link>http://www.wicket-praxis.de/blog/2009/07/07/scala-kommt/</link>
		<pubDate>Tue, 07 Jul 2009 21:37:56 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe letztes Jahr in der <a href="http://www.jughh.org/" target="_blank">Java User Group Hamburg </a>Jan Kriesten kennen gelernt, als er einen Vortrag zu Wicket gehalten hat. Dabei erwähnte er, dass er seine Projekte mit Scala umsetzt. Wenn man sein Haus umbauen möchte, ist es keine Gute Idee, alle Wände gleichzeitig einzureißen, als konzentrierte ich mich auf Wicket.

Heute habe ich gedacht, ich könnte diesen Kontakt ja mal aufleben lassen. Ich bekam prompt Antwort. Die Überraschung folgt auf den Fuss: Jan hat ebenfalls ein Buch geschrieben (es wird vermutlich zur selben Zeit erscheinen). Das Buch hat er auch noch beim selben Verlag geschrieben. Und offensichtlich hatten wir die selbe Intention, denn sein Buch ist ebenfalls auf die praktische Anwendung von (in diesem Fall) Scala ausgerichtet.

Ich habe das Buch natürlich nicht gelesen, aber ich habe ein gutes Gefühl. Es gibt hier jetzt keine Kaufempfehlung, außer an mich selbst.

<a href="http://www.footprint.de/fcc/" target="_blank">Jan's Blog</a> und das Buch:<a href="http://www.amazon.de/gp/product/3446418636?ie=UTF8&tag=mosmannde-21&linkCode=as2&camp=1638&creative=19454&creativeASIN=3446418636">Praxisbuch Scala: Programmieren in Scala für Ein- und Umsteiger</a><img style="border:none !important; margin:0px !important;" src="http://www.assoc-amazon.de/e/ir?t=mosmannde-21&l=as2&o=3&a=3446418636" border="0" alt="" width="1" height="1" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2009-07-07 22:37:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-07 21:37:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scala-kommt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="praxis"><![CDATA[praxis]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386679268]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"155.97863961494943";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"96.27512564753826";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"94.91967073039292";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"93.75515304977608";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"56.95180243823576";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"36.23952643214521";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grails Ajax Update zu kompliziert...</title>
		<link>http://www.wicket-praxis.de/blog/2009/07/21/grails-ajax-update-zu-kompliziert/</link>
		<pubDate>Tue, 21 Jul 2009 09:03:46 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[Man lernt ja jeden Tag etwas neues. Gestern habe ich gelernt, dass Grails von Haus aus nur ein Element per Ajax austauschen kann. Man klickt auf einen Link und kann dann z.B. den Inhalt eines DIV-Tags ersetzten, ergänzen oder was auch immer. Das ist alles ganz nett und einfach. Ändert sich aber durch eine Interaktion mehr als ein Element auf der Seite, fängt es an kompliziert zu werden. Wobei kompliziert eigentlich nicht das richtige Wort ist, denn man muss diese <a href="http://weichhold.com/2009/07/20/updating-multiple-page-fragments-with-grails-and-ajax/" target="_blank">fehlende Funktionalität selbst ergänzen</a>.

Es ist unzweifelhaft möglich, so das gewünschte Ziel zu erreichen. Aber ich finde es spannend, dass es eine IMHO derart triviale Anforderung nicht in den "Grails-Standard" geschafft hat. In Wicket füge ich die Komponenten, die aktualisiert werden müssen, einfach zu einer Liste hinzu. Ich muss mich nicht darum kümmern, was dann genau passiert.

Festzuhalten bleiben für mich die Punkte, die für mich eher gegen einen Einsatz von Grails sprechen:
<ul>
	<li>Ajax Update nur für ein Element möglich.</li>
	<li>Spring Security ist pfadbasiert - das ist IMHO ein extrem limitierter Ansatz.</li>
	<li>Taglibs sind kein Ersatz für Komponenten.</li>
</ul>
Grails hat Stärken.. aber ich bezweifle zunehmend, dass in Projekten, die mit Grails angefangen wurden, Grails diese positiven Effekte aus dem Projektstart auch auf lange Sicht ausspielen kann.

<strong>Update:</strong>

Immerhin habe ich gerade wieder gelernt, dass man Spring Security auch mit Annotationen am Controller benutzen kann, so dass man die Pfade nicht von Hand aktualisieren muss, wenn man etwas umbaut.

Das ich hier vielleicht Wicket und Grails vergleiche, obwohl die beiden Technologien nicht so einfach vergleichbar sind, bezieht sich in dieser Kritik nur auf den View-Layer. Es gibt sehr viele Dinge, die ich recht cool finde, an Grails. Aber um View-Layer bin ich einfach besseres gewohnt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2009-07-21 10:03:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-21 09:03:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[grails-ajax-update-zu-kompliziert]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[grails]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="post_tag" nicename="update"><![CDATA[update]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386735908]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"184.1466004488966";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"73.34208088520433";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"137";s:5:"score";s:17:"19.35036655461984";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"15.627342924422535";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:18:"14.495810572858087";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>561</wp:comment_id>
			<wp:comment_author><![CDATA[Falk Berger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[falk.berger@hypoport.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-21 13:07:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-21 12:07:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also als Grails-Freund kann ich mir folgenden Kommentar nicht verkneifen ;)
Warum wird eigentlich ein Web-Framework (Wicket) mit einem komplexen Framework zur Entwicklung von Web-Anwendungen (Grails) verglichen? Das wäre ziemlich unfair Wicket gegenüber, weil bei Grails schon so viel verwendbar vorliegt ... Stichworte Groovy, Hibernate, Spring, SiteMesh im Grails-Unterbau, sowie Scaffolding, Internationalisierung usw. usf.
In einem Punkt stimme ich gerne zu ... Grails hat standardmässig noch Nachholbedarf im reinen UI-Development und man kommt nicht umhin, Plugins bzw. Javascript-Librarys zu includen.
Im Zweifelsfall kann das dann auch gerne das Wicket-Plugin zur Gestaltung der Oberfläche sein, dessen Runderneuerung für Grails 1.2 erwartet wird.

Zum Thema Spring Security ... mit "pfadbasiert" meinst du die URL-basierte Absicherung per Request-Map?
Das ist ja nur eine Möglichkeit. Viel besser ist die Verwendung von Controller Annotations. So ist es möglich, jede einzelne Controller-Action gegen beliebige Rollen abzusichern und das erfolgt dann wenigstens auf dem Class-Level.

Viele Grüße
Falk]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>562</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-21 13:11:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-21 12:11:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sag mal: was macht dieses SiteMesh denn eigentlich?

Ansonsten hast Du in vielen Punkten recht:) Habe den Beitrag auch schon aktualisiert.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>561</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>563</wp:comment_id>
			<wp:comment_author><![CDATA[Falk Berger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[falk.berger@hypoport.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-21 13:35:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-21 12:35:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So wie ich das verstanden habe, ist SiteMesh eine Layout-Rendering-Engine, worauf Grails im View-Bereich basiert. Darüber wird z.B. Merging von Templates/Taglibs und die Wiederverwendung/Kombination dieser Komponenten gelöst.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>619</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[victor.ott@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://extronis.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 13:15:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 12:15:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Die bessere Beschreibung wäre: Sitemesh is "a web-page layout and decoration framework and web- application integration framework" (von <a href="http://www.opensymphony.com/sitemesh/" rel="nofollow">hier</a>). Schwerpunkt liegt auf "decoration" und "integration".]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11887</wp:comment_id>
			<wp:comment_author><![CDATA[David Neuheuser]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[salem@cybernox.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.251.133.84]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-06-06 08:24:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-06-06 07:24:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Im View-Layer ist man als Enterprise Developer allgemein einfach besseres gewohnt :D
Dank HTML 5 und den hunderten von JS Frameworks und  Web-Frameworks die alle bei 0 angfangen haben wir noch einen langen weg zu komplett durch debug / testbaren frontend im web :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Sails - die Scala Version von Rails/Grails</title>
		<link>http://www.wicket-praxis.de/blog/2009/07/21/sails-die-scala-version-von-rails-grail/</link>
		<pubDate>Tue, 21 Jul 2009 12:19:40 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe mir das Scala Webframework Lift angesehen und finde, es ist zu kompliziert. Aber ich habe mir heute morgen auch wieder ein paar Möglichkeiten angesehen, die Scala so bietet und frage mich, ob man nicht (mit etwas Hilfe) ein Stack erstellen könnte, der Scala als Basissprache benutzt und sonst sich aber eher von Rails/Grails inspirieren lassen könnte. Für das UI käme natürlich Wicket in Frage.

Ich glaube, das wäre reizvoll, spannend und wichtig: sehr produktiv.

p.s.: wenn es sowas schon gibt, bitte gerne einen Hinweis.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2009-07-21 13:19:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-21 12:19:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sails-die-scala-version-von-rails-grail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="grails"><![CDATA[grails]]></category>
		<category domain="post_tag" nicename="sails"><![CDATA[sails]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386692486]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"288.5731934255124";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"110.54701365481547";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"73.34208088520433";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"56.95180243823576";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:16:"38.5100502590153";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.406230296244477";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>564</wp:comment_id>
			<wp:comment_author><![CDATA[Georg wächter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[georgwaechter@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.georgwaechter.de/blog</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[87.123.117.138]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-21 23:06:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-21 22:06:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi michael,

genau die gleichen gedanken hatte ich auch schon :-)- Lift ist bestimmt nicht schlecht, hat mir aber fürs erste auf jeden Fall eine steile Lernkurve. Für meinen Geschmack wird in Lift zu stark auf manche Scala-Features eingegangen, in dem praktisch mit "benutzerdefinierten" Operatoren übertrieben wird. 

Ich würde mir persönlich auch eine Art Wicket wünschen, welches Scalas Stärken voll ausnutzt ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1741</wp:comment_id>
			<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[christian.helmbold@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://scala-forum.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.240.245.229]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-17 08:19:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-17 07:19:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich schließe mich an - ein Grails-artiges Framework in Scala wäre toll. Für Wicket gibt es übrigens schon eine Scala-Hülle. Aber mir schwebt als Grails-Ersatz eher ein klassisches zustandsloses (RESTful) Framework als Basis vor. Man bräuchte sowas wie Spring MVC, bloß ohne die Bindung an Spring, mit weniger Annotationen und eben in Scala. Auf diesem Framework und Java-EE-Technologien wie JPA und BeanValidation könnte man ein schönes Framework bauen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket saved the day</title>
		<link>http://www.wicket-praxis.de/blog/2009/07/21/wicket-saved-the-day/</link>
		<pubDate>Tue, 21 Jul 2009 21:20:33 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[Wer schon Webanwendungen entwickelt hat, der wird der sehr gut geschriebenen Ausführung von <a href="http://jeff-schwartz.blogspot.com/2009/07/wicket-state-icing-on-cake.html" target="_blank">Jeff Schwartz</a> folgen können. Rückblickend ist es eigentlich erschreckend, wie naheliegend die Lösung die ganze Zeit war. Denn Wicket ist kein Hexenwerk, sondern einfach nur gut durchdachter Java-Code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2009-07-21 22:20:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-21 21:20:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-saved-the-day]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="stateless"><![CDATA[stateless]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386698840]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:16:"81.1811273670775";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"49.521949370533704";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:18:"32.472450946830996";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"5.801058064785298";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:17:"5.663255229911975";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"186";s:5:"score";s:18:"4.0006601917459435";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>577</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[losdrakanos@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.80.238.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 15:30:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 14:30:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das ist für unsere public Websites leider keine Lösung.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>578</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 15:53:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 14:53:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Was auch noch gut funktioniert ist die HybridUrlCodingStrategy. Damit gibt es überhaupt kein PageExpired-Problem mehr. Wenn Wicket die Version der Seite nicht finden kann, dann erzeugt Wicket eine neue Instanz.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>577</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>575</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roman.uhlig@knve.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.80.238.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 15:04:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 14:04:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Der Artikel liest sich gut, aber wenn man etwas mit Wicket gearbeitet hat, stellt man schnell fest, das die Probleme jetzt umgekehrt liegen. Man hat jede Menge Arbeit damit, die Website an den Stellen stateless zu halten, an denen es notwendig ist. Und trotzdem wird man regelmäßig die PageExpiredException bekommen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 15:20:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 14:20:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich habe das PageExpired-Problem damit eingedämmt, in dem ich das Session-Timeout sehr hoch gesetzt habe und dann für die Session mit setMaxInactiveInterval() einen relativ kurzen Intervall definiert habe. Wenn ein Nutzer dann seinen Rechner rumstehen lässt und klickt dann auf einen Ajax...Link, dann hilft das auch nicht viel weiter. Aber für den normalen Anwendungsfall reicht das aus.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>575</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>588</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roman.uhlig@knve.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.80.238.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 10:36:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 09:36:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, Problem mit Michaels Hilfe gelöst. Vielen Dank!
Es bleibt aber kommentarlos zu vermerken, das Wicket für klassische "stateless" Websites nicht uneingeschränkt verwendbar ist und es u.U. größere Handarbeit erfordert.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>589</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 11:06:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 10:06:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ich glaube, Wicket kann auch bei Webseiten, die "stateless" betrieben werden, punkten. Dazu muss man allerdings sein eigenes Stück Infrastruktur einbringen, was dank der offenen Architektur aber problemlos geht. Ich werde in den nächsten Tagen dieses Thema eingehender untersuchen und ein paar Ideen veröffentlichen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>588</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket &quot;stateless&quot; - keine einfache Herausforderung</title>
		<link>http://www.wicket-praxis.de/blog/2009/07/30/wicket-stateless-keine-einfache-herausforderung/</link>
		<pubDate>Thu, 30 Jul 2009 10:18:57 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[Wie in den Kommentaren der letzten Tage sichtbar wurde, eignet sich Wicket nicht "ungeschminkt" für Webseiten, die ihre Zustandsinformationen klassisch in URL-Parametern ablegen. In meinem Buch beschreibe ich eine einfache Variante, die bereits zum Ziel führen kann.

Die Herausforderung liegt darin, dass man von den Vorteilen, die Wicket mitbringt nicht all zu viele einbüßt. Daher werde ich mich in den nächsten Tagen mal damit beschäftigen, wie man mit möglichst wenig Aufwand Anwendungen realisieren kann, die auf der einen Seite URL-Parameter benutzen, auf der anderen Seite aber nicht auf saubere Komponenten verzichten müssen.

Auch wenn es schwer ist, sich von der Herangehensweise wie man sie mit JSP,PHP,... gewöhnt ist, zu lösen, erschließt man das volle Potential von Wicket erst dann, wenn man sich auf den "Wicket-Pfad" begibt. Der einzige Aspekt, der es notwendig macht, sich mit der Frage von URL-Parametern zu beschäftigen, ist die Suchmaschinentauglichkeit der Anwendung. Da muss man allerdings auch überlegen, ob man nicht einen Sitemap generiert, die alle gewünschten Inhalte ansteuerbar macht, so dass man nicht gezwungen ist, eine SEO-taugliche Navigation aufzusetzen.

Wicket ist ganz sicher nicht für jede Anforderung geeignet. Unbestritten. Die Alternativen sind IMHO allerdings auch nicht zufriedenstellender.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2009-07-30 11:18:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-30 10:18:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-stateless-keine-einfache-herausforderung]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="stateless"><![CDATA[stateless]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386692883]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:17:"148.5658481116011";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:17:"46.43584178898567";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"26.025769336991793";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"23.299215240301358";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"16.786203179872345";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"13.071829153130265";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[Manfred Zerndl]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[manfred.zerndl@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.200.70.37]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 15:57:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 14:57:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Es gibt unterschiedliche Strategien, wie man Bookmarkfähige Pages erstellen kann. 
Wenn man URL-Parameter nutzen will kann man dazu folgenes in der init-Methode der Application festlegen:

mount(new QueryStringUrlCodingStrategy("binfo", MyPage.class));

Dann kann man die URL fiolgendermassen aufrufen:
http://meinserver.de/meineApp/binfo?key1=value1&amp;key2=value2]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>592</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roman.uhlig@knve.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.206.91.138]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 19:48:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 18:48:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In Sachen SEO mit Java gibt es meiner Meinung nach nichts besseres als OpenCms: enorme, frei erweiterbare API, die volle Kontrolle über alle CMS Features gewährt; konfigurierbare automatische Indizierung aller nicht-binären Inhalte, automatische Sitemaps und tausend andere Sachen.

Dennoch: man muss sich hier wieder mit XML (eben doch langsam) und JSP "abgeben". Für Seiten mit viel statischem Inhalt ist das super, aber für verzeichnis- und suchmaschinenorientierte Portale wollen wir das vermeiden. 

Daher erstmal weiter Wicket - es ist auf alle Fälle "sauberer" und macht mehr Spaß. Würde mich wundern, wenn sich da in Sachen stateless nicht auch in zukünftigen Versionen noch was tut. Oder zumindest in der Community.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>593</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.21.86]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 20:02:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 19:02:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das ist das geringste Problem. Hat man aber eine ganze Reihe von Komponenten, in denen auch BookmarkableLinks erzeugt werden sollen, gestaltet sich das ganze schon etwas schwieriger.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>591</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>594</wp:comment_id>
			<wp:comment_author><![CDATA[Roman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roman.uhlig@knve.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.romanuhlig.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.206.91.138]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-30 20:55:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-30 19:55:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eine imho sehr gute Übersicht, wie optimale Suchmaschinen-URLs aussehen sollten:
http://tinyurl.com/lqssth
Für verzeichnisorientierte Portale ist das im Prinzip ein Muss. Wir arbeiten zur Zeit an einem Portal, was genau das mit Wicket umsetzt. Einfach ist es nicht, obwohl UrlCodingStrategies natürlich eine große Hilfe, wenn auch nur die Spitze des Eisberges, sind.
Nochmals ein großes Dankeschön an Michael, der uns bisher mit seinen Erfahrungen in Wicket tatkräftig zur Seite stand. Kauft sein Buch! ;)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>622</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[victor.ott@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-09 14:20:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-09 13:20:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Einige Infos über stateless-Seiten sind auch <a href="http://cwiki.apache.org/confluence/display/WICKET/Pages" rel="nofollow">hier</a> und <a href="http://cwiki.apache.org/WICKET/stateless-pages.html" rel="nofollow">hier</a> zu finden. Dort trifft man auch die StatelessForm- bzw StatelessLink-Komponenten. Hmmm, die kannte ich auch nicht.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476346</wp:comment_id>
			<wp:comment_author><![CDATA[Disney]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[9cbmufsf65h@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://denhdc.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 04:56:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 03:56:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like to party, not look aritlces up online. You made it happen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486698982.1985171;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Web 1.0 mit Wicket - Seitenparameter und Links</title>
		<link>http://www.wicket-praxis.de/blog/2009/08/04/web-1-0-mit-wicket-seitenparameter-und-links/</link>
		<pubDate>Tue, 04 Aug 2009 19:05:54 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[Mit Wicket ist es sehr einfach, Webanwendungen zu schreiben. Wenn man dem Wicket-Pfad folgt und keine besonderen Wünsche hat. Im folgenden besteht der Wunsch darin, den Zustand einer Seite in Seitenparametern abzulegen. Wenn durch einen Link, also eine Aktion, die der Nutzer wählen kann, nur ein Parameter verändert wird, sollen natürlich alle anderen Parameter unverändert weitergereicht werden.

Zuerst erstellen wir uns ein paar Hilfsklassen, welche die Handhabung wesentlich vereinfachen werden. Die Idee ist dabei folgende: die Parameter, die mit dem Request übergeben werden, werden auf Attribute einer JavaBean gemappt und mit Wicket-Bordmitteln in den entsprechenden Datentyp konvertiert. Aus der JavaBean kann man dann die gewünschten Werte auslesen. Die Attribute der JavaBean können dann neu gesetzt werden. Ein weiteres Mal wird mit Wicket-Bordmitteln aus den Attributen der JavaBean eine Liste von Parametern gewonnen, die dann (fast) direkt in einem Link benutzt werden können.

Zuerst erstellen wir uns eine Annotation, mit der wir die Attribute markieren, die von und in PageParameter umgewandelt werden sollen.
<pre lang="java">import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface PublicProperty
{	
}</pre>

Als nächstes erstellen wir uns ein Interface, was von der JavaBean implementiert werden muss. Die Aufgabe des Interface liegt darin, sicherzustellen, dass von der JavaBean eine Kopie angefertigt werden kann, damit die Änderungen an der Kopie und nicht am Original vorgenommen werden.

<pre lang="java">import org.apache.wicket.IClusterable;

public interface PageStateBeanInterface<T extends PageStateBeanInterface<?>> extends IClusterable
{
	public T getClone();
}
</pre>

Jetzt kommt der aufwendigste Teil. Wir schreiben uns eine Hilfsklasse, welche die Transformation von und in PageParameter durchführt.

<pre lang="java">import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.wicket.Application;
import org.apache.wicket.IConverterLocator;
import org.apache.wicket.PageParameters;
import org.apache.wicket.Session;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.util.convert.IConverter;

public class BeanPagePropertyUtil
{
	public static <B> PageParameters getBeanPageParameters(B bean)
	{
		return new PageParameters(getParameter(bean));
	}
	
	public static <B> PageParameters getBeanPageParameters(B bean,B defaults)
	{
		Map<String, Object> beanParameter = getParameter(bean);
		Map<String, Object> defaultParameter = getParameter(defaults);
		for (String s : defaultParameter.keySet())
		{
			Object defaultValue = defaultParameter.get(s);
			if (defaultValue!=null)
			{
				Object curValue = beanParameter.get(s);
				if (defaultValue.equals(curValue))
				{
					beanParameter.remove(s);
				}
			}
		}
		return new PageParameters(beanParameter);
	}
	
	protected static <B> List<String> getPublicProperties(B bean)
	{
		List<String> ret=new ArrayList<String>();
		
		Method[] methods = bean.getClass().getMethods();
		for (Method m : methods)
		{
			PublicProperty annotation = m.getAnnotation(PublicProperty.class);
			if (annotation!=null)
			{
				String name = m.getName();
				if (name.startsWith("get")) ret.add(name.substring(3));
				else
				{
					if (name.startsWith("is")) ret.add(name.substring(2));
				}
			}
		}
		
		return ret;
	}
	
	public static <B> Map<String,Object> getParameter(B bean)
	{
		Map<String,Object> ret=new HashMap<String, Object>();
		
		Locale locale = Session.get().getLocale();
		IConverterLocator converterLocator = Application.get().getConverterLocator();
		
		for (String s : getPublicProperties(bean))
		{
			PropertyModel<?> propertyModel = new PropertyModel(bean,s);
			IConverter converter = converterLocator.getConverter(propertyModel.getObjectClass());
			Object value = propertyModel.getObject();
			if (value!=null)
			{
				ret.put(s, converter.convertToString(value, locale));
			}
		}
		return ret;
	}

	public static <B> void setParameter(B bean,PageParameters pageParameters)
	{
		Locale locale = Session.get().getLocale();
		IConverterLocator converterLocator = Application.get().getConverterLocator();
		
		for (String s : getPublicProperties(bean))
		{
			PropertyModel<Object> propertyModel = new PropertyModel<Object>(bean,s);
			IConverter converter = converterLocator.getConverter(propertyModel.getObjectClass());
			String svalue = pageParameters.getString(s);
			if (svalue!=null)
			{
				propertyModel.setObject(converter.convertToObject(svalue, locale));
			}
			else
			{
				propertyModel.setObject(null);
			}
		}
	}

	public static <B> void setParameter(B bean,Map<String,?> parameter)
	{
		for (String s : getPublicProperties(bean))
		{
			if (parameter.containsKey(s))
			{
				PropertyModel<Object> propertyModel = new PropertyModel<Object>(bean,s);
				Object value=parameter.get(s);
				propertyModel.setObject(value);
			}
		}
	}
}
</pre>

Es ist wichtig, darauf hinzuweisen, dass es vorgesehen ist,  eine mit Standardwerten initialisierte JavaBean als Abgleich zu benutzen. So kann sichergestellt werden, dass Seitenparameter dann aus der Url entfernt werden, wenn der Wert dem Standardwert entspricht. Das reduziert die Gefahr für Double-Content-Probleme wesentlich.

Jetzt haben wir alles zusammen, um  Seitenparameter in JavaBean-Attribute zu überführen und zurück wandeln zu können. Als nächstes benötigen wir noch ein paar Komponenten, die den Prozess der Parameterlistenerstellung und der Konvertierung für uns übernehmen. Dazu fügen wir der Seite eine Komponente hinzu, die folgendes Interface implementiert:

<pre lang="java">public interface PageStateInterface<B extends PageStateBeanInterface<B>>
{
	public B getState();
	public B getDefaults();
}
</pre>

Die Komponente konvertiert die Seitenparameter in die Attribute und stellt über die Schnittstelle die beiden Zustände zur Verfügung. Damit andere Komponenten auf diese Werte zugreifen können, erstellen wir gleichzeitig eine Funktion, welche die Komponente im Komponentenbaum sucht.

<pre lang="java">import org.apache.wicket.Component;
import org.apache.wicket.Page;
import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.panel.Panel;

public class PageContext<B extends PageStateBeanInterface<B>> extends Panel implements PageStateInterface<B>
{
	private static final Logger _logger=LoggerFactory.getLogger(PageContext.class);

	B _defaults;

	B _state;

	public PageContext(String id, PageParameters pageParameters, B defaults)
	{
		super(id);

		_defaults=defaults;
		_state=_defaults.getClone();
		BeanPagePropertyUtil.setParameter(_state, pageParameters);
	}

	public B getDefaults()
	{
		return _defaults;
	}

	public B getState()
	{
		return _state.getClone();
	}

	public static <B extends PageStateBeanInterface<B>> PageStateInterface<B> getPageState(Page page, Class<? extends B> type)
	{
		NodeVisitor visitor=new NodeVisitor(type);
		page.visitChildren(PageContext.class, visitor);
		return visitor.getPageState();
	}

	static class NodeVisitor<B extends PageStateBeanInterface<B>> implements IVisitor<Component>
	{
		Class<B> _type;

		PageStateInterface<B> _pageState;

		public NodeVisitor(Class<B> type)
		{
			_type=type;
		}

		public PageStateInterface<B> getPageState()
		{
			return _pageState;
		}

		public Object component(Component component)
		{
			if (component instanceof PageContext)
			{
				PageContext rawContext=(PageContext) component;
				if (_type.isAssignableFrom(rawContext.getDefaults().getClass()))
				{
					_pageState=rawContext;
					return IVisitor.STOP_TRAVERSAL;
				}
			}
			return IVisitor.CONTINUE_TRAVERSAL;
		}
	}
}
</pre>

Des weiteren erstellen wir eine Linkklasse, die sich um das setzen der richtigen Seitenparameter kümmert.

<pre lang="java">import java.util.Map;

import org.apache.wicket.Page;
import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.link.BookmarkablePageLink;
import org.apache.wicket.util.collections.MiniMap;

public class PageStateLink<P extends Page, B extends PageStateBeanInterface<B>> extends BookmarkablePageLink<P>
{
	Map<String, ?> _linkParameter;

	Class<B> _beanType;

	public PageStateLink(String id, Class<P> pageClass, Class<B> beanType, Map<String, ?> linkParameter)
	{
		super(id, pageClass);
		_beanType=beanType;
		_linkParameter=linkParameter;
		if (_linkParameter == null) _linkParameter=new HashMap<String,?>();
	}

	public PageStateLink(String id, Class<P> pageClass, Class<B> beanType)
	{
		this(id, pageClass, beanType, null);
	}

	@Override
	protected void onBeforeRender()
	{
		PageStateInterface<B> pageState=PageContext.getPageState(getPage(), _beanType);
		if (pageState != null)
		{
			B bean=pageState.getState();
			B defaults=pageState.getDefaults();
			BeanPagePropertyUtil.setParameter(bean, _linkParameter);
			onAfterSetParameter(bean);
			PageParameters beanPageParameters=BeanPagePropertyUtil.getBeanPageParameters(bean, defaults);
			applyPageParameter(beanPageParameters);
		}
		super.onBeforeRender();
	}

	protected void onAfterSetParameter(B bean)
	{

	}

	private void applyPageParameter(PageParameters pageParameters)
	{
		this.parameters=pageParametersToMiniMap(pageParameters);
	}

	private MiniMap<String, Object> pageParametersToMiniMap(PageParameters parameters)
	{
		if (parameters != null)
		{
			MiniMap<String, Object> map=new MiniMap<String, Object>(parameters, parameters.keySet().size());
			return map;
		}
		else
		{
			return null;
		}

	}
}
</pre>

Die Methode <em>applyPageParameter</em> wurde nur aus Geschwindigkeitsgründen erstellt, da sonst jeder Aufruf von <em>setParameter</em> dazu führt, dass die interne Map kopiert wird.

Um auf die JavaBean über ein Modell zuzugreifen, schreiben wir uns noch eine Modellklasse, bevor wir uns dann ansehen, wie man die Klassen dann benutzt.

<pre lang="java">import org.apache.wicket.Component;
import org.apache.wicket.model.LoadableDetachableModel;

public class PageStateModel<B extends PageStateBeanInterface<B>> extends LoadableDetachableModel<B>
{
	Component _component;
	Class<? extends B> _type;
	
	public PageStateModel(Component component, Class<? extends B> type)
  {
		_component=component;
		_type=type;
  }
	
	@Override
	protected B load()
	{
	  PageStateInterface<B> pageState=PageContext.getPageState(_component.getPage(), _type);
	  if (pageState!=null)
	  {
	  	return pageState.getState();
	  }
		return null;
	}
}
</pre>

Ok. Das war ganz schön aufwendig, aber dafür ist die Verwendung um so einfacher. Wir erstellen eine JavaBean und eine Seite, auf der wir dann die Komponenten einbinden.

<pre lang="java">public class ConfigBean implements PageStateBeanInterface<ConfigBean>
{
	Integer _start;
	Integer _stop;
	String _name;

	@PublicProperty
	public Integer getStart()
	{
		return _start;
	}

	public void setStart(Integer start)
	{
		_start=start;
	}

	@PublicProperty
	public Integer getStop()
	{
		return _stop;
	}

	public void setStop(Integer stop)
	{
		_stop=stop;
	}

	@PublicProperty
	public String getName()
	{
		return _name;
	}

	public void setName(String name)
	{
		_name=name;
	}

	public ConfigBean getClone()
	{
		ConfigBean ret=new ConfigBean();
		ret._name=_name;
		ret._start=_start;
		ret._stop=_stop;
		return ret;
	}
}</pre>

<pre lang="java">import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.PropertyModel;

public class TestPage extends WebPage
{
	IModel<ConfigBean> _config=new PageStateModel<ConfigBean>(this, ConfigBean.class);

	public StatelessTestPage(PageParameters pageParameters)
	{
		add(new PageContext<ConfigBean>("context", pageParameters, new ConfigBean()));

		add(new Label("start", new PropertyModel<Integer>(_config, "start")));
		add(new Label("stop", new PropertyModel<Integer>(_config, "stop")));
		add(new SubPanel("sub"));
	}

	public static class SubPanel extends Panel
	{
		IModel<ConfigBean> _config=new PageStateModel<ConfigBean>(this, ConfigBean.class);

		public SubPanel(String id)
		{
			super(id);

			add(new Label("name", new PropertyModel<Integer>(_config, "name")));

			PageStateLink<StatelessTestPage, ConfigBean> link=new PageStateLink<StatelessTestPage, ConfigBean>("link", StatelessTestPage.class, ConfigBean.class, new HashMap<String,Object>("Name","Klaus"));
			add(link);
			PageStateLink<StatelessTestPage, ConfigBean> link2=new PageStateLink<StatelessTestPage, ConfigBean>("link2", StatelessTestPage.class, ConfigBean.class, new HashMap<String,Object>("Start", 1));
			add(link2);
			PageStateLink<StatelessTestPage, ConfigBean> link3=new PageStateLink<StatelessTestPage, ConfigBean>("link3", StatelessTestPage.class, ConfigBean.class, new HashMap<String,Object>("Start", null));
			add(link3);
			PageStateLink<StatelessTestPage, ConfigBean> link4=new PageStateLink<StatelessTestPage, ConfigBean>("link4", StatelessTestPage.class, ConfigBean.class, new HashMap<String,Object>("Name", "Bert", "Stop", null));
			add(link4);
		}
	}
}
</pre>

Wie man sieht, muss ich bei den Modellen eigentlich nichts besonderes machen. Die Links übergibt man eine Map mit neuen Parametern, mit denen der aktuelle Zustand, der in der JavaBean gespeichert wurde, für diesen Link, diese Nutzeraktion überschrieben wird. Dabei spielt es keine Rolle, in welcher Komponente so ein Link benutzt wird, da sich die Linkklasse und die Modellklasse selbsttätig um die Informationen bemühen.

Der hier vorgeschlagene Ansatz ist sicher a) verbesserungswürdig und b) ausbaufähig. Er soll als Anregung dienen, wie man dieses und möglicherweise ähnliche Probleme lösen kann und dabei besonders von der Komponentenarchitektur von Wicket profitieren kann.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2009-08-04 20:05:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-08-04 19:05:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-1-0-mit-wicket-seitenparameter-und-links]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="links"><![CDATA[Links]]></category>
		<category domain="post_tag" nicename="page"><![CDATA[page]]></category>
		<category domain="post_tag" nicename="seo"><![CDATA[seo]]></category>
		<category domain="post_tag" nicename="stateless"><![CDATA[stateless]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386685723]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"146.12602926073947";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"74.55621281662204";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:17:"69.65376268347852";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"46.68389980783398";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"30.57283522295203";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"382";s:5:"score";s:17:"27.95644917253401";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Praxis - das Buch ist da</title>
		<link>http://www.wicket-praxis.de/blog/2009/08/21/wicket-praxis-das-buch-ist-da/</link>
		<pubDate>Fri, 21 Aug 2009 09:49:35 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe heute mein Vorabexemplar von <a href="http://www.amazon.de/Praxisbuch-Wicket-Michael-Mosmann/dp/3446419098/ref=sr_1_6?ie=UTF8&s=books&qid=1243428212&sr=1-6">"Praxisbuch Wicket"</a> erhalten. Toll. Es ist schon ein schönes Gefühl, das erste eigene Buch in den Händen zu halten. Das bedeutet auch, dass es jetzt mit Sicherheit pünktlich erscheinen wird (1.09.).

Danke an alle, die direkt und indirekt daran beteiligt waren.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2009-08-21 10:49:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-08-21 09:49:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-praxis-das-buch-ist-da]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386690359]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"30.423153016497906";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"16.57410821107616";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:17:"7.459138416633751";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"267";s:5:"score";s:16:"4.14352705276904";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"194";s:5:"score";s:16:"4.14352705276904";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"154";s:5:"score";s:16:"4.14352705276904";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>651</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Trackbacks for Wicket Praxis – das Buch ist da | wicket praxis [wicket-praxis.de] on Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/7Mtaq</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-21 15:41:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-21 14:41:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Wicket Praxis – das Buch ist da | wicket praxis  www.wicket-praxis.de/blog/2009/08/21/wicket-praxis-das-buch-ist-da &ndash; view page &ndash; cached  Ich habe heute mein Vorabexemplar von Praxisbuch Wicket erhalten. Toll. Es ist schon ein schönes Gefühl, das erste eigene Buch in den Händen zu halten. Das &mdash; From the page [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>667</wp:comment_id>
			<wp:comment_author><![CDATA[O.Fritsch]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[osf@3blogos.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.153.191.159]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-07 14:19:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-07 13:19:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo!

Habe heute das Buch erhalten. Bisher macht es einen guten Eindruck! :-)

Eins ist mir jedoch gleich unangenehm aufgefallen. Das Projektsetup lässt sich mittels Maven nicht herstellen da es scheinbar mittlerweile eine neuer Version von javax/transaction/jta/ gibt. Maven möchte Version 1.0.1B.jar vom Server beziehen die es nicht mehr gibt (jetzt 1.1.jar). Habe leider noch nicht herausgefunden wie ich den Fehler umschiffen kann.

mfg
O.Fritsch]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>668</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.21.187]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-07 22:38:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-07 21:38:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok. Da hat sich mal wieder was bei hibernate geändert. Das Sorgenkind. Ich werde die nächsten Tage ein Update der Quelltexte veröffentlichen. Vorerst sollten folgende pom.xml das Problem lösen:

<code lang="xml">
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/*****************************************
Quelltexte zum Buch: Praxisbuch Wicket
(http://www.hanser.de/978-3-446-41909-4)

Autor: Michael Mosmann
(michael@mosmann.de)
*****************************************/
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>de.wicketpraxis</groupId>
  	<artifactId>de.wicketpraxis--parentPom</artifactId>
  	<version>1.0-SNAPSHOT</version>
<!--
		<relativePath>../de.wicketpraxis- -parentPom</relativePath>
-->
	</parent>

  <artifactId>${pom.groupId}--persistence</artifactId>
  <name>${pom.groupId}--${pom.artifactId} (Wicket Praxis - Persistence)</name>

  <dependencies>
    <dependency>
      <groupId>${pom.groupId}</groupId>
      <artifactId>${pom.groupId}--dbconfig</artifactId>
	  	<version>${pom.version}</version>
    </dependency>
    <dependency>
      <groupId>${pom.groupId}</groupId>
      <artifactId>${pom.groupId}--dbconfig-test</artifactId>
	  	<version>${pom.version}</version>
			<scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${pom.groupId}</groupId>
      <artifactId>${pom.groupId}--dbconfig-schema-update</artifactId>
	  	<version>${pom.version}</version>
			<scope>test</scope>
    </dependency>

		<!-- Base -->
    <dependency>
      <groupId>${pom.groupId}</groupId>
      <artifactId>${pom.groupId}--base</artifactId>
	  	<version>${pom.version}</version>
    </dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring</artifactId>
			<version>${springframework.version}</version>
		</dependency>
<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${springframework.version}</version>
		</dependency> 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${springframework.version}</version>
		</dependency>
-->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${springframework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Hibernate -->
		<!-- 
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>${hibernate-annotations.version}</version>
		</dependency>
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>${javassist.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-cglib-repack</artifactId>
			<version>${cglib.version}</version>
		</dependency> 
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${cglib.version}</version>
		</dependency> 
		<dependency>
			<groupId>org.jasypt</groupId>
			<artifactId>jasypt</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>4.0.1</version>
		</dependency>

  </dependencies>

	<properties>
		<springframework.version>2.5.6</springframework.version>
		<!-- 
		<hibernate.version>3.3.0.CR1</hibernate.version>
		 -->
		<javassist.version>3.4.GA</javassist.version>
		<hibernate-annotations.version>3.4.0.GA</hibernate-annotations.version>
		<cglib.version>2.1_3</cglib.version>
	</properties>

</project>

</code>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>667</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Scala vs Java</title>
		<link>http://www.wicket-praxis.de/blog/2009/08/26/scala-vs-java/</link>
		<pubDate>Wed, 26 Aug 2009 07:52:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe mir gestern ein Scala-Codebeispiel angesehen, dass Scala-Objekte von und nach JSON konvertieren kann. Ich muss zugeben, dass es ein wenig gedauert hat, bis ich den Code verstanden habe. Das liegt unter anderem daran, dass ich in Scala einfach noch nicht gut genug bin. Der andere wichtigere Punkt ist aber folgender:

<blockquote>Wenn man bisher mit einer Reihe von Java-Klassen ein Framework für eine bestimmte Aufgabe entwickelt hat, kann man die selbe Anforderung mit einigen wenigen Scala-Klassen abbilden.</blockquote>

Das bedeutet, dass sich die Funktionalität mit sehr viel weniger Code darstellen lässt. Das spiegelt die Befürchtung wieder, dass man mit Scala Code schreiben kann, der schwer zu vestehen ist. Doch dieser erste Anschein trügt. Der Code ist nur um vielfaches dichter und deshalb natürlich schwerer zu verstehen als ähnlich umfangreicher Java-Code. Der funktionsäquivalente Java-Code wäre aber entsprechend umfangreicher und kann im Zweifel schon deshalb nicht ansatzweise so gut überblickt werden. Ich kann es daher nicht nachvollziehen, dass dieser Punkt gegen Scala sprechen soll.

Ich glaube, dass die Entwicklung bei Scala insofern noch am Anfang steht, als dass das Ausloten der Sprachemöglichkeiten und die kreativen Auslegungen der Plattform noch in den Kinderschuhen steckt, gerade wenn man betrachtet, wo wir uns da im Java-Umfeld befinden. Doch diese Kinderschuhe sind bereits jetzt viel größer und der kleine Bub schaut entspannt über die Köpfe seiner Eltern hinweg.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2009-08-26 08:52:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-08-26 07:52:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scala-vs-java]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="scala"><![CDATA[scala]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386688720]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"180.49306940696698";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"146.12602926073947";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"122.87755308214943";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"110.54701365481547";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"37.96786829215716";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"15.627342924422535";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Datenbankeinträge auswählen mit der CheckGroup</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/02/form-checkgroup-database/</link>
		<pubDate>Wed, 02 Sep 2009 22:00:45 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[Ich wurde gefragt, ob in meinem Buch (<a href="http://www.hanser.de/978-3-446-41909-4">Praxisbuch Wicket</a>) die Verwendung der CheckGroup-Komponente erläutert wird. Die Anwort ist einfach: ja.

Was in dem Beispiel aber nicht gezeigt wird, ist das dynamische Erzeugen der Auswahlliste durch Daten aus einer Datenbank. Der Absender hat sich aber genau für diesen Fall interessiert, so dass ich an dieser Stelle mal ein einfaches Beispiel geben möchte, wie man soetwas realisieren kann.

<strong>Das Beispiel</strong>

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.checkgroup.fromdb;

import java.util.ArrayList;
import java.util.List;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Check;
import org.apache.wicket.markup.html.form.CheckGroup;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.util.CollectionModel;
import org.apache.wicket.spring.injection.annot.SpringBean;

import de.wicketpraxis.persistence.beans.User;
import de.wicketpraxis.persistence.dao.UserDao;

public class CheckGroupFromDbPage extends WebPage
{
  @SpringBean
  UserDao _userDao;
  
  public CheckGroupFromDbPage()
  {
    LoadableDetachableModel<List<User>> userListModel=new LoadableDetachableModel<List<User>>()
    {
      @Override
      protected List<User> load()
      {
        return _userDao.findAll(0, 10);
      }
    };
    
    final IModel<Collection<Integer>> selectedModel = new CollectionModel<Integer>(new ArrayList<Integer>());
    
    add(new FeedbackPanel("feedback"));
    
    Form<Void> form=new Form<Void>("form")
    {
      @Override
      protected void onSubmit()
      {
        info("Elemente selectiert: "+selectedModel.getObject());
      }
    };
    
    CheckGroup<Integer> checkGroup=new CheckGroup<Integer>("checkGroup",selectedModel);
    form.add(checkGroup);
    
    checkGroup.add(new ListView<User>("list",userListModel)
    {
      @Override
      protected void populateItem(ListItem<User> item)
      {
        item.add(new Check<Integer>("check",Model.of(item.getModelObject().getId())));
        item.add(new Label("name",item.getModelObject().getName()));
      }
    });
    
    add(form);
    
  }
}
</code>


Und das Markup-File:

<code lang="html"><html>
  <head>
    <title>CheckGroup from DB</title>
  </head>
  <body>
    <div wicket:id="feedback"></div>
    
    <form wicket:id="form">
      <wicket:container wicket:id="checkGroup">
      <wicket:container wicket:id="list">
        <input wicket:id="check" type="checkbox"> <span wicket:id="name"></span><br>
      </wicket:container>
      </wicket:container>
      <input type="submit" value="Auswählen">
    </form>
  </body>
</html></code>

Die Variable _userDao beinhaltet die Datenbankzugriffsklasse. Da wir die Variable als Field definiert haben, können wir ohne weiteres innerhalb der Klasse darauf zugreifen. Wicket sorgt für alle über die SpringBean-Annotation initialisierten Felder dafür, dass es mit der Serialisierung der Komponente keine Probleme gibt.

Als nächstes erstellen wir ein Modell, dass die gewünschte Auswahlmenge ermittelt. An dieser Stelle könnte man über ein CascadingLoadableDetachableModel (kein Wicket-Standard, siehe Buch Seite 65 oder hier im Blog) auch auf die Modelldaten eines Eingabefeldes zurückgreifen um die Abfrage einsprechende zu beeinflussen zu können. Das Ergebis ist eine Liste von Objekten.

Als zweiter erstellen wir ein Modell, in dem die IDs der ausgewählten Elemente landen. Um den Aufwand einer eigenen Implementierung einer Modellklasse für eine Collection von persistenten Objekten zu sparen, legen wir nur die ID des Elements, nicht das Element selbst in der Auswahlliste ab.

Das Feedbackpanel dient zur Anzeige die Message, die in der onSubmit-Methode des Formulars ausgegeben wird. Das Formular hat in diesem Fall kein eigenes Modell (nur der Einfachheit halber wird in dem Beispiel auf die Verwendung eines CompoundPropertyModel verzichtet).

Jetzt kommt der spannende Teil. Der CheckGroup-Komponente wird als Parameter das Modell übergeben, in der die Ausgewählten Elemente gesammelt werden sollen. Dann wird in der ListView für alle zur Verfügung stehenden Elemente eine Check-Komponente hinzugefügt, die als Modell nicht das Objekt, sondern die ID des Datenbankeintrags übergeben bekommt.

<strong>Funktionsweise</strong>

Wenn das Formular abgeschickt wird, ermittelt Wicket alle Check-Komponenten, die aktiviert waren. Für diese Komponenten wird der Inhalt des Modells ermittelt und der Auswahlliste hinzugefügt. Abschließend wird das Modell, dass die Auswahlliste beinhaltet entsprechend gesetzt. Dabei können beliebige Typen für die Auswahlliste benutzt werden, solange sie serialisierbar sind. Kommen die Daten aus einer Datenbank empfiehlt sich der Einsatz eines Primärschlüssels, anhand dessen das Objekt ermittelbar bleibt.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2009-09-02 23:00:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-02 22:00:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[form-checkgroup-database]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="checkgroup"><![CDATA[checkgroup]]></category>
		<category domain="post_tag" nicename="db"><![CDATA[db]]></category>
		<category domain="post_tag" nicename="form"><![CDATA[form]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386678423]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"146";s:5:"score";s:17:"33.00966013499383";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"120";s:5:"score";s:16:"28.8121421926074";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"244";s:5:"score";s:16:"28.6520567769223";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"28.092693014979716";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"213";s:5:"score";s:18:"27.052478925047897";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:18:"24.513282346043468";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quelltext der Beispiele aus dem Buch zum Download</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/03/quelltext-der-beispiele-aus-dem-buch-zum-download/</link>
		<pubDate>Thu, 03 Sep 2009 21:39:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe gerade die Beispiele aus dem Buch zum einem Paket geschnürt. Dieses kann man sich auf der <a href="/blog/download/">Download</a>-Seite herunterladen und ausprobieren. Alles weitere steht auf der Seite.

Das Quelltextarchiv wird in den nächsten Tagen auch auf der Verlagsseite zum Buch <a href="http://www.hanser.de/978-3-446-41909-4" target="_blank">Praxisbuch Wicket</a> zu finden sein.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2009-09-03 22:39:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-03 21:39:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[quelltext-der-beispiele-aus-dem-buch-zum-download]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="download"><![CDATA[download]]></category>
		<category domain="post_tag" nicename="praxis"><![CDATA[praxis]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386768590]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"93.24225656015221";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:18:"54.597215756399585";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"27.983334165636286";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:18:"24.513282346043468";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:18:"12.821332380623812";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"210";s:5:"score";s:16:"9.39220348942159";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Migration zu Wicket</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/06/migration-zu-wicket/</link>
		<pubDate>Sun, 06 Sep 2009 14:15:53 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[Als ich mit Wicket angefangen habe, hatte ich schon mit verschiedenen anderen Technologien gearbeitet. Ich war also keine Neueinsteiger sondern hatte bereits einige Erfahrungen hinter mir. In dieser Situation entstehen automatisch Fragestellungen, die sich damit beschäftigen, wie man bekannte Probleme neu mit Wicket lösen würde und wie diese Lösungen im Vergleich zu den bestehenden Altlösungen zu bewerten sind.

Er größte Fehler, den man bei einem Wechsel zu Wicket (und vermutlich bei jedem Wechsel einer Technologie) macht, besteht darin, das man versucht ein altes Problem mit neuer Technik auf alte Weise zu lösen. Das kann nicht funktionieren.

<strong>Beispiel</strong>

Wenn man Webanwendungen mit JSF, JSP, Struts oder anderen Frameworks entwickelt, tendiert man dazu, dass der Anwendungszustand zu einem wesentlichen Teil über Seitenparameter transportiert wird. Das hat verschiedene Ursachen (z.B. Suchmaschinenoptimierung, Seitenpufferung). Seiten, die besonders häufig abgerufen wurden, sollten gepuffert werden können. Das heißt, für eine bestimmte Url erhielt man immer den selben Inhalt. Es wurde teilweise ohne jede Nutzersession gearbeitet.

Diese Anforderung ist mit Wicket lösbar, aber der falsche Weg. Zu behaupten, es ginge mit Wicket spontan ganz einfach, ist aber ebenso falsch. Doch der Weg zu einer guten Lösung ist nicht weit. Als aller erstes musste ich mich davon verabschieden, dass eine Wicketseite (die auch Ajax verwendet) gepuffert werden kann. Wenn das Erstellen von Teilen der Seite zu zeitaufwendig ist, muss man durch das Puffern von Ergebnissen dem ganzen entgegenwirken. Aber im Unterschied zur alten Lösung wird nicht mehr die ganze Seite, sondern nur noch die Daten der nötigen Teilergebnisse gepuffert. Das ist auch sehr viele Arten sehr viel geschickter.

<strong>Ausblick</strong>

Dieses erste Beispiel veranschaulicht sehr gut, warum es gut ist, sich gerade auch mit den Grundlagen von Wicket zu beschäftigen. Ich den nächsten Artikeln werde ich weitere Beispiele erläutern und aufzeigen, wie man von der alten Lösung für ein Problem zu einer neuen Lösung mit Wicket kommt. 

Wer möchte, kann mir seine Fragestellung zukommen lassen. Ich kann diese Fragestellungen dann in die Artikel einfließen lassen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2009-09-06 15:15:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-06 14:15:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[migration-zu-wicket]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="jsf"><![CDATA[jsf]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="category" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386678615]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"202.66065582038544";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:17:"67.65632375495025";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"18.62239044540911";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"120";s:5:"score";s:18:"17.266870014782018";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"137";s:5:"score";s:18:"16.774510755896678";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Migration zu Wicket : Formulare</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/09/migration-zu-wicket-formulare/</link>
		<pubDate>Wed, 09 Sep 2009 06:08:08 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[Formulare sind wesentlicher Bestandteil einer Webanwendung. Doch gerade beim Umstieg von einem anderen Framework kommt es in diesem Bereich zu Irritationen. Warum? Ein wesentlicher Unterschied besteht darin, dass es in Wicket nicht zwingend eine Ergebnisseite geben muss. Ich möchte das an einem Beispiel veranschaulichen.

Als erstes erstellen wir eine JavaBean in der das Formular die Daten ablegt:

<code lang="java5[lines]">package de.wicketpraxis.web.blog.pages.questions.migration.forms;

import java.io.Serializable;

public class FormBean implements Serializable
{
  String _name;
  
  public String getName()
  {
    return _name;
  }
  
  public void setName(String name)
  {
    _name = name;
  }
}</code>

Nichts besonderes. Die Bean hat das Attribut "Name". Erstellen wir eine Seite, die über ein Formular diese Bean mit Werten füllt:

<code lang="java5[lines]">package de.wicketpraxis.web.blog.pages.questions.migration.forms;

import java.io.Serializable;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.CompoundPropertyModel;

public class MinimalFormPage extends WebPage
{
  public MinimalFormPage()
  {
    Form<FormBean> form = new Form<FormBean>("form",new CompoundPropertyModel<FormBean>(new FormBean()));
    
    form.add(new TextField<String>("Name"));
    
    add(form);
  }
}</code>

Wie wir sehen, wird ein Formular eingebunden und in dieses Formular ein Textfeld für das Attribut benutzt. Damit ist dieses Beispiel funktionsfähig. Es macht nur nicht besonders viel. Was aber gut zu erkennen ist:
<ul>
	<li>es wird keine Ergebnisseite benötigt</li>
	<li>es muss keine Methode überschrieben werden, um die Eingabedaten in der Bean abzulegen</li>
</ul>

Das Markup ist ebenfalls recht einfach:

<code lang="html[lines]"><html>
  <head>
    <title>MinimalFormPage</title>
  </head>
  <body>
    <form wicket:id="form">
      Name <input wicket:id="Name"><br>
      <input type="submit" value="Absenden">
    </form>
  </body>
</html></code>

Interessant: der Submit-Button hat in diesem Beispiel keine Entsprechung als Wicket-Komponente. Das Formular wird trotzdem abgeschickt.

<strong>Komplexes Beispiel</strong>

Kommen wir nun zu einem etwas komplexeren Beispiel, dass eine Ergebnisseite verwendet. <strong>Dabei an dieser Stelle nocheinmal der Hinweis: die Ergebnisseite wird verwendet, weil wir das in diesem Beispiel so wollten. </strong>Alles was auf der Ergebnisseite dargestellt werden kann, könnte man auch ganz einfach auf der Seite darstellen, auf der auch das Formular eingebunden ist.

Als erstes erstellen wir die Ergebnisseite:
<code lang="java5[lines]">package de.wicketpraxis.web.blog.pages.questions.migration.forms;

import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;

public class ResultPage extends WebPage
{
  public ResultPage(String name)
  {
    init(name);
  }
  
  public ResultPage(PageParameters pageParameters)
  {
    init(pageParameters.getString("Name"));
  }
  
  protected void init(String name)
  {
    add(new Label("name",name));
  }
}</code>

<code lang="html[lines]"><html>
  <head>
    <title>ResultPage</title>
  </head>
  <body>
    Name <span wicket:id="name"></span>
  </body>
</html></code>

Die Seite besitzt zwei Konstruktoren. Der erste erwartet einen String als Parameter, der zweite wertet die Seitenparameter aus (wenn die Seite z.B. mit ?Name=klaus aufgerufen wird). Der Wert wird durch das Label zur Anzeige gebracht.

Jetzt die Formularseite:
<code lang="java5[lines]">package de.wicketpraxis.web.blog.pages.questions.migration.forms;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.CompoundPropertyModel;

public class KomplexFormPage extends WebPage
{
  public KomplexFormPage()
  {
    add(new FeedbackPanel("feedback"));
    
    Form<FormBean> form = new Form<FormBean>("form",new CompoundPropertyModel<FormBean>(new FormBean()))
    {
      @Override
      protected void onSubmit()
      {
        // Variante 1
        setResponsePage(new ResultPage(getModelObject().getName()));
        
        // Variante 2
        Map<String,String> map=new HashMap<String, String>();
        map.put("Name", getModelObject().getName());
        setResponsePage(ResultPage.class, new PageParameters(map));
        
        // Variante ?
      }
    };
    
    form.add(new TextField<String>("Name").setRequired(true));
    
    add(form);
  }
}</code>

Wir haben in diesem Beispiel ein FeedbackPanel hinzugefügt, da wir auch das Textfeld zum Pflichtfeld gemacht haben. Ohne FeedbackPanel kommt sonst der Hinweis, dass man etwas eingeben muss, nicht zur Anzeige. Ansonsten haben wir die onSubmit-Methode überschrieben, die die Ergebnisseite aufruft. Dabei können wir zum einen eine Instanz der Seite erstellen, in dem wir (vorrausgesetzt es gibt einen passenden Konstruktor) den/die gewünschten Parameter direkt übergeben. Das wir in diesem Beispiel nur ein String übergeben, soll nicht darüber hinwegtäuschen, dass jedes beliebige (also auch weit komplexere) Objekte übergeben werden können.

Die zweite Variante verpackt den Parameter in einen Seitenparameter und springt die Seite dann über eine passende Url an. In diesem Fall werden natürlich die übergebenen Parameter für den Nutzer sichtbar. Das entspricht auch eher dem klassischen Verständnis einer Formularbehandlung in anderen Frameworks. Der Unterschied besteht allerdings schon darin, dass an dieser Stelle die Formularbehandlung bereits abgeschlossen ist und wir nur noch einmal absichtlich auf eine andere Seite springen.

Daher ist die letzte Variante auch nur mit einem Fragezeichen versehen. Wenn nichts dafür spricht, dass man eine wie auch immer geartete Ergebnisseite benötigt, kann man diese auch weglassen. Man sollte vielmehr darauf zurückgreifen, dass man Komponenten ein und ausblendet, wenn man das Formular nach erfolgreichem Ausfüllen nicht mehr anzeigen möchte.

<strong>Zusammenfassung</strong>

Ich hoffe, ich konnte zeigen, dass man sich vom dem klassischen Konzept einer Formularseite trennen muss und die Formularverarbeitung in Wicket ihre Entsprechung vermutlich eher in Swing findet.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2009-09-09 07:08:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-09 06:08:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[migration-zu-wicket-formulare]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="form"><![CDATA[form]]></category>
		<category domain="category" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="post_tag" nicename="submit"><![CDATA[submit]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386686559]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:16:"86.4364265778222";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"213";s:5:"score";s:17:"65.71101497187905";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"244";s:5:"score";s:18:"36.125230339605736";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"28.22826613191275";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"137";s:5:"score";s:17:"21.01303682884096";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"20.51469057378244";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Umfrage : welches Framework benutzt Du?</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/09/umfrage-welches-framework-benutzt-du/</link>
		<pubDate>Wed, 09 Sep 2009 06:16:41 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe mal eine <a href="http://pollpigeon.com/jsf-grails-wicket/t/25665/" target="_blank">Umfrage</a> zu diesem Thema eingerichtet und finde die Ergebnisse jetzt schon interessant. Aktuell liegt Grails vor Wicket vor JSF. Ich bin ja mal gespannt, wie sich das weiterentwickelt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2009-09-09 07:16:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-09 06:16:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[umfrage-welches-framework-benutzt-du]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386692879]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"89.15747750459428";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"52.05292123825838";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:17:"31.76200740305076";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"27.983334165636286";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"20.043045117497357";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"15.627342924422535";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket im JavaMagazin</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/09/wicket-im-javamagazin/</link>
		<pubDate>Wed, 09 Sep 2009 21:44:35 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[Im September 2007 erschien im JavaMagazin ein Artikel über Wicket unter dem Titel <a href="http://it-republik.de/jaxenter/artikel/Wicket-%96-ein-neuer-Stern-am-Webframework-Himmel-1301.html" rel="nofollow" target="_blank">"Wicket - ein neuer Stern am Webframework-Himmel?"</a>. Damit hat die Redaktion damals Weitsicht bewiesen, denn jetzt, 2 Jahre später muss man feststellen, dass (wie man der <a href="http://pollpigeon.com/jsf-grails-wicket/t/25665/" rel="nofollow" target="_blank">Umfrage</a> entnehmen kann) Wicket zu einer relevanten Größe geworden ist.

Wer die letzten Wochen und Monate aufmerksam verfolgt hat, der wird festgestellt haben, dass Wicket immer mehr als Alternative zu JSF ins Gespräch kommt. Da erwarte ich in den nächsten Monaten weitere Veränderungen.

Nun könnte man meinen, dass es hoch gepokert war, als ich mich entschloss, ein Buch über Wicket zu schreiben. Doch ich glaube, es war absehbar. Zu dem Zeitpunkt war erkennbar, dass Wicket für sehr viele Projekte geeignet war und sich schnell weiter entwickelte. Ich hatte das Glück, dass neben meiner persönlichen Überzeugung auch der Hanser-Verlag diese Ansicht vertrat. Auf halben Weg konnten wir dann feststellen, dass auch der dpunkt-Verlag ein Wicket-Buch (<a href="http://www.dpunkt.de/buecher/2921.html" target="_blank" rel="nofollow">Wicket - Komponentenbasierte Webanwendungen in Java</a>) in Arbeit hat. Wir waren mit unsere Einschätzung nicht allein.

Im letzten JavaMagazin (10.2009 - September), also zwei Jahre später wurde Wicket erneut vorgestellt. Unter "Endlich komponentenbasierte Web-Apps" und "Wicket in der Praxis" zeigten die Autoren des anderen Buches eine Übersicht über die verschiedenen Themen und referierten über die Erfahrungen aus der Praxis. Neben ein paar Widersprüchlichkeiten (Kritikpunkt "fehlende professionelle Komponentenbibliotheken" passt nicht zu Stärke "nicht auf Komponentenbibliotheken von Drittherstellern angewiesen") ist der Kern der Aussage unterstützenswert. Ich formuliere es aber etwas eindeutiger: 

<blockquote>Wicket ist für sehr viele Webanwendungen die beste Wahl. Gerade in Hinblick auf JSF sprechen die Vorteile für Wicket</blockquote>

Nun ist es interessant, andere Standpunkte zu betrachten und unter anderem andere Wicket-Bücher zu lesen. Und so habe ich mich auf September gefreut, weil dann nicht nur mein eigenes Buch, sondern auch das Buch aus dem dpunkt-Verlag veröffentlicht werden sollte. Ich hatte das Thema etwas aus den Augen verloren, bis ich in dem Artikel lass, dass das Buch leider erst später (Artikel: 10.2009, Web: 12.2009) erscheinen wird. Damit ist mein Buch zwar das einzige erhältliche deutschsprachige Buch, aber ich bin auch zu neugierig, als dass mir die Wartezeit bis Dezember kurz vorkommen wird.

Man darf also gespannt sein, was in diesem Jahr noch so passiert. Meine Investition in dieses Thema hat sich schon mehrfach ausgezahlt, weil ich so zielsicher wie noch nie im Team skalier- und wartbare Webanwendungen entwickeln kann. Das ist gut für den Kopf, die Firma, die Familie und die Gesundheit. Und es macht Spaß. Also: Viel Freude mit Wicket:)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2009-09-09 22:44:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-09 21:44:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-im-javamagazin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="buch"><![CDATA[buch]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386690650]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"93.75515304977608";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"168";s:5:"score";s:17:"27.08788684710949";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"247";s:5:"score";s:18:"23.167697279014952";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"8.382561103047214";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"352";s:5:"score";s:17:"6.124966573118707";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Entscheidungshilfe Webframework</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/12/entscheidungshilfe-webframework/</link>
		<pubDate>Sat, 12 Sep 2009 15:40:57 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[Ich hatte in einem der letzten Beiträge eine <a href="http://pollpigeon.com/jsf-grails-wicket/t/25665/" target="_blank">Umfrage</a> gestartet, um herauszufinden, welche Frameworks gerade wie intensiv eingesetzt werden. Natürlich ist das Ergebnis der Umfrage nicht mehr als ein Indiz, entspricht aber meinen Erwartungen.

Die erste Schwierigkeit, auf die man bei jedem Framework stößt, ist die Frage, ob es das Richtige für die Problemstellung ist. Dabei spielen natürlich verschiedene nicht technische Aspekte eine Rolle, die in die Entscheidung mit einfließen sollten. Anbei eine kleine Auswahl von Kriterien, die man in die Entscheidung einfließen lassen sollte:
<ul>
	<li>Ist das neue Framework eine Erweiterung meines Portfolios und sind mittel- und langfristig Synergieeffekte zu erwarten?</li>
	<li>Ist das neue Framework ein Ersatz für ein anderes im Einsatz befindliches Framework und wie kann eine Migrationsstrategie aussehen?</li>
	<li>Mit wieviel neuem muss ich mich beschäftigen? Wie steil ist die Lernkurve?</li>
	<li>Gibt es gute Dokumentationen (Bücher, Wiki, gut lesbarer Quelltext, etc.)?</li>
	<li>Ist zu erwarten, dass die Verbreitung dieses Frameworks eher zu- oder abnimmt?</li>
</ul>

Das letzten Fragen befassen sich nur mit einem Ausschnitt der Problematik und sind doch schon für sich genommen recht komplex. Diese Fragen kann man allerdings schwer für jemand anderen, sondern meist nur halbwegs gut für sich selbst und seinen Verantwortungsbereich beantworten. Deshalb beziehe ich mich in der folgenden Übersicht eher auf technische und organisatorische Aspekte, die aus den Erfahrungen im Umgang mit diesen Frameworks resultieren und daher natürlich subjektiv sind. Trotzdem glaube ich, dass die Einschätzung eine Hilfe für jeden sein kann, der sich mit den betreffenden Frameworks nicht beschäftigen konnte und sich trotzdem für eins einscheiden muss.

<strong>Grails</strong>

Grails ist ein an "Ruby on Rails" angelegtes Framework, was Groovy als Programmiersprache benutzt. Dinge die für Grails sprechen:
<ul>
	<li>Grails bringt alles mit, was man für eine Webanwendung braucht. Datenbank, Services, Präsentation, Ajax, etc.</li>
	<li>Es ist einfach, ausgehend von einer Datenbank mit Daten Anwendungen zu entwickeln, die diese Daten pflegen können.</li>
	<li>Die Java-Integration in Grails/Groovy ist sehr gut. Man kann als recht einfach auf bestehende Bibliotheken zurückgreifen.</li>
</ul>
Dinge die eher gegen Grails sprechen:
<ul>
	<li>Groovy ist eine dynamisch typisierte Sprache. Das hat Auswirkungen auf die IDE-Unterstützung und den Entwicklungsprozess.</li>
	<li>Grails benutzt für die verschiedenen Aspekte einer Anwendung etablierte Frameworks, die immer dann hervorscheinen, wenn man ein Problem hat und man sich dann nicht nur mit diesem Framework, sondern vor allem mit der Integration in Groovy beschäftigen muss.</li>
	<li>Grailsprojekte tendieren nicht zur Modularisierung. Ein nachträgliches Herauslösen von Funktionalität ist eher schwer.</li>
	<li>Wer auf eine gute Ajax-Unterstützung baut, der sollte wissen, dass Grails per Ajax nur einen Block auf der Seite aktualisieren kann. Es gibt Lösungen, die dieses Limit umgehen. Allerdings ist es überraschend, dass diese Lösungen es bisher nicht in den Grails-Kern geschafft haben.</li>
</ul>

Wer mit Grails Anwendung entwickeln möchte, der kann im Moment eigentlich nur auf <a href="http://www.jetbrains.com/idea" rel="nofollow" target="_blank">IDEA</a> und Netbeans als Entwicklungsumgebung zurückgreifen. Mit Grails lassen sich vor allem Probleme gut lösen, die genau in die Grails-Vorgehensweise passen: Datenbank anlegen, Tabellen definieren, Eingabemasken für den Datenzugriff generieren, eigene Ansichten mit eigenen Abfragen erstellen. Das ganze mit ein wenig Ajax würzen. Fertig.

Werden die Anwendungen in der Darstellung komplex, fängt es an, auch in Grails komplexer zu werden (und unterscheidet sich damit nicht von Ruby on Rails). Wenn der Fokus der Entwicklung eher in der Präsentationsschicht liegt, kann sich ein Framework lohnen, dass da seine Stärken hat. Grails ist IMHO vergleichbar mit einem etwas besseren Ansatz als Java Server Pages.

Ein in meinen Augen wichtiger Aspekt ist die fehlende Typsicherheit. Das bedeutet, dass nicht nur der letztmögliche Zeitpunkt, sondern oft auch der frühestmögliche Zeitpunkt, an dem ein Fehler sichtbar wird, der ist, wenn die Anwendung gestartet wurde und die fehlerhafte Funktion das erste mal aufgerufen wird. Dieser Fehler ist dann leicht zu beheben, weil es im Gegensatz zu anderen eher Java-basierten Frameworks keinen Server-Neustart nach sich zieht (meist nicht). Um solche Fehler in den Griff zu bekommen, müsste man dann aber entsprechende Unit-Tests erstellen. Wenn man der Argumentation von <a href="http://jars.de/fun/techie-tv-what-killed-smalltalk-could-kill-ruby-too" target="_blank">Robert Martin</a> folgt, dann ist dieser Ansatz (dem auch jede PHP-Anwendung folgt) nicht mit TDD vereinbar, noch Clean Code ist.

Man kann Grails nutzen, man muss nur wissen, worauf man sich einlässt.

<strong>GWT</strong>

Im Gegensatz zu Grails benutzt GWT Java als Programmiersprache. GWT unterscheidet sich von allen anderen Frameworks dadurch, dass der Schwerpunkt der Entwicklung von GWT-Anwendungen darin liegt, einen wesentlichen Anteil der Anwendung per Javascript im Browser des Anwenders laufen zu lassen. Wenn man in Grails eine Liste neu sortiert hat, konnte man dieses Ergebnis per Ajax auf der Seite ersetzen lassen. Bei GWT ist es möglich, diese Liste nur im Browser neu zu sortieren, ohne das dadurch eine Verbindung zum Server aufgebaut werden müsste. Man kann komplexe Anwendungen schreiben, die vollständig im Browser laufen und keinerlei Verbindung zum Server aufbauen müssen. Man könnte die selbe Anwendung direkt in Javascript entwickeln.

Da Google GWT für eigenen Anwendungen nutzt, ist der Ansatz, den Google damit verfolgt, recht offensichtlich. Alles, was nicht auf dem Server, sondern im Browser des Users ausgeführt wird, belastet die eigenen Server nicht. Wenn man Probleme dieser Kategorie erwartet, könnte GWT eine Lösung sein. Allerdings bedeutet das, dass der Nutzer ohne aktiviertes Javascript überhaupt nichts zu sehen bekommt.

Anwendungen, die mit GWT entwickelt wurden, verhalten sich eher wie Flash-Anwendungen oder Applets, man kann sie auf beliebigen Seiten einbinden. Das bedeutet aber auch, dass eine Suchmaschine (auch Google in diesem Fall) nichts von der Anwendung sieht. Wer also Webanwendungen entwickeln möchte, die Inhalte auch für Suchmaschinen zur Verfügung stellen oder zu erwarten ist, dass Javascript deaktiviert sein könnte, sollte GWT nicht in Betracht ziehen.

Der GWT-Ansatz fordert natürlich Tribut. Der Entwicklungszyklus ist kompliziert, das der Javacode erst in Javascript kompiliert werden muss. Die Trennung in Client- und Servercode ist nicht ohne Weiteres nachvollziehbar. Die erste eigene Beispielanwendung ist mit Schmerzen verbunden und geht nicht leicht von der Hand.

Wer eher Desktop-orientierte Anwendungen entwickeln möchte, aber das Lastproblem, das man mit GWT lösen könnte, nicht für den anstehenden Themenkomplex als Problem identifiziert hat, der sollte sich vielleicht <a href="http://vaadin.com/home" target="_blank" rel="nofollow">Vaadin</a> ansehen. Der Unterschied zu GWT liegt im wesentlich einfacheren Entwicklungszyklus (der auf die Schmerzen verzichtet) und der bereits vorbereiteten Komponenten, die von Haus aus recht ansprechend aussehen. Vaadin benutzt GWT nur für die Darstellung und ist eher ein serverlastiges Framework. Die Vorteile, die GWT gerade im Lastbereich hat, werden durch Vaadin reduziert.

GWT eignet sich für Webanwendungen immer dann, wenn die Anwendung eher einen Service als Inhalte zur Verfügung stellt. Webanwendungen, die auf Inhalte setzen, die der Nutzer in Suchmaschinen findet und die Verlinkt werden können, eher auf andere Frameworks setzen.

<strong>Wicket</strong>

Wicket benutzt Java als Programmiersprache. Im Gegensatz zu JSF, Grails und Anderen, werden in den Html-Schnipseln, die für die Darstellung verantwortlich sind, kein Code benutzt. Alles wird mit Java realisiert. Das hört sich im ersten Moment wie ein Nachteil an, erweist sich spätestens bei Benutzung als Vorteil. Auf diese Weise kann man jede beliebige IDE einsetzen und von allen Möglichkeiten profitieren, die eine Entwicklungsumgebung in Bezug auf Java bereitstellt.

Wie bei GWT muss man sich bei allen anderen Aspekten einer Webanwendung mit der Auswahl der richtigen Frameworks beschäftigen und diese auf einander abstimmen. Allerdings kann man sich das ganze auch einfach machen und auf die selbe Frameworks wie Grails setzen. Einzig die Integration muss man selbst bewerkstelligen. Für Wicket gibt es eine gute Integration von Spring und damit Hibernate als Persistenzschicht.

Was Wicket fehlt (möchte man meinen), sind Komponenten, die bereits ein ansprechendes Layout mitbringen. Das ist allerdings auch nicht der Fokus von Wicket. Mit Wicket kann man von klassischen Web-1.0 Anwendungen bis zu Ajax-reichen Desktop-ähnlichen Anwendungen alles umsetzen. Die Komponentenarchitektur macht das ganze beherrschbar, die Anwendungen suchmaschinentauglich zu machen, ist ohne größere Aufwände (vor allen auch nachträglich) möglich.

Im Desktop-Bereich wird die Differenzierung jetzt etwas schwer: Wicket sollte man benutzen, wenn Suchmaschinenoptimierung ein Thema ist und die Anwendung auch ohne Ajax/Javascript funktionieren muss. Wenn man kein Lastproblem erwartet aber auf alle Fälle auf fertige, ansprechende Komponenten zurückgreifen möchte, benutzt man am besten Vaadin. Bei zu erwartenden Lastproblemen kann sich der Einsatz von GWT auszahlen.

Besonders bei Anwendungen die sich irgendwo zwischen Web-1.0 und Desktop befinden, oder einen großen Teil davon abdecken müssen, sollte man Wicket benutzten. Gerade in diesem Bereich kann Wicket seine Stärken ausspielen. Durch den OO-Ansatz von Wicket kann man jederzeit bestehende Komponenten umarbeiten, erweitern, vereinfachen oder aufteilen, so das man nach recht kurzer Zeit ein stabiles Grundgerüst an eigenen Komponenten besitzt, mit denen dann sehr schnell neue Entwicklungen realisiert werden können.

<strong>der Rest</strong>

Was ist mit den ganzen anderen Frameworks? Bisher konnte ich keine Punkte identifizieren, die nicht eins der erwähnten Frameworks nicht abbilden kann, so dass man auf dieses Framework weiterhin angewiesen ist. Da ich mir nicht alle Frameworks angesehen habe, fehlt natürlich das eine oder andere. In der folgenden Übersicht folgen meine Empfehlungen für eine Migration auf eines der auserwählten Frameworks:
<ul>
	<li>JSF: GWT, Vaadin oder Wicket</li>
	<li>Tapestry,Struts: Wicket</li>
	<li>PHP,JSP: Grails oder Wicket (je nachdem wie komplex da UI wird)</li>
</ul>

<strong>Schwere Entscheidung</strong>

Jetzt muss man sich nur noch entscheiden. Man sollte sich allerdings die Entscheidung nicht zu schwer machen, wenn man zwischen zwei geeigneten Kandidaten wählen muss. Es dient vielmehr dazu, ein besseres Fundament für die eigenen Entscheidung zu gießen. Wie oft ist man in den letzten Jahren einem Hype gefolgt, um dann feststellen zu müssen, dass es nicht das eine Framework gibt, dass alle Probleme lösen kann. Im Zweifel fährt man besser, wenn man auch einmal "nein" sagt und bewusst auf ein Feature verzichtet.

<strong>Feedback</strong>

Rückmeldungen sind natürlich willkommen. Aspekte, die ich vergessen habe, pflege ich gern ein, ansonsten ist ja genug Platz in den Kommentaren, um die eigene Sichtweise und Erfahrung darzulegen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2009-09-12 16:40:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-12 15:40:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[entscheidungshilfe-webframework]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="compare"><![CDATA[compare]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[grails]]></category>
		<category domain="post_tag" nicename="gwt"><![CDATA[gwt]]></category>
		<category domain="post_tag" nicename="jsf"><![CDATA[jsf]]></category>
		<category domain="category" nicename="jsf-migration"><![CDATA[JSF]]></category>
		<category domain="category" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="category" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[vgwpixel]]></wp:meta_key>
			<wp:meta_value><![CDATA[<img src="http://vg05.met.vgwort.de/na/a7e0a1de3ab9482db72471ef2b2cd721" width="1" height="1" alt="">]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386697942]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"542.4027354110143";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"69.43111219676672";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"114";s:5:"score";s:17:"67.65632375495025";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"57.71473796078179";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"223";s:5:"score";s:18:"32.940509997560156";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:17:"31.76200740305076";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>815</wp:comment_id>
			<wp:comment_author><![CDATA[Martin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sachs.martin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.246.187.34]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-11 12:45:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-11 11:45:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Guter Überblick, den ich nur zustimmen kann. Jedoch fällt mir ein Punkt nicht reell vor. 
Ich würde von PHP auf Wicket nur unter bestimmten Umständen migrieren. wenn: 
- PHP-Code ist nicht mehr wartbar  
- Anforderungen erfordern J2EE features
- Komplexität ist sehr hoch

Ansonsten ist eine solche Migration mehr viel mehr serverlast verbunden.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>818</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.184.114.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-12 08:18:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-12 07:18:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Die Serverlast sollte sich gerade mit Java in Grenzen halten, so dass unter diesem Aspekt einer Migration nichts im Weg steht. Interessanter wird es bei der Komplexität der Anwendung. Wann ist die Komplexität sehr hoch? Lohnt sich nicht schon ein Umstieg, wenn die Komplexität nicht mehr besonders gering ist? Ich denke ja. Allerdings stehen der Migration dann noch andere Hindernisse im Weg, die man ungern überwindet: z.B. die Lernkurve. An dieser Stelle frage ich mich dann oft: Auf welche Themen möchte ich Einfluss haben, wenn ich eine Anwendung schreibe? Wenn ich durch die Wahl eines Frameworks mich genau auf diese Themen konzentrieren kann und mich idealer Weise mit keinem anderen Thema beschäftigen muss, kann es kaum einen besseren Kandidaten geben. Und so interessant die Entwicklung von Webandwendungen auch ist, gibt es doch eine Liste von Themen, die einfach funktionieren sollten (Request/Response, Encoding, Ajax, etc.). Das komplette Paket aus Bibliotheken, einer guten IDE, einer stabilen Sprache, einem ausgereiften Build-Tool, integrierten Unit-Tests etc. lassen für mich den Java-Stack um so viel geeigneter erscheinen. Aber das ist und bleibt schlussendlich auch eine persönliche Entscheidung. Insofern ist PHP natürlich nach wie vor eine Alternative.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>815</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11889</wp:comment_id>
			<wp:comment_author><![CDATA[Matthias]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[MatthiasRose7@web.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.fussballmanager-online.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.224.222.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-06-06 09:33:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-06-06 08:33:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Vielen Dank für die Übersicht! Es hat mir wirklich geholfen, um MEIN Framework zu finden =&gt; Wicket!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6552</wp:comment_id>
			<wp:comment_author><![CDATA[Benjamin Schmid]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[B.Schmid@exxcellent.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.132.70.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-19 11:23:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-19 10:23:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In diesem Zusammenhang ein Hinweis auf das nicth ganz so bekannte, aber in meinen Augen technologisch sehr überzeugende Echo 3 Framework : http://echo.nextapp.com/

Echo3 bietet ein JavaScript-Komponentenmodell und ein dazu gespiegeltes Java Komponentemodell an. Daher lassen sich Anwendungen von komplett in Java bis komplett in JavaScript und gemischt entwickelt. Da es JS pur einsetzt, ist der Entwicklungstrip für JavaScript relevanten Entwicklungen um Dimensionen leichter, durchschaubarer und managebarer als in GWT. Dalls man in die Situation kommt neue, eigenen Komponenten einzubinden (z.B. komplexe JS Komponenten a la jquery UI oder extJS). In meinen Augen die bessere, leichtgewichtigere klarer Alternative zu Vaadin.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78681</wp:comment_id>
			<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ardescos@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.39.223.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-28 06:41:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-28 05:41:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Vielen Dank für die tolle Übersicht! 
Ich werde Wicket &amp; GWT nun zügig zu den Akten legen und mir Vaadin anschauen!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374659183.1553929;s:7:"message";s:53:"michael hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369719668.7430379;s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>475248</wp:comment_id>
			<wp:comment_author><![CDATA[home]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gyutbucssbk@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.100hoverboard.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.20.157.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-12-20 09:56:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-12-20 08:56:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[urehaadtypqmjkfhkwlgmardvkxdpiqlcgsorimfvxtsodqbisksqqnhdkv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1482224201.1251969;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Update</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/14/update/</link>
		<pubDate>Mon, 14 Sep 2009 07:27:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[Eine neue Version des Beispielcodes zum Buch steht unter <a href="/blog/download/">Download</a> zur Verfügung. Außerdem ist der Code zu den Beispielen im Blog enthalten und können so einfach ausprobiert werden.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2009-09-14 08:27:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-14 07:27:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[update]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386720417]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"27.983334165636286";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"16.260631063802318";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"257";s:5:"score";s:17:"9.575380271373174";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:17:"6.780223911412393";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:17:"6.494490189366199";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"330";s:5:"score";s:17:"6.471002037713171";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Migration zu Wicket: Ajax</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/15/migration-zu-wicket-ajax/</link>
		<pubDate>Tue, 15 Sep 2009 06:29:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[Einer der Aspekte, die bei meiner Entscheidung für ein neues Webframework eine große Rolle spielten, war die Integration von Ajax. Fast jedes aktuelle Framework bietet eine Unterstützung von Ajax, doch unterscheiden sie sich in Handhabung und Möglichkeit.

Die komponentenorientierte Arbeitsweise von Wicket führt dazu, dass eine Wicket-Seite (die Entsprechung einer Webseite), aus einem Komponentenbaum besteht, bei der jede Komponente für ihre Darstellung verantwortlich ist. Daher ist es besonders einfach, den Teil zu identifizieren, der durch die jeweilige Komponente dargestellt wird. Diesen Umstand macht sich Wicket zu nutze, um im Gegensatz zu anderen Frameworks, beliebig viele Bereiche der Webseite aktualisieren zu können.

Im folgenden Beispiel soll das veranschaulicht werden:
<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.ajax;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.Model;

public class AjaxMultiUpdatePage extends WebPage
{
  public AjaxMultiUpdatePage()
  {
    final FeedbackPanel feedback=new FeedbackPanel("feedback");
    feedback.setOutputMarkupId(true);
    add(feedback);
    
    // die geschweiften Klammern haben keine Funktion
    // sie sollen nur den Komponentenbaum veranschaulichen
    WebMarkupContainer block = getBlock(feedback,1);
    {
      WebMarkupContainer block2 = getBlock(feedback,2);
      {
        WebMarkupContainer block3 = getBlock(feedback,3);
        block2.add(block3);
      }
      block.add(block2);
    }
    add(block);
  }

  private WebMarkupContainer getBlock(final FeedbackPanel feedback, int start)
  {
    final WebMarkupContainer block = new WebMarkupContainer("ajaxUpdate");
    block.setOutputMarkupId(true);
    
    Model<Integer> model = Model.of(start);
    final Label label = new Label("count",model);
    label.setOutputMarkupId(true);
    block.add(label);
    
    block.add(new AjaxFallbackLink<Integer>("link",model)
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        setModelObject(getModelObject()+1);
        info("Aktualisiere "+getPath());
        if (target!=null)
        {
          target.addComponent(feedback);
          target.addComponent(block);
          
          // ist nicht nötig
          target.addComponent(label);
        }
      }
    });
    
    return block;
  }
}
</code>

Wir fügen der Seite ein FeedbackPanel hinzu. Für jede Komponente, die per Ajax aktualisiert werden soll, muss die <strong>setOutputMarkupId(true)</strong> aufgerufen werden. Dass veranlasst Wicket, in dem Html-Tag dieser Komponente das id-Attribut zu setzen. Das ist notwendig, damit Wicket diesen Tag dann durch neuen Inhalt ersetzen kann.

Als weiteres erzeugen wir einen WebMarkupContainer. Dieses Element dient uns als Rahmen, um die Aktualisierung des ganzen Blocks anstoßen zu können. Als Kindelemente definieren wir zusätzlich ein Label, das den Inhalt eines Modells darstellt, dass wir gleichzeitig in einem AjaxFallbackLink benutzen. Klickt der Nutzer auf den Link, wird der Wert im Modell erhöht und der Block sowie das FeedbackPanel in die Liste der zu aktualisierenden Komponenten aufgenommen. Auch das Label wurde zu dieser Liste hinzugefügt. Allerdings kommt hier bereits eine Optimierung zum Vorschein, die Wicket vornehmen kann, da der Komponentenbaum bekannt ist: Wicket ersetzt den ganzen Block und weiß, dass damit auch das Label aktualisiert wurde, weshalb es nicht gesondert ersetzt werden muss.

Innerhalb eines Blockes fügen wir einen weiteren als Kindelement ein. Das wiederholen wir noch einmal. Wird in dieser Konstellation nun der äußere Block aktualisiert, werden auch alle Kindelemente aktualisiert. Dieses Verhalten kann man überprüfen, in dem man die Kommunikation im WicketAjaxDebug-Fenster betrachtet.

[caption id="attachment_139" align="aligncenter" width="450" caption="Wicket Ajax Debug Window"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-ajax-debug.jpg"><img class="size-medium wp-image-139" title="wicket-ajax-debug" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/09/wicket-ajax-debug-450x266.jpg" alt="Wicket Ajax Debug Window" width="450" height="266" /></a>[/caption]

Deaktiviert man JavaScript und damit Ajax, dann funktioniert die Seite trotzdem, da dann die ganze Seite neu gerendert wird. Auf diese Weise kann man Webanwendungen mit Ajax-Unterstützung entwickeln, ohne dass man Nutzer, die aus welchen Gründen auch immer JavaScript deaktiviert haben, im Regen stehen lässt.

<code lang="html"><html>
  <head>
    <title>AjaxMultiUpdate</title>
    <style type="text/css">
      .block
      {
        border:1px solid dashed;
      }
    </style>
  </head>
  <body>
    <h1>Ajax Test</h1>
    <div wicket:id="feedback"></div>
    
    <div wicket:id="ajaxUpdate" class="block">
      <span wicket:id="count">123</span> <a wicket:id="link">+1</a>
      <div wicket:id="ajaxUpdate" class="block">
        <span wicket:id="count">123</span> <a wicket:id="link">+1</a>
        <div wicket:id="ajaxUpdate" class="block">
          <span wicket:id="count">123</span> <a wicket:id="link">+1</a>
          
        </div>
      </div>
    </div>
  </body>
</html></code>

Dieses Beispiel offenbart wesentliche Unterschiede zwischen der Ajax-Integration von Wicket und anderen Frameworks:
<ul>
	<li>Wicket kann beliebig viele Komponenten innerhalb eines Request aktualisieren.</li>
	<li>Wicket kann die Aktualisierung optimieren.</li>
	<li>Auch bei deaktiviertem Javascript ist die Funktion der Anwendung gewährleistet.</li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2009-09-15 07:29:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-15 06:29:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[migration-zu-wicket-ajax]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[grails]]></category>
		<category domain="category" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386768211]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"138.32918590220098";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"96.75183277309918";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"57.71473796078179";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"26.112681343028868";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"120";s:5:"score";s:17:"21.01303682884096";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Migration zu Wicket: Model</title>
		<link>http://www.wicket-praxis.de/blog/2009/09/22/migration-zu-wicket-model/</link>
		<pubDate>Tue, 22 Sep 2009 07:30:16 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket ist ein Webframework nach dem MVC-Prinzip. Dabei orientiert sich Wicket in vielen Dingen eher an Grundprinzipien der Anwendungsentwicklung von Desktop-Anwendungen. Eine wesentliche Rolle spielen dabei die Modelle, die in Komponenten benutzt werden und die die Daten liefern, die durch verschiedenen Komponenten zur Anzeige gebracht werden. Dabei gibt es aber gerade in diesem Bereich sehr viele Irritationen. Problematisch erweist sich dabei vielleicht der Umstand, dass man auch ohne Modelle zu benutzen, mit Wicket bereits Daten zur Anzeige bringen kann. Man versteht dann erst einmal nicht, wie sich dass von einer Anwendung z.B. in PHP unterscheiden soll. Betrachtet man die Label-Komponente (die häufig für die Darstellung herangezogen wird) näher, stellt man fest, dass auch der Aufruf ohne Model intern dazu führt, dass der Übergabeparameter in ein Model gelegt wird.

In einem kleinen Beispiel möchte ich veranschaulichen, wie die verschiedenen Model-Klassen zum Einsatz kommen können und warum man immer Modelle benutzen sollte.

Wir erstellen zuerst eine Model-Klasse, die eine Liste von Ergebnissen liefert. In diesem Fall werden die Einträge zwar fest kodiert, könnten aber genauso gut aus der Datenbank kommen.

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model;

public class Result
{
  String _name;
  
  Double _betrag;
  
  public Result(String name, double betrag)
  {
    _name=name;
    _betrag=betrag;
  }
  
  public String getName()
  {
    return _name;
  }
  
  public Double getBetrag()
  {
    return _betrag;
  }
}
</code>

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model;

import java.util.ArrayList;
import java.util.List;

import org.apache.wicket.model.LoadableDetachableModel;

public class ResultListModel extends LoadableDetachableModel<List<Result>>
{
  @Override
  protected List<Result> load()
  {
    List<Result> ret=new ArrayList<Result>();
    ret.add(new Result("Popcorn",3.15));
    ret.add(new Result("Eis",2.80));
    ret.add(new Result("Eintritt",5.50));
    return ret;
  }
}
</code>

Das LoadableDetachableModel ist immer dann die beste Wahl, wenn Daten dynamisch erzeugt werden sollen und jedes mal sicher gestellt werden soll, dass die aktuellsten Daten verwendet werden. Wir das Model während eines Request geladen, werden die Daten so lange vorgehalten, bis die detach()-Methode aufgerufen wird, und die Liste zurückgesetzt wird. Das Model liefert uns in diesem Fall 3 Datensätze der Result-Klasse.

Die Beispielliste ist eine Liste von Posten auf einer Rechnung. Wir möchten aber zum Betrag auch noch den MwSt-Anteil ausweisen. Dazu schreiben wir ein allgemeines Model, dass von einer Erweiterung des LoadableDetachableModel abgeleitet ist: <a href="http://www.wicket-praxis.de/blog/2009/01/03/modell-referenzen/">CascadingLoadableDetachableModel</a>.

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model;

import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;

import de.wicketpraxis.web.blog.model.CascadingLoadableDetachableModel;

public class MwStAnteilModel extends CascadingLoadableDetachableModel<Double, Double>
{
  static final Double MWST=19.0;
  
  public MwStAnteilModel(IModel<? extends Double> parent)
  {
    super(parent);
  }

  @Override
  protected Double load(Double brutto)
  {
    if (brutto!=null)
    {
      return brutto*MWST/100.0;
    }
    return null;
  }
}
</code>

Das Model entnimmt dem referenzierten Model den Betrag und ermittelt den MwSt-Anteil, den es seinerseits bereitstellt. Der Wert wird auch hier bis zum Aufruf von detach() gepuffert. Als Referenzmodell kann jede Klasse dienen, die IModel<Double> implementiert.

Jetzt fügen wir die Bestandteile zusammen:

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model;

import java.util.List;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.PropertyListView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.PropertyModel;

import de.wicketpraxis.web.blog.model.CascadingLoadableDetachableModel;

public class SomeModelsPage extends WebPage
{
  public SomeModelsPage()
  {
    ResultListModel resultList=new ResultListModel();
    
    add(new PropertyListView<Result>("list",resultList)
    {
      @Override
      protected void populateItem(ListItem<Result> item)
      {
        IModel<Result> model = item.getModel();
        item.add(new Label("name",new PropertyModel<String>(model,"name")));
        item.add(new Label("betrag"));
        item.add(new Label("mwst",new MwStAnteilModel(new PropertyModel<Double>(model,"betrag"))));
      }
    });

    IModel<Double> summeModel = new CascadingLoadableDetachableModel<Double, List<Result>>(resultList)
    {
      @Override
      protected Double load(List<Result> liste)
      {
        if (liste!=null)
        {
          double summe=0;
          for (Result r : liste)
          {
            summe=summe+r.getBetrag();
          }
          return summe;
        }
        return null;
      }
    };
    
    add(new Label("summe",summeModel));
    add(new Label("mwst",new MwStAnteilModel(summeModel))); 
  }
}
</code>

Zuerst erstellen wir eines Instanz des ResultListModel. Die Ergebnisliste wird durch eine PropertyListView dargestellt. Der Unterschied zur ListView-Komponente besteht darin, dass bei Komponenten ohne eigenes Model die Id als Property-Expression herangezogen wird, um das Model für die Anzeige der Daten zu ermitteln. Die Schreibarbeit, die man für das Label "name" aufwenden müsste, kann man auf diese Weise erheblich reduzieren. Wie man beim Label mit der Id "mwst" erkennen kann, können die Modelle beliebig geschachtelt werden.

Um die Summe aller Einträge zu ermitteln, könnten wir jetzt die Ergebnisliste durchgehen und die Summe berechnen. Doch der Konstruktor einer Komponente wird ja nur einmal aufgerufen. Ändert sich durch eine Aktion auf der Seite oder in einer Komponente etwas an den zugrunde liegenden Daten, dann wird die Summe so nicht automatisch aktualisiert. Daher erstellen wir ein Model, dass diese Berechnung immer wieder durchführt. Dann können wir die aktuelle Summe und auch hierfür den MwSt-Anteil anzeigen lassen. Sollte sich an den Daten in der Datenbank etwas ändern, dann werden automatisch alle angezeigten Werte neu berechnet.

In diesem Beispiel sind mehrere wichtige Themen versteckt:
<ul>
	<li>Alle Daten sollten in einem Model abgelegt werden. Daten sollten nicht im Konstruktor einer Komponente aufbereitet werden.</li>
	<li>Für Modelle, die nicht an eine Komponente gebunden sind, wird die detach()-Methode <strong>nicht</strong> automatisch aufgerufen. Die CascadingLoadableDetachableModel-Klasse behandelt diesen Umstand entsprechend.</li>
	<li>Model-Klassen kann man wiederverwenden.</li>
	<li>Das Beispiel veranschaulicht, wie man z.B. die Summe aller sichtbaren Einträge über den Model-Weg ermitteln kann.</li>
</ul>

Ich hoffe, ich konnte wieder etwas Licht in das Dunkel rund um die Model-Klassen bringen. Fragen und Anregungen gerne in dem Kommentaren oder per Email.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2009-09-22 08:30:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-22 07:30:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[migration-zu-wicket-model]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="detach"><![CDATA[detach]]></category>
		<category domain="category" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386685514]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"201.47289947670424";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"175";s:5:"score";s:17:"52.37739154665234";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:18:"27.668187468801428";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:17:"25.38792980789607";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"137";s:5:"score";s:18:"15.546467483941429";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"13.537300806465142";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DataTable vs. DataView - Wicket-Komponenten wiederverwendet</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/03/datatable-vs-dataview-wicket-komponenten-wiederverwendet/</link>
		<pubDate>Sat, 03 Oct 2009 15:15:11 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[Um Daten zur Anzeige zu bringen, reicht im einfachsten Fall eine ListView-Komponente. Wenn die Anforderungen komplexer werden, macht sich der Einsatz der DataTable-Komponente recht bald bezahlt. Welche Möglichkeiten diese Komponente bietet und wie man mit ein wenig Mehraufwand auf außergewöhnliche Anforderungen reagieren kann, zeigt der folgende Beitrag.

<strong>Vorarbeiten</strong>

Damit das Beispiel für jeden Nachvollziehbar wird, müssen wir einige Vorarbeiten leisten. Zuerst erstellen wir eine Klasse, die einen Eintrag in der Datenbank symbolisiert.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.data;

import java.io.Serializable;

public class SomeBean implements Serializable
{
  String _vorname;
  
  String _name;
  
  int _alter;
  
  public SomeBean(String vorname, String name, int alter)
  {
    _vorname=vorname;
    _name=name;
    _alter=alter;
  }
  
  public String getVorname()
  {
    return _vorname;
  }

  public String getName()
  {
    return _name;
  }

  public int getAlter()
  {
    return _alter;
  }
}
</code>

Um Datensätze zu filtern, erstellen wir eine Hilfsklasse, in der die Werte für den Filter abgelegt werden.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.data;

import java.io.Serializable;

public class SomeBeanFilter implements Serializable
{
  String _name;
  String _vorname;
  
  public String getName()
  {
    return _name;
  }

  public void setName(String name)
  {
    _name = name;
  }
  
  public String getVorname()
  {
    return _vorname;
  }
  
  public void setVorname(String vorname)
  {
    _vorname = vorname;
  }
  
  public boolean match(SomeBean bean)
  {
    boolean ret=true;
    
    if (_name!=null)
    {
      if (!bean.getName().startsWith(_name)) ret=false;
    }
    if (_vorname!=null)
    {
      if (!bean.getVorname().startsWith(_vorname)) ret=false;
    }
    
    return ret;
  }
}
</code>

Damit wir nicht eine Liste von Daten von Hand erzeugen müssen, erstellen wir einen Generator, der die Datenbank simuliert.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.data;

import java.util.ArrayList;
import java.util.List;

public class SomeBeanGenerator
{
  public static List<SomeBean> getBeans(int size, SomeBeanFilter filter)
  {
    List<SomeBean> ret=new ArrayList<SomeBean>();
    
    for (int i=0;i<size;i++)
    {
      SomeBean bean = new SomeBean(getVorname(i),getName(i),getAlter(i));
      if (filter!=null)
      {
        if (filter.match(bean))
        {
          ret.add(bean);
        }
      }
      else ret.add(bean);
    }
    
    return ret;
  }
  
  private static int getAlter(int pos)
  {
    return (pos % 7) + (pos/9);
  }

  static String getVorname(int pos)
  {
    switch (pos % 5)
    {
      case 0: return "Klaus";
      case 1: return "Susi";
      case 2: return "Petra";
      case 3: return "Axel";
    }
    return "Bert";
  }
  
  static String getName(int pos)
  {
    switch (pos % 8)
    {
      case 0: return "Schmidt";
      case 1: return "Meier";
      case 2: return "Schulz";
      case 3: return "Schuster";
      case 4: return "Müller";
      case 5: return "Francis";
      case 6: return "Friedrich";
    }
    return "Sommerfeld";
  }
}
</code>

Um Daten durch die DataTable-Komponente zur Anzeige zu bringen, müssen wir das IDataProvider-Interface implementieren. Da wir die Daten auch sortieren und filtern möchten, implementieren wir zusätzlich das ISortableDataProvider und das IFilterStateLocator-Interface.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.data;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import org.apache.wicket.extensions.markup.html.repeater.data.sort.ISortState;
import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;
import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.IFilterStateLocator;
import org.apache.wicket.extensions.markup.html.repeater.util.SingleSortState;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;

public class SomeBeanDataProvider implements ISortableDataProvider<SomeBean>, IFilterStateLocator
{
  ISortState _sortState=new SingleSortState();
  SomeBeanFilter _filter=new SomeBeanFilter();
  
  final static int LIST_SIZE=123;
  private List<SomeBean> _list;
  
  public Iterator<? extends SomeBean> iterator(int first, int count)
  {
    initList();
    
    List<SomeBean> ret=_list;
    if (ret.size()>(first+count))
    {
      ret = ret.subList(first, first+count);
    }
    
    return ret.iterator();
  }

  public IModel<SomeBean> model(SomeBean object)
  {
    return Model.of(object);
  }

  public int size()
  {
    initList();
    
    return _list.size();
  }

  public void detach()
  {
    _list=null;
  }

  public ISortState getSortState()
  {
    return _sortState;
  }

  public void setSortState(ISortState state)
  {
    _sortState=state;   
  }
  
  public Object getFilterState()
  {
    return _filter;
  }

  public void setFilterState(Object state)
  {
    _filter=(SomeBeanFilter) state;
  }

  
  

  private void initList()
  {
    if (_list==null)
    {
      final int nameSort;
      final int alterSort;
      if (_sortState!=null)
      {
        nameSort = _sortState.getPropertySortOrder("name");
        alterSort = _sortState.getPropertySortOrder("alter");
      }
      else
      {
        nameSort = ISortState.NONE;
        alterSort = ISortState.NONE;
      }
      
      _list = getSortedList(nameSort, alterSort,_filter);
    }
  }


  private List<SomeBean> getSortedList(final int nameSort, final int alterSort,SomeBeanFilter filter)
  {
    List<SomeBean> result = SomeBeanGenerator.getBeans(LIST_SIZE,filter);
    
    Collections.sort(result,new Comparator<SomeBean>()
    {
      public int compare(SomeBean o1, SomeBean o2)
      {
        int compName=o1.getName().compareTo(o2.getName());
        int compAlter=new Integer(o1.getAlter()).compareTo(o2.getAlter());
        switch (nameSort)
        {
          case ISortState.NONE:
            compName=0;
            break;
          case ISortState.DESCENDING:
            compName=-compName;
            break;
        }
        switch (alterSort)
        {
          case ISortState.NONE:
            compAlter=0;
            break;
          case ISortState.DESCENDING:
            compAlter=-compAlter;
            break;
        }
        if (compName!=0) return compName;
        return compAlter;
      }
    });
    
    return result;
  }
}
</code>

<strong>Erläuterungen</strong>

Die implementieren Schnittstellen stellen im wesentlichen folgende Funktionen bereit:
<ul>
	<li>Anzahl der Einträge in der Datenbank (in unserem Beispiel fest auf 123 eingestellt)</li>
	<li>ein Ausschnitt der Einträge (von, bis)</li>
	<li>Eine Implementierung von ISortState (welche Spalte ist in welche Richtung sortiert)</li>
	<li>Ein Objekt,in dem die Filterwerte abgelegt werden (SomeBeanFilter) </li>
</ul>

Auf diese Weise kann man die Ergebnisliste sortieren, filtern und einen Ausschnitt davon darstellen. Außerdem ist bekannt, wie viel Einträge vorhanden sind.

<strong>DataTable - DefaultDataTable</strong>

Die DefaultDataTable-Komponente unterscheidet sich von der DataTable-Komponente im wesentlichen nur dadurch, dass bereits die Seitennavigation und die Spaltenüberschriften eingeblendet werden. Daher greifen wir in diesem Beispiel direkt auf diese Komponente zurück.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.datatable;

import java.util.ArrayList;
import java.util.List;

import org.apache.wicket.extensions.markup.html.repeater.data.table.DefaultDataTable;
import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;
import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;
import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.FilterForm;
import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.FilterToolbar;
import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.TextFilteredPropertyColumn;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.model.Model;

import de.wicketpraxis.web.blog.pages.questions.data.SomeBean;
import de.wicketpraxis.web.blog.pages.questions.data.SomeBeanDataProvider;

public class DataTablePage extends WebPage
{
  public DataTablePage()
  {
    List<IColumn<SomeBean>> columns=new ArrayList<IColumn<SomeBean>>();
    columns.add(new TextFilteredPropertyColumn<SomeBean,String>(Model.of("Vorname"),"vorname"));
    columns.add(new TextFilteredPropertyColumn<SomeBean,String>(Model.of("Name"),"name","name"));
    columns.add(new PropertyColumn<SomeBean>(Model.of("Alter"),"alter","alter"));
    
    SomeBeanDataProvider dataProvider=new SomeBeanDataProvider();
    
    FilterForm form=new FilterForm("form",dataProvider);
    
    DefaultDataTable<SomeBean> dataTable = new DefaultDataTable<SomeBean>("dataTable",columns,dataProvider,10);
    dataTable.addTopToolbar(new FilterToolbar(dataTable,form,dataProvider));
    form.add(dataTable);
    
    add(form);
  }
}
</code>

Zuerst definieren wir eine Liste von Spalten, in der wir dann verschieden Spaltentypen verwenden. Die TextFilteredPropertyColumn vereint die Eingabe eines Filters, die Sortierung der Spalte und die Anzeige der Spalte in einer Komponente. Da für die Spalte "Vorname" das Attribut für die Sortierung weggelassen wurde, kann nach dieser Spalte auch nicht sortiert werden. Die letzte Spalte ist die einfachste Form einer Spaltendefinition und dient nur der Anzeige. Damit die Filter zum Einsatz kommen können, muss man die Tabelle mit einem Formular umschließen. Dazu muss die FilterForm-Komponente verwendet werden. Außerdem muss man zusätzlich eine FilterToolbar hinzufügen, damit die Eingabefelder auch angezeigt werden.

Da die DataTable-Komponente generisch ist (man kann Spalten hinzufügen oder weglassen, man kann die FilterToolbar deaktivieren, etc.), muss man in so einem Fall keine Anpassungen am Markup vornehmen. Das Markup sieht daher auch recht übersichtlich aus.
<code lang="html"><html>
  <head>
    <title>DataTable Page</title>
  </head>
  <body>
    <form wicket:id="form">
      <input type="hidden" wicket:id="focus-tracker"></input>
      <input type="hidden" wicket:id="focus-restore"></input>
      <table wicket:id="dataTable"></table>
    </form>
  </body>
</html></code>

Auffällig sind hier die zwei versteckten Eingabefelder, die die Komponente für (mich nicht ganz nachvollziehbare) Javascript-Fokus-Funktionen benutzt. Außerdem muss man feststellen, dass die DataTable-Komponente einfach nur an einen Table-Tag gebunden wurde. Das restliche Markup bringt die Komponente mit. Das bedeutet gleichzeitig, dass man kaum Einfluss auf das Markup innerhalb der Tabelle hat, wenn man die Komponente nicht mit einem eigenen Markup überschreibt.

<img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/datatable-komponente-filter-sort.png" alt="datatable-komponente-filter-sort" title="datatable-komponente-filter-sort" width="379" height="361" class="aligncenter size-full wp-image-151" />

<strong>DataView</strong>

Wenn man doch mehr Kontrolle über das Markup haben möchte, kann man sich aus dem Fundus der Komponenten bedienen, die auch bei der DataTable zum Einsatz kommen. Im folgenden stellen wir eine funktionsäquivalente Komponente mit einer DataView-Komponente und anderen Komponenten nach.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.dataview;

import org.apache.wicket.extensions.markup.html.repeater.data.sort.OrderByLink;
import org.apache.wicket.extensions.markup.html.repeater.data.table.NavigatorLabel;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.navigation.paging.PagingNavigator;
import org.apache.wicket.markup.repeater.Item;
import org.apache.wicket.markup.repeater.data.DataView;
import org.apache.wicket.model.CompoundPropertyModel;

import de.wicketpraxis.web.blog.pages.questions.data.SomeBean;
import de.wicketpraxis.web.blog.pages.questions.data.SomeBeanDataProvider;
import de.wicketpraxis.web.blog.pages.questions.data.SomeBeanFilter;

public class DataViewPage extends WebPage
{
  public DataViewPage()
  {
    SomeBeanDataProvider dataProvider=new SomeBeanDataProvider();
    
    Form<SomeBeanFilter> form = new Form<SomeBeanFilter>("form",new CompoundPropertyModel<SomeBeanFilter>(dataProvider.getFilterState()));
    form.add(new TextField<String>("name"));
    form.add(new TextField<String>("vorname"));
    
    form.add(new OrderByLink("sortName","name",dataProvider));
    form.add(new OrderByLink("sortAlter","alter",dataProvider));
    
    DataView<SomeBean> dataView = new DataView<SomeBean>("dataView",dataProvider)
    {
      @Override
      protected void populateItem(Item<SomeBean> item)
      {
        item.setDefaultModel(new CompoundPropertyModel<SomeBean>(item.getModel()));
        item.add(new Label("vorname"));
        item.add(new Label("name"));
        item.add(new Label("alter"));
      }
    };
    dataView.setItemsPerPage(10);
    
    form.add(new PagingNavigator("navigator",dataView));
    form.add(new NavigatorLabel("label",dataView));
    
    form.add(dataView);
    
    add(form);
  }
}
</code>

Zuerst erstellen wir ein Formular, dass die Daten in der FilterBean des DataProviders ablegt. Wie im oberen Beispiel fügen wir alle weiteren Komponenten als Kindkomponenten zu diesem Formular hinzu. Für die Sortierung greifen wir auf die OrderByLink-Komponente zurück, die auch in der DataTable-Komponente benutzt wird. Die DataView-Komponente erwartet als Datenlieferanten ebenfalls eine IDataProvider-Implementierung. Anders als bei der DataTable greifen wir in diesem Fall nicht auf einer Liste von Spalten zurück, sondern erzeugen beliebige Komponenten, die wir dann später im Markup in die entsprechenden Spalten sortieren. Das wir für das item das DefaultModel überschreiben, dient nur zur Förderung einer gewissen Schreibfaulheit, da man sich so für jedes Label die Angabe eines Models erspart. Wir begrenzen außerdem die angezeigten Datensätze auf 10 Einträge. Der PagingNavigator und das NavigatorLabel werden ebenso in der DataTable-Komponente benutzt, so dass wir auch dafür keine eigene Komponente schreiben müssen.

Zusätzlich zum Markup definieren wir außerdem noch eine Properties-Datei, um die angezeigten Texte anzupassen (z.B. Tooltips bei den Links).
<code lang="html"><html>
  <head>
    <title>DataTable Page</title>
  </head>
  <body>
    
    <form wicket:id="form">
      <table>
        <thead>
          <tr>
            <td colspan="3">
              <span wicket:id="label"></span>
              <span wicket:id="navigator"></span>
            </td>
          </tr>
          <tr>
            <th>Vorname</th>
            <th><a wicket:id="sortName">Name</a></th>
            <th><a wicket:id="sortAlter">Alter</a></th>
          </tr>
          <tr>
            <th><input wicket:id="vorname"></th>
            <th><input wicket:id="name"></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr wicket:id="dataView">
            <td><span wicket:id="vorname"></span></td>
            <td><span wicket:id="name"></span></td>
            <td><span wicket:id="alter"></span></td>
          </tr>
        </tbody>
      </table>
    
    </form>
  </body>
</html></code>

<code lang="properties">PagingNavigator.last=Ende
PagingNavigator.first=Start
PagingNavigator.previous=Eins zurück
PagingNavigator.next=Eins weiter
PagingNavigation.page=Zur Seite ${page}
NavigatorLabel=Gezeigt wird ${from} bis ${to} von ${of}
</code>

Wie man sieht, muss man sehr viel mehr Aufwand für das richtige Markup betreiben. Allerdings eröffnen sich dadurch natürlich wesentlich mehr Möglichkeiten, direkt auf das Markup Einfluss nehmen zu können.
<img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/dataview-komponente-filter-sort.png" alt="dataview-komponente-filter-sort" title="dataview-komponente-filter-sort" width="374" height="329" class="aligncenter size-full wp-image-152" />

Im Bild sieht man die Komponente mit einem eingetragenen Wert für einen Filter und nach Alter sortiert.

<strong>Zusammenfassung</strong>

Wie man an diesem Beispiel erkennen kann, bietet Wicket sehr komplexe und mächtige Komponenten. Trotzdem kann man jederzeit eigene Anpassungen vornehmen und durch den geschickten Einsatz von Teilkomponenten recht schnell die gewünschte Flexibilität erreichen. Der Aufwand hält sich dabei in Grenzen. Allerdings fehlen das eine oder andere Mal ausreichend Dokumentationen oder Beispiele, so dass man nicht um ein Studium der Quelltexte umhinkommt. Doch je mehr Verbreitung Wicket findet, wird auch dieses Problem über kurz oder lang gelöst werden können.



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2009-10-03 16:15:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-03 15:15:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[datatable-vs-dataview-wicket-komponenten-wiederverwendet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="datatable"><![CDATA[datatable]]></category>
		<category domain="post_tag" nicename="dataview"><![CDATA[dataview]]></category>
		<category domain="post_tag" nicename="db"><![CDATA[db]]></category>
		<category domain="post_tag" nicename="listview"><![CDATA[listview]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[vgwpixel]]></wp:meta_key>
			<wp:meta_value><![CDATA[<img src="http://vg05.met.vgwort.de/na/4a95b4c08ef947cdb5b5617eadfca963" width="1" height="1" alt="">]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386677541]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:16:"99.0289804049815";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"30.57283522295203";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:18:"21.229024878897928";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"12.737414927338753";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"370";s:5:"score";s:18:"12.492190942208241";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"237";s:5:"score";s:17:"9.998576007622434";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>888</wp:comment_id>
			<wp:comment_author><![CDATA[Aniko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aniko.fenyvesi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.5.231.249]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-30 10:54:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-30 09:54:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michale, 

Danke für deinen Beitrag. Es war eine große Hilfe für mich mit Wicket die erste Schritt zu machen. 
Ich habe einige Fragen und Bemerkungen:

(0, Sprichst du English? Es wäre einfacher für mich auf English zu kommunizieren…)

1, Ich vorschlage den SomeBeanDataProvider.iterator() in die Folgende verwandeln:
        if (ret.size() &gt; (first + count)) {
            ret = ret.subList(first, first + count);
        } else {
            ret = ret.subList(first, ret.size());
        } 

2, Brauchst du keine ‚submit button’ für Filterung (filtering)? Falls nicht, wie wird die Applikation über den Zustand (oder die Änderung) der Eingabefelder informiert. 

3, Soviel ich verstehe DataView ist mehr flexibler als DataTable. Ist es richtig? Kannst du mir Beispiel geben was kann ich tun mit DataView, das kann ich mit DataTable nicht erreichen?

Danke für deine Hilfe.

Aniko]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>889</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-30 11:11:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-30 10:11:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Aniko,

> (0, Sprichst du English? Es wäre einfacher für mich auf English zu kommunizieren…)

yes.. hope good enough

> 1, Ich vorschlage den SomeBeanDataProvider.iterator() in die Folgende verwandeln:
> if (ret.size() > (first + count)) {
> ret = ret.subList(first, first + count);
> } else {
> ret = ret.subList(first, ret.size());
> }

you are right:)

> 2, Brauchst du keine ‚submit button’ für Filterung (filtering)?
> Falls nicht, wie wird die Applikation über den Zustand (oder die Änderung) der Eingabefelder informiert.

with Firefox this example will work, but InternetExplorer need a submit-Button.. so it works, if you write it into the markup..
hey, another bug you have found.. :)

> 3, Soviel ich verstehe DataView ist mehr flexibler als DataTable.
> Ist es richtig? Kannst du mir Beispiel geben was kann ich tun mit DataView, das kann ich mit DataTable nicht erreichen?

DataTable has its own markup, so it’s a little big harder to change the L&F .. so if you need more freedom, you can take a DataView and build it by your own..
The point in my blogpost is: If you need some changes, that you can NOT do with DataTable, you can build it with DataView and have much more freedom in doing so.

Michael:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>888</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>974</wp:comment_id>
			<wp:comment_author><![CDATA[Aniko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aniko.fenyvesi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.243.86.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-18 09:44:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-18 08:44:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Michael,
(Sorry about the typo in my last post.)

Thanks for your answer.

Another question:
Do you know whether I can (and if yes, how) switch _off_ the pagination in case of DataTable? I mean I would like to see all item in the first (i.e. the one and only) page.
Thanks in advance.

Aniko]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>889</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>976</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-18 14:34:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-18 13:34:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[simply use a value big enough for rowsPerPage/itemsPerPage . ..
change "dataView.setItemsPerPage(10);" to "dataView.setItemsPerPage(1000);"

mm:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>978</wp:comment_id>
			<wp:comment_author><![CDATA[Aniko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aniko.fenyvesi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.243.86.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-18 15:31:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-18 14:31:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, of course, this can be a solution. I meant some 'nice' one where I do not need to consider the possible maximal amount of the records. If there are maximum...
Anyway, thanks for answering.
Aniko]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>979</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-18 15:42:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-18 14:42:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you can build your own AbstractDataGridView implementation to match your requirements..

or...

maybe ListView is the one you want...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>978</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4667</wp:comment_id>
			<wp:comment_author><![CDATA[Mirko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mk@mkonnex.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[145.253.233.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-28 17:02:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-28 16:02:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michael,

auch ich habe Frage zu DataView: wie geht man am besten vor, wenn man z.B. nur bedingt eine Spalte rendern möchte?

Beispiel: wicket:id="vorname"

- In Java: if (bedingung) item.add(new Label("vorname")); ???
- In HTML: wie geht das?

Danke für deine Hilfe.

Mirko]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4678</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-29 12:32:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-29 11:32:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Soll die Spalte ausgeblendet werden, oder soll der Inhalt unsichtbar sein?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4667</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476913</wp:comment_id>
			<wp:comment_author><![CDATA[Canon T3I Body]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://Www.Daciafaber.ro/en/standard-lidl-store-baciului-street-cluj-napoca/img_0238-2/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[36.34.36.110]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-06 17:15:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-06 16:15:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Canon T3I Body</strong>

DataTable vs. DataView &#8211; Wicket-Komponenten wiederverwendet | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1488816928.0856891;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Praxisbuch Wicket in der Google Books</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/10/praxisbuch-wicket-google-books/</link>
		<pubDate>Sat, 10 Oct 2009 14:45:50 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[Ich bin vor kurzen durch Zufall drauf gestoßen, dass mein eigenes Buch im <a rel="nofollow" href="http://books.google.de">Google Books</a> Index erscheint. Ich wusste zwar, das der Verlag diese Option erwähnt hatte, war mir dessen aber nicht bewusst.

Nun ist dieses ein kontroverses Thema, das ich jetzt in der Rolle als Autor natürlich von einem neuen Standpunkt aus betrachten kann. Und da muss ich feststellen, dass sich meine erste Einschätzung nicht geändert hat:
<ul>
	<li>Aus Nutzersicht ist es großartig, dass man auch Bücher durchsuchen kann.</li>
	<li>Man kann auch Bücher durchsuchen, die man (noch) nicht besitzt.</li>
	<li>Ich kaufe mir ein Buch, damit ich es in der Hand halten kann und drin blättern kann, durch Notizen ergänzen kann, es an einem beliebigen Ort (mit Licht) bequem lesen kann.</li>
</ul>
Die Büchersuche ist eine gute und sinnvolle Ergänzung. Ich kann mir nicht vorstellen, das die Büchersuche ursächliche vom Kauf abhält. Vielmehr könnte der Inhalt ausschlaggebend sein, so dass natürlich ein schlechtes Buch eher verliert und daher vielleicht doch nicht gekauft wird. Das was sich als nachteilig für den Autor darstellt, sieht ein Nutzer natürlich anders. Doch die Antwort auf dieses Problem sollte eher ein höherer Anspruch an sich selbst sein.

Da ich noch häufiger Nutzer als Autor bin, finde ich diese Entwicklung natürlich großartig. Ob ich dabei einer selbstgefälligen Naivität zum Opfer gefallen bin, wird sich noch zeigen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2009-10-10 15:45:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-10 14:45:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[praxisbuch-wicket-google-books]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="books"><![CDATA[books]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[google]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386678713]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"32.52300881281808";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"16.57410821107616";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:18:"11.326510459823949";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"10.666639362843835";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"194";s:5:"score";s:17:"9.632759528645417";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Komponentenübersicht</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/16/wicket-component-overview/</link>
		<pubDate>Fri, 16 Oct 2009 06:57:45 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Ich habe in den letzten Tagen damit angefangen, die verschiedenen Componenten, die Wicket bereits in dem Basisbibliotheken bietet, zu visualisieren. Den ersten Versuch habe ich noch von Hand durchgeführt, um schnell festzustellen, dass man auf diese Weise nicht besonders schnell vorwärts kommt. Der zweite und damit aktuelle Ansatz ist da schon sehr viel versprechend. Es werden die Wicket-Quellen geparst und alle Klassendefinitionen eingelesen, die Abhängigkeiten untereinander ermittelt, verschiedene Filter angewendet um die Darstellung auf ein Thema einzugrenzen und das ganze dann mit dem dot-Programm aus dem Graphviz-Paket in ein Diagramm umgewandelt.

Die folgenden Grafiken sind das vorläufige Zwischenergebnis. Es ist nicht auszuschließen, dass es Fehler gibt. Für jeden gemeldeten Fehler bin ich daher sehr dankbar, aber auch Anregungen sind natürlich herzlich willkommen.

[caption id="attachment_161" align="aligncenter" width="450" caption="Wicket Kompontenten - Basis"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp.gv.jpg"><img class="size-medium wp-image-161" title="wicket-comp.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp.gv-450x365.jpg" alt="Wicket Kompontenten - Basis" width="450" height="365" /></a>[/caption]

[caption id="attachment_162" align="aligncenter" width="379" caption="Wicket Komponenten inklusive Extensions"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp-ext.gv.jpg"><img class="size-medium wp-image-162" title="wicket-comp-ext.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-comp-ext.gv-379x450.jpg" alt="Wicket Komponenten inklusive Extensions" width="379" height="450" /></a>[/caption]

[caption id="attachment_164" align="aligncenter" width="450" caption="Wicket Modelle"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-model.gv.jpg"><img class="size-medium wp-image-164" title="wicket-model.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-model.gv-450x406.jpg" alt="Wicket Modelle" width="450" height="406" /></a>[/caption]

[caption id="attachment_160" align="aligncenter" width="450" caption="Wicket Behavior"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-behavior.gv.jpg"><img class="size-medium wp-image-160" title="wicket-behavior.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-behavior.gv-450x97.jpg" alt="Wicket Behavior" width="450" height="97" /></a>[/caption]

[caption id="attachment_163" align="aligncenter" width="450" caption="Wicket Listener"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-listener.gv.jpg"><img class="size-medium wp-image-163" title="wicket-listener.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-listener.gv-450x219.jpg" alt="Wicket Listener" width="450" height="219" /></a>[/caption]

[caption id="attachment_165" align="aligncenter" width="450" caption="Wicket RequestTarget"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-requestTarget.gv.jpg"><img class="size-medium wp-image-165" title="wicket-requestTarget.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/10/wicket-requestTarget.gv-450x176.jpg" alt="Wicket RequestTarget" width="450" height="176" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2009-10-16 07:57:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-16 06:57:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-component-overview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="listener"><![CDATA[listener]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="post_tag" nicename="overview"><![CDATA[overview]]></category>
		<category domain="post_tag" nicename="target"><![CDATA[target]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386680012]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"102.63608316530056";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"210";s:5:"score";s:18:"41.531131080000335";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"270";s:5:"score";s:17:"37.20538901520793";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"34.38015443372959";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"225";s:5:"score";s:17:"33.92093354435572";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:17:"29.45416964438659";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>853</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets die Wicket Komponentenübersicht | wicket praxis erwähnt -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/AD99u</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-16 09:50:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-16 08:50:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Dieser Eintrag wurde auf Twitter von Nick Wiedenbrueck und mosmann, mosmann erwähnt. mosmann sagte: New blog post: Wicket Komponentenübersicht http://bit.ly/AD99u [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>854</wp:comment_id>
			<wp:comment_author><![CDATA[Hbiloo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[waarheid08@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[62.177.129.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-16 11:12:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-16 10:12:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great job man.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicketbuch aus dem dpunkt Verlag</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/19/wicket-dpunkt-verlag/</link>
		<pubDate>Mon, 19 Oct 2009 11:50:05 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=168</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket ist ein Webframework, dass bereits heute eine hohe Popularität genießt. Es werden zunehmen Projekte mit Wicket realisiert, das Angebot an freien Komponenten ist enorm groß (Wicket Stuff) und die Community erfreut such großer Beliebtheit. Trotzdem gibt es Widerstand aus den lagern der etablierten Frameworks, die daran zweifeln, dass Wicket auch für sogenannte "Enterprise"-Anwendungen geeignet ist (einen Beweis, dass JSF geeignet ist, hat IMHO auch noch niemand geliefert). Wie bei jedem neuen Framework sollte man sich auf der einen Seite damit beschäftigen, aber auf der anderen Seite auch abwägen, ob das Framework eine Zukunft hat. Gerade der letzte Punkt ist besonders schwer einzuschätzen und ist nur indirekt messbar, in dem man z.B. die veröffentliche Literatur zu diesem Thema als Anhaltspunkt für eine Bewertung nimmt. Und da sieht es eigentlich ganz gut aus, denn es gibt neben den einglischsprachigen auch bereits zwei deutsche Bücher zum Thema.

Man profitiert selbst als erfahrender Entwickler von Ideen und Sichtweisen, die andere Entwickler bei der Lösung ihrer Probleme gesammelt haben. Daher lese ich die verschiedenen Blogs, Erfahrungsberichte und Beiträge auf der Mailingliste. Aus diesem Grund habe ich das andere deutsche Wicketbuch aus dem <a rel="nofollow" href="http://www.dpunkt.de/buecher/2921.html" target="_blank">dpunkt</a> Verlag bereits fest eingeplant und musste nun leider feststellen, dass das Erscheinungsdatum auf den Januar 2010 verschoben wurde.

Es werden einfach noch zu viele Projekte mit <a href="http://ptrthomas.wordpress.com/2009/05/15/jsf-sucks/" target="_blank">JSF</a> umgesetzt. Ein zweites deutsches Buch sollte eigentlich Signal genug sein, dass Wicket eine ernst zu nehmende Alternative ist. Ich drücke den Autoren die Daumen, dass sie das Projekt erfolgreich abschließen (ich weiß, wie hart das sein kann) und freue mich auf neue Erkenntnisse und Sichtweisen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2009-10-19 12:50:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-19 11:50:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-dpunkt-verlag]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
		<category domain="post_tag" nicename="buch"><![CDATA[buch]]></category>
		<category domain="post_tag" nicename="dpunkt"><![CDATA[dpunkt]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386697990]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"93.24225656015221";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"55.02130967454888";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"125";s:5:"score";s:17:"27.08788684710949";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"247";s:5:"score";s:18:"24.614088067874484";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"143";s:5:"score";s:16:"8.33730185416636";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"7.840379136189079";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Tipps: Markup</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/27/wicket-tipps-markup/</link>
		<pubDate>Tue, 27 Oct 2009 07:05:16 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[Ich benutze für alle Projekte Maven. Der eine oder andere mag mit Maven auf dem Kriegsfuß stehen (was ich zwar nicht verstehe, aber akzeptiere). Bisher war ich (und an anderer Stelle war es auch nicht notwendig, darüber nachzudenken) für eine saubere Trennung von Code und Resourcen. Das bedeutet z.B. das der Code einer Wicket-Komponente z.B. im Pfad src/main/java/de/wicketpraxis/ zu finden ist und das Markup in src/main/resources/de/wicketpraxis.

Das Projekt wächst und gedeiht und es entstehen unzählige Komponenten (ein Zeichen dafür, dass man mit Wicket sehr sehr einfach eigene Komponenten erstellen kann).&nbsp; Im Laufe der Zeit hat es sich als unpraktisch herausgestellt, in der IDE immer zwischen diesen beiden Verzeichnissen zu wechseln. Auch beim Refactoring kann es sich als lästig erweisen, weil man an zwei Stellen die selbe Operation anwenden muss (zumindest in Eclipse).

Ich habe daher alle Projekte umgestellt und kann nun die Markup-Dateien in das selbe Verzeichnis/Package wie die Komponente legen. Die Angst, dass die Übersichtlichkeit leidet, hat sich als unbegründet erwiesen, die Produktivität ist spürbar besser. Folgende Anpassung muss man daher in einem Projekt vornehmen. In der pom.xml ist folgender Block einzufügen:

<code lang="xml">  <build>
...
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>
    </resources>
...
  </build>
</code>

Wenn man nun die Anwendung über Jetty aus dem Projekt heraus starten möchte, empfiehlt sich ein Ansatz, den ich bereits im folgenden Beitrag erwähnt habe: <a href="http://www.wicket-praxis.de/blog/2008/12/31/wicket-resourcen-mit-jetty-nachladen/" target="_blank">Wicket Resourcen mit Jetty nachladen</a>. Allerdings müssen wir dazu den angepassten ResourceStreamLocator entsprechend erweitern. Am besten wir schreiben eine neue Klasse:

<code lang="java5">package de.wicketpraxis.wicket.util.resource;

import org.apache.wicket.util.file.File;
import org.apache.wicket.util.resource.FileResourceStream;
import org.apache.wicket.util.resource.IResourceStream;
import org.apache.wicket.util.resource.locator.ResourceStreamLocator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MavenDevResourceAndSourceStreamLocator extends ResourceStreamLocator
{
  private static final Logger _logger = LoggerFactory.getLogger(MavenDevResourceAndSourceStreamLocator.class);
  
  final static String MAVEN_RESOURCE_PATH="src/main/resources/";
  final static String MAVEN_JAVASOURCE_PATH="src/main/java/";
  
  @Override
  public IResourceStream locate(final Class<?> clazz, final String path)
  {
    IResourceStream located=getFileSysResourceStream(MAVEN_RESOURCE_PATH,path);
    if (located==null)
    {
      located=getFileSysResourceStream(MAVEN_JAVASOURCE_PATH,path);
    }
    if (located != null)
    {
      if (_logger.isInfoEnabled()) _logger.info("Locate: " + clazz + " in " + path+" -> "+located);
      return located;
    }
    located=super.locate(clazz, path);
    if (_logger.isInfoEnabled()) _logger.info("Locate: " + clazz + " in " + path+" -> "+located+"(Fallback)");    
    return located;
  }

  private static IResourceStream getFileSysResourceStream(String prefix, String path)
  {
    File f=new File(prefix+path);
    if ((f.exists()) && (f.isFile()))
    {
      return new FileResourceStream(f);
    }
    return null;
  }
}
</code>

Die Einbindung funktioniert wie beim letzten Mal:
<code lang="java5">if (DEVELOPMENT.equalsIgnoreCase(configurationType))
{
  getResourceSettings().setResourceStreamLocator(new MavenDevResourceAndSourceStreamLocator());
}
</code>

Jetzt sollte man (wenn alles andere entsprechend vorbereitet ist) mit <strong>mvn jetty:run -Dwicket.configuration=development</strong> Jetty aus dem Projekt heraus starten können. Sobald man Änderungen am Markup vorgenommen hat, werden diese neu geladen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2009-10-27 08:05:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-27 07:05:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-tipps-markup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="jetty"><![CDATA[jetty]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="reload"><![CDATA[reload]]></category>
		<category domain="post_tag" nicename="resource"><![CDATA[resource]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386709578]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:18:"267.28948714537563";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:18:"109.87625107318948";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"229";s:5:"score";s:17:"44.22596462250109";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"29.44438274797521";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"352";s:5:"score";s:17:"26.12455849357798";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"327";s:5:"score";s:18:"24.307518775671916";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Model Transformation</title>
		<link>http://www.wicket-praxis.de/blog/2009/10/28/wicket-model-transformation/</link>
		<pubDate>Wed, 28 Oct 2009 06:11:48 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[Eine Liste von Ergebnissen aus einer Tabelle in der Datenbank zu laden und über ein Model zur Verfügung zu stellen, ist eine recht einfache Angelegenheit. Wicket sorgt dafür, dass die Liste kein zweites mal geladen wird, nur weil das Model durch eine zweite Komponente dargestellt wird. Wenn man z.B. so triviale Dinge wie die Summe aller angezeigten Einträge ermitteln möchte, empfiehlt es sich, auf die bereits geladenen Daten aus dem Model zurückzugreifen. Für diesen Zweck kann man auf eine <a href="http://www.wicket-praxis.de/blog/2009/01/03/modell-referenzen/">spezialisierte Model-Klasse</a> zurückgreifen, die sich darum kümmert, das die detach()-Methode auch für alle referenzierten Modelle aufgerufen wird. Der Ansatz ist recht einfach, aber es geht vielleicht noch ein wenig eleganter.

<strong>Die Transformation</strong>

Als erstes definieren wir Klassen, die für die Transformation sorgen. Da in unserem Beispiel nicht nur ein Model, sondern auch zwei oder drei Model-Referenzen benutzt werden und damit bis zu drei Parametern übergeben werden können, müssen wir auch drei unterschiedliche Schnittstellen definieren:

<code lang="java5">package de.wicketpraxis.wicket.model.transformation;

import java.io.Serializable;

public interface Function1<T,M1> extends Serializable
{
  public T apply(M1 value);
}
</code>

<code lang="java5">package de.wicketpraxis.wicket.model.transformation;

import java.io.Serializable;

public interface Function2<T,M1,M2> extends Serializable
{
  public T apply(M1 value,M2 value2);
}
</code>

<code lang="java5">package de.wicketpraxis.wicket.model.transformation;

import java.io.Serializable;

public interface Function3<T,M1,M2,M3> extends Serializable
{
  public T apply(M1 value,M2 value2, M3 value3);
}
</code>

Da die verschiedenen Modelle auch verschiedene Daten bereitstellen können, kann jeder Parameter einen eigenen Typ annehmen. Jetzt benötigen wir ein Model, dass die Daten der referenzierten Modelle lädt und der Funktion übergibt und sich das Ergebnis bis zum Aufruf von detach() merkt.

<code lang="java5">package de.wicketpraxis.wicket.model.transformation;

import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;

public abstract class Transformator<T> extends LoadableDetachableModel<T>
{
  IModel<?>[] _subModels;
  
  protected Transformator(IModel<?> ... subModels)
  {
    _subModels=subModels;
  }
  
  @Override
  protected void onDetach()
  {
    for (IModel<?> m : _subModels)
    {
      m.detach();
    }
  }
  
  public static class Model1<T,M1> extends Transformator<T>
  {
    IModel<M1> _m1;
    Function1<T, M1> _function;
    
    public Model1(IModel<M1> m1, Function1<T, M1> function)
    {
      super(m1);
      
      _m1=m1;
      _function=function;
    }
    
    @Override
    protected T load()
    {
      return _function.apply(_m1.getObject());
    }
  }
  
  public static class Model2<T,M1,M2> extends Transformator<T>
  {
    IModel<M1> _m1;
    IModel<M2> _m2;
    Function2<T, M1, M2> _function;
    
    public Model2(IModel<M1> m1, IModel<M2> m2, Function2<T, M1, M2> function)
    {
      super(m1,m2);
      
      _m1=m1;
      _m2=m2;
      _function=function;
    }
    
    @Override
    protected T load()
    {
      return _function.apply(_m1.getObject(),_m2.getObject());
    }
  }

  public static class Model3<T,M1,M2,M3> extends Transformator<T>
  {
    IModel<M1> _m1;
    IModel<M2> _m2;
    IModel<M3> _m3;
    Function3<T, M1, M2, M3> _function;
    
    public Model3(IModel<M1> m1, IModel<M2> m2, IModel<M3> m3, Function3<T, M1, M2, M3> function)
    {
      super(m1,m2,m3);
      
      _m1=m1;
      _m2=m2;
      _m3=m3;
      _function=function;
    }
    
    @Override
    protected T load()
    {
      return _function.apply(_m1.getObject(),_m2.getObject(),_m3.getObject());
    }
  }
}
</code>

Das war jetzt ein größerer Block, der aber eigentlich nur aus 3 fast gleichen Klassendefinitionen bestand, die leider nicht viel besser zusammenzuführen sind. Wichtig ist dabei die Übergabe aller Model-Referenzen an die Basisklasse, die sich in der onDetach()-Methode (die von der detach()-Methode nur aufgerufen wird, wenn für das Model noch nicht detach() aufgerufen wurde) um das Aufrufen der detach()-Methode dieser Modelle kümmert.

Noch ist dieses ganze Konstrukt nicht viel besser handhabbar als die bisher favorisierte Lösung. Wir benötigen daher noch ein paar Hilfsklassen.

<code lang="java5">package de.wicketpraxis.wicket.model.transformation;

import org.apache.wicket.model.IModel;

public abstract class ModelSet
{
  public static class Set1<M1>
  {
    IModel<M1> _m1;
    
    public Set1(IModel<M1> m1)
    {
      _m1=m1;
    }
    
    public <T> IModel<T> apply(Function1<T, M1> function)
    {
      return new Transformator.Model1<T, M1>(_m1,function);
    }
  }
  
  public static class Set2<M1,M2>
  {
    IModel<M1> _m1;
    IModel<M2> _m2;
    
    public Set2(IModel<M1> m1,IModel<M2> m2)
    {
      _m1=m1;
      _m2=m2;
    }
    
    public <T> IModel<T> apply(Function2<T, M1, M2> function)
    {
      return new Transformator.Model2<T, M1, M2>(_m1,_m2,function);
    }
  }

  public static class Set3<M1,M2,M3>
  {
    IModel<M1> _m1;
    IModel<M2> _m2;
    IModel<M3> _m3;
    
    public Set3(IModel<M1> m1,IModel<M2> m2,IModel<M3> m3)
    {
      _m1=m1;
      _m2=m2;
      _m3=m3;
    }
    
    public <T> IModel<T> apply(Function3<T, M1, M2, M3> function)
    {
      return new Transformator.Model3<T, M1, M2, M3>(_m1,_m2,_m3, function);
    }
  }
}
</code>

Wir man erkennen kann, bestehen diese Klassen auch wieder aus drei Kopien, die mehr oder weniger die selbe Funktion, nur andere Parameter haben. Bis jetzt muss das Bild noch verschwommen sein, mit dem letzten Baustein sollte es sich klären.

<code lang="java5">package de.wicketpraxis.wicket.model;

import org.apache.wicket.model.IModel;

import de.wicketpraxis.wicket.model.transformation.ModelSet;

public abstract class Models
{
  public static <T,M1> ModelSet.Set1<M1> on(IModel<M1> model)
  {
    return new ModelSet.Set1<M1>(model);
  }
  public static <T,M1,M2> ModelSet.Set2<M1,M2> on(IModel<M1> model,IModel<M2> model2)
  {
    return new ModelSet.Set2<M1,M2>(model,model2);
  }
  public static <T,M1,M2,M3> ModelSet.Set3<M1,M2,M3> on(IModel<M1> model,IModel<M2> model2,IModel<M3> model3)
  {
    return new ModelSet.Set3<M1,M2,M3>(model,model2,model3);
  }
}
</code>

Fertig. Nun, vielleicht noch nicht ganz. Wir haben eine ganze Reihe von Klassen, eine ganze Menge Code, um die selben Anforderungen zu Erfüllen, wie mit dem im ersten Moment sehr viel einfacher gehaltenen Model-Ansatz aus dem anderen Artikel? Sehen wir uns daher das ganze in der Anwendung an.

<strong>Beispiel</strong>

In dem folgenden Beispiel benötigen wir ein Model, das eine Zufallszahl bereitstellt:

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model.transformation;

import org.apache.wicket.model.LoadableDetachableModel;

public class RandomNumberModel extends LoadableDetachableModel<Double>
{
  @Override
  protected Double load()
  {
    return Math.random();
  }
}
</code>

Diese Modell benutzen wir auf einer Seite als Datenquelle:

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model.transformation;

import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.IModel;
import org.apache.wicket.util.time.Duration;

import de.wicketpraxis.wicket.model.Models;
import de.wicketpraxis.wicket.model.transformation.Function1;
import de.wicketpraxis.wicket.model.transformation.Function2;

public class TransformationPage extends WebPage
{
  public TransformationPage()
  {
    IModel<Double> randModel1=new RandomNumberModel();
    IModel<Double> randModel2=new RandomNumberModel();
    
    IModel<Double> diffResult = Models.on(randModel1, randModel2)
      .apply(new Function2<Double, Double, Double>()
    {
      public Double apply(Double value, Double value2)
      {
        return value-value2;
      }
    });
    
    IModel<Integer> scaleResult = Models.on(randModel1)
      .apply(new Function1<Integer, Double>()
    {
      public Integer apply(Double value)
      {
        return (int)(value*100);
      }
    });
    
    WebMarkupContainer ajaxUpdate=new WebMarkupContainer("ajaxUpdate");
    ajaxUpdate.setOutputMarkupId(true);
    ajaxUpdate.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(1)));
    
    ajaxUpdate.add(new Label("rand1",randModel1));
    ajaxUpdate.add(new Label("rand2",randModel2));
    ajaxUpdate.add(new Label("diffResult",diffResult));
    ajaxUpdate.add(new Label("scaleResult",scaleResult));
    
    add(ajaxUpdate);
  }
}
</code>

In diesem Beispiel erstellen wir zwei unabhängige Modelle für jeweils zwei Zufallszahlen. Diese werden über zwei Funktionsinstanzen manipuliert und als Model bereitgestellt. Dabei ist zu beachten, dass nicht das Ergebnis als Model bereitgestellt wird, sondern dass ein Model erzeugt wird, bei dem beim ersten Aufruf von getObject() die load()-Methode des LoadableDetachedModel aufgerufen wird, dass dann dort die Daten aus den referenzierten Modellen ermittelt und durch die Funktion transformiert. Das Ergebnis wird bis zum Aufruf von detach() (durch die angebundene Komponente) gepuffert.

Damit die Zufallszahlen immer wieder erzeugt werden, lassen wir die Anzeige sich per Ajax selbsttätig aktualisieren.

<code lang="html"><html>
  <head>
    <title>Transformation Page</title>
  </head>
  <body>
    <h1>Zufallszahlen</h1>
    <div wicket:id="ajaxUpdate">
      <table>
        <tr>
          <td>Nummer 1</td><td><span wicket:id="rand1"></span></td>
        </tr>
        <tr>
          <td>Nummer 2</td><td><span wicket:id="rand2"></span></td>
        </tr>
        <tr>
          <td>Number 1*100</td><td><span wicket:id="scaleResult"></span></td>
        </tr>
        <tr>
          <td>Number 1-Nummer 2</td><td><span wicket:id="diffResult"></span></td>
        </tr>
      </table>
    </div>
  </body>
</html></code>

<strong>Fazit</strong>

Wo liegt jetzt der Vorteil? Zum einen sind die Implementierungen einfacher, da laut Schnittstellendefinition nur eine Methode implementiert werden muss. Zum anderen muss man nicht die benutzten Model-Klassen kennen, die diese Transformationen durchführen. Die Lesbarkeit ist wesentlich besser, weil aus dem Code abgeleitet werden kann, was da in etwa passiert.

Ist das der Weisheit letzter Schluss? Vermutlich nicht. Anregungen sind daher willkommen.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2009-10-28 07:11:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-28 06:11:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-model-transformation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="detach"><![CDATA[detach]]></category>
		<category domain="post_tag" nicename="loadabledetachedmodel"><![CDATA[loadableDetachedModel]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="referenzen"><![CDATA[referenzen]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386690503]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"209.20764356308464";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"143";s:5:"score";s:17:"52.37739154665234";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"37.425726851136666";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:17:"32.74474606239464";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"27.872847276721135";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:18:"27.668187468801428";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Theme - CSS-Layout für Wicket-Anwendungen</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/03/wicket-theme-css-layout-fur-wicket-anwendungen/</link>
		<pubDate>Tue, 03 Nov 2009 07:27:34 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Das Auge isst mit.</strong>

Unter diesem Stichpunkt könnt man wohl einen wesentlichen Aspekt der Anwendungsentwicklung zusammenfassen. Denn gerade in der Web-Entwicklung geht es oft um das Aussehen einer Anwendung. Im Unterschied zu Desktop-Anwendungen muss man sich als Webentwickler oft bereits am Anfang damit beschäftigen, die Anwendung durch einbinden von CSS-Definitionen nach etwas aussehen zu lassen. Unzulänglichkeiten von CSS und die schlechte Browser-Unterstützung machen diesen Teil der Entwicklung schwerer als nötig.

Das das Aussehen einen nicht unwesentlichen Anteil am Erfolg eines Frameworks hat, kann man gut an Grails/Rails sehen. Denn von Anfang an kommt eine Grails-Anwendung gefällig daher. Dabei geht es nicht darum, dass der Stil jedem gefällt, sondern das eine Grails-Anwendung eben nicht wie eine Web1.0 Seite aussieht.

Und genau da hat Wicket noch Potential. Deshalb habe ich mich entschieden, ein entsprechendes WicketStuff-Projekt zu starten, dass so einfach wie möglich eingebunden und benutzt werden kann, so dass man recht schnell und einfach eine ganz nett aussehende Anwendung entwickeln kann, die auch das Auge anspricht. Das wird sicher noch eine wenig Zeit benötigen, doch vorab schon einmal ein Screenshot, der zeigt, dass man ohne zusätzliche CSS-Klassen im eigenen Markup bereits ansehnliche Ergebnisse erhalten kann:

[caption id="attachment_187" align="aligncenter" width="450" caption="Wicket Theme Vorschau"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/wicket-theme.jpg"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/wicket-theme-450x361.jpg" alt="Wicket Theme Vorschau" title="wicket-theme" width="450" height="361" class="size-medium wp-image-187" /></a>[/caption]

Alles weitere demnächst hier im Blog.. wer helfen mag, ist herzlich eingeladen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2009-11-03 08:27:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-03 07:27:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-theme-css-layout-fur-wicket-anwendungen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="theme"><![CDATA[theme]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicketstuff"><![CDATA[wicketstuff]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386697814]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"36.005941725713484";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:17:"31.76200740305076";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"192";s:5:"score";s:18:"3.8724360693399724";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:18:"1.6558313778086593";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"1.5715354712540692";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:17:"1.355454917145338";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>903</wp:comment_id>
			<wp:comment_author><![CDATA[t3_chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[c.reiter@gmx.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.64.144.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-03 09:10:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-03 08:10:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Super, das klingt ja sehr vielversprechend! Ich freue mich schon darauf.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>909</wp:comment_id>
			<wp:comment_author><![CDATA[Dirk]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[phpmedia@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-04 09:14:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-04 08:14:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[das fehlt auf jeden Fall bei Wicket noch. 

Das Auge isst halt mit :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1001</wp:comment_id>
			<wp:comment_author><![CDATA[Matthias]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mh@hampelnet.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.18.18.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-20 14:57:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-20 13:57:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kann man den Entwurf zum testen und mithelfen schon bekommen?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1002</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-20 15:35:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-20 14:35:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wenn man Zugriff auf das Wicket-Stuff Projekt bei SourceForge hat (email an die wicket-dev mailingliste unter angabe einer gültigen sf.net-id), dann findet man das Teilprojekt im trunk unter wicketstuff-core/theme-parent.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1001</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1371</wp:comment_id>
			<wp:comment_author><![CDATA[Anfang und Ende | wicket praxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.wicket-praxis.de/blog/2010/01/02/anfang-und-ende/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.198.25.105]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-02 18:28:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-02 17:28:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] und andere noch unbekannte Entwicklungen. Ich erwarte außerdem (unabhängig von meinem eigenen Teilprojekt auf wicketstuff.org) ein paar Standardvorlagen für [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476671</wp:comment_id>
			<wp:comment_author><![CDATA[chiropractic clinic in Beverly Hills]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://Www.Yelp.com/biz/jochen-chiropractic-and-wellness-center-beverly-hills</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[23.94.244.84]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-20 23:59:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-20 22:59:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>chiropractic clinic in Beverly Hills</strong>

Wicket Theme &#8211; CSS-Layout für Wicket-Anwendungen | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1487631575.4671371;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>PropertyModel - einfach ist nicht immer gut</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/04/dont-use-property-model-at-all/</link>
		<pubDate>Wed, 04 Nov 2009 07:17:20 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[Ich bin kürzlich über ein Stück Code gestolpert, der mich zum nachdenken brachte. Um zu illustrieren, welcher Umstand dafür verantwortlich war, benötige ich diesemal am schon Anfang ein paar Zeilen Code. Die folgende Hilfsklasse dient nur dazu, bei dem einzig möglichen Methodenaufruf eine Liste von Daten zu erzeugen:

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model.property;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;

public class Generator implements Serializable
{
  public List<String> findAll()
  {
    return Arrays.asList("fun","with","wicket");
  }
}
</code>

Der Generator dient hier als Platzhalter für eine wie auch immer gelagerte Datenschicht.

<code lang="java5">package de.wicketpraxis.web.blog.pages.migration.model.property;

import java.util.List;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;

import de.wicketpraxis.wicket.model.Models;
import de.wicketpraxis.wicket.model.transformation.Function1;

public class UseOrNotUsePropertyModelPage extends WebPage
{
  public UseOrNotUsePropertyModelPage()
  {
    final Generator gen=new Generator();
    
    IModel<List<String>> model = new LoadableDetachableModel<List<String>>()
    {
      protected List<String> load()
      {
        return gen.findAll();
      };
    };
        
    model=new PropertyModel<List<String>>(gen,"findAll");
    
    add(new ListView<String>("list",model)
    {
      @Override
      protected void populateItem(ListItem<String> item)
      {
        item.add(new Label("value",item.getModel()));
      }
    });
  }
}
</code>

Da es nicht meine Art ist, unvollständigen Code abzubilden, kommt auch hier erst das Markup und dann die Erklärung:

<code lang="html"><html>
  <head>
    <title>PropertyModel Usage Page</title>
  </head>
  <body>
    <h1>Liste</h1>
    <ul>
      <li wicket:id="list"><span wicket:id="value"></span></li>
    </ul>
  </body>
</html></code>

<strong>Was ist an diesem Beispiel bemerkenswert?</strong>

Am Anfang erzeuge ich ein Model über eine LoadableDetachableModel-Implementierung, die die Daten aus dem Methodenaufruf zurück gibt. Das ist nichts neues und wurde bereits oft behandelt. Diese Model-Instanz wird in der folgenden Zeile mit einer PropertyModel-Instanz überschrieben. Es ist unstrittig, dass dieser Ansatz funktioniert. Die Methode wird per Reflection aufgerufen und die Werte werden per getObject() zurückgeliefert. Doch wo liegt das Problem?

<strong>Refactoring</strong>

Die Zeile Code, die man erhält, wenn man das PropertyModel benutzt und die Methode aufzurufen ist angenehm kurz. Aber diese Kürze gibt es nicht umsonst, sondern man muss dafür zahlen. In Bezug auf das Thema Refactoring sogar zwei mal. Das erste Problem ist offensichtlich: Wenn sich der Methodenname ändert (oder Parameter hinzukommen) wird der Aufruf per Reflection nicht mehr funktionierten (oder sogar eine falsche Methode aufrufen), und man erhält zur Laufzeit eine Fehlermeldung.

Der zweite Punkt ist weniger offensichtlich, aber vielleicht noch schwer wiegender, weil zur Laufzeit der Fehler an einer anderen Stelle zu Tage tritt: Der Rückgabewert der Methode wird angepasst. Der Fehler würde in unserem Fall dann vermutlich nur in der Darstellung der ListView auftreten, so dass statt "fun with wicket" möglicherweise "SomeData@65b778 SomeData@32ac12" angezeigt wird. Es kommt also noch nicht mal zu einem Laufzeitfehler.

<strong>Performance</strong>

In einem anderen Bereich (der in unserem Beispiel nebensächlich ist) funktioniert die PropertyModel-Variante nicht wie erwartet. Wenn die Methode getObject() aufgerufen wird, wird immer die entsprechende Methode per Reflection aufgerufen. Das bedeutet, die Ergebnisse werden nicht wie beim LoadableDetachedModel zwischengespeichert. Würde ich das Model an zwei ListView-Komponenten binden, würde die Liste zweimal erzeugt werden. Je nach Aufwand der Erzeugung ist das ein eher unerwünschtes Ergebnis. Außerdem kann es natürlich dazu kommen, dass sich die jeweiligen Rückgabewerte unterscheiden, so dass der Nutzer im Zweifel inkonsistente Daten angezeigt bekommt.

<strong>Das PropertyModel ist nützlich</strong>

Man sollte nach dem Lesen der Zeilen die Verwendung des PropertyModel nicht verbieten, denn Aufwand und Nutzen sind für die Entstehung dieser Model-Klasse verantwortlich. Um die Eingaben aus einem Formularfeld in einem Attribut einer JavaBean zu speichern sollte man das PropertyModel einsetzen, weil der Mehraufwand für eine typsichere (und damit durch normale Refactoring-Operationen greifbare) Variante enorm hoch ist. Ich würde mir wünschen, das Java Sprachmittel bereitstellt, die es ermöglicht, Methoden nicht nur per Reflection zu ermitteln, so dass man gerade für diesen Fall kompakten und trotzdem typsicheren Code schreiben kann. Bis dahin sollte man diese Model-Klasse überlegt verwenden, dann kann eigentlich gar nicht soviel schief gehen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2009-11-04 08:17:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-04 07:17:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dont-use-property-model-at-all]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="detached"><![CDATA[detached]]></category>
		<category domain="post_tag" nicename="loadable"><![CDATA[loadable]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="post_tag" nicename="property"><![CDATA[property]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386685007]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"130.51239903482244";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"50.969297069207784";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"175";s:5:"score";s:17:"32.74474606239464";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:18:"29.936412578946936";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:17:"29.45416964438659";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"29.006805626049157";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9773</wp:comment_id>
			<wp:comment_author><![CDATA[Carsten]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carsten.holzmueller@exedio.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[77.189.170.140]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-10 15:47:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-10 14:47:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dein Wunsch wird dir gewährt.
Java 8 wird wohl die Ergebnisse des Lambda-Projekts beinhalten:
http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html

Es wird keine Funktionstypen geben (Gott sei Dank! Was man damit alles für fürchterlichen Code ermöglicht), sondern eine Syntax mit der man leichter anonyme Klassen anlegen kann. Indem man sich dabei sehr einschränkt (z.B. darf es nur eine abstrakte Methode geben), hält man die Syntax sehr kurz.

Ich denke Wicket profitiert sehr von dieser Neuerung.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Praxisbuch Wicket - Feedback</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/06/praxisbuch-wicket-feedback/</link>
		<pubDate>Fri, 06 Nov 2009 07:25:38 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[Mein erstes Buch ist ein Erfolg. Zumindest für mich. Nicht im finanziellen Sinn, sondern in Bezug auf Dinge, die ich dabei gelernt habe. Das es z.B. sehr schwer ist, bei einem Framework wie Wicket eine Struktur zu finden, die leicht zu verstehen ist. Was ist diese Model-Klasse? Was ist eine Komponente? Erklärt man Komponenten, bevor man die Model-Klasse erklärt hat? Kann man das überhaupt? .. Viele Fragen mit mehr als einer Antwort.

Da es mein erstes eigenes (ok, ich war an einem Wordpress-Buch beteiligt) Buch war, betrat ich in vielen Disziplinen Neuland. Da ist es gut, wenn man jemanden hat, der zurück spielt, was man anders machen müsste, was unverständlich ist. Nach dem erscheinen des Buches gab es sehr viele Rückmeldungen, die durchweg positiv waren. Ich war ehrlich gesagt ein wenig überrascht, weil ich wohl manchmal auch ein wenig zu selbstkritisch bin. Soweit ich sehen konnte, fand das Buch nicht nur Anklang bei Entwicklern, die erst neu in die Webentwicklung mit Java eingestiegen sind. Auch Entwickler, die bereits professionell mit Wicket arbeiten, haben das Buch gelobt. Das das der Seele schmeichelt ist unstrittig. Danke für all die positiven Worte. Natürlich gab es auch Fehler in den Texten, unverständliche Stellen, alles was bei einem Buch so "schief" gehen kann. Diese konstruktiven Hinweise sind sehr hilfreich, weil sie mir zeigen, wo ich vielleicht schon betriebsblind war.

Es liegt in der Natur der Dinge, dass man nicht jeden glücklich machen kann, da Menschen zum Glück nicht gleich sind. Das jemand besser mit einem anderen Buch zurechtkommt, ist zu erwarten. Dass die Art und Weise, wie ich Dinge erkläre, nicht bei jedem ankommt, damit habe ich gerechnet. Daher war ich überrascht, dass bei Amazon doch sehr unterschiedliche Kundenbewertungen (<a href="http://www.amazon.de/Praxisbuch-Wicket-Professionelle-Web-2-0-Anwendungen-entwickeln/dp/3446419098/ref=sr_1_1?ie=UTF8&s=books&qid=1257490413&sr=1-1" target="_blank">Praxisbuch Wicket</a> bei Amazon) zustande gekommen sind.

Daher habe ich eine Bitte, einen Wunsch. Es wäre sehr schön, wenn ich mehr Rückmeldung bekommen würde (entweder als Rezension bei Amazon, als Kommentar in diesem Blog oder per Email (würde ich gern im Blog veröffentlichen (natürlich anonym, wenn gewünscht))). <strong>Dabei ist mir wichtig, zu betonen, dass es hier nicht darum geht, mir zu schmeicheln.</strong> Ich versuche dann, die Dinge, die ich bereits gut gemacht habe, beizubehalten und Dinge, die man besser machen kann, zu verbessern.

Danke:)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2009-11-06 08:25:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-06 07:25:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[praxisbuch-wicket-feedback]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="feedback"><![CDATA[feedback]]></category>
		<category domain="post_tag" nicename="praxisbuch"><![CDATA[praxisbuch]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386683488]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:18:"122.70378679536478";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"43.783145954175964";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"26.06465899499625";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"25.009686215704054";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:18:"11.326510459823949";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket nicht nur für Einsteiger</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/11/wicket-nicht-nur-fur-einsteiger/</link>
		<pubDate>Wed, 11 Nov 2009 08:03:43 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[Ich durfte an einem Projekt teilhaben, in dem für eine neu zu erstellende Anwendung Wicket eingesetzt wurde. Am Anfang wurde das Projekt entsprechend der Anforderungen aufgesetzt (Maven, Hibernate, Spring, Wicket) und der Rahmen der Anwendung geschaffen (Konfiguration der Datenbank, Unittests, etc.). Nach einer doch recht kurzen Einführung in Wicket wurde die Anwendung ohne fremde Hilfe (wenn man mal Google mal ausklammert) entwickelt und mit immer mehr Funktionen angereichert. Gestern habe ich mir den aktuellen Stand angesehen und musste feststellen, dass entgegen meinen Erwartungen eine recht vernünftige Anwendung entstanden ist.

<strong>Warum habe ich das so nicht erwartet?</strong>

In dem Projekt war bisher wenig bis kein Wissen über Java und die benutzten Frameworks vorhanden. In der kurzen Einführung konnten weder die Sprache, noch die verwendeten Technologien ausführlich genug erklärt werden. Das bedeutet normalerweise, dass die Lösungen, die bei solchen Unterfangen entstehen, verschiedenste Defizite aufweisen. Neben der Tatsache, dass die Anwendung funktioniert (sicher gibt es noch irgendwo ein paar Fehler, aber wo gibt es die nicht), ist die Anwendung auch noch in einer ausreichend guten Verfassung, so dass die Struktur verstanden werden konnte und die Anpassungen, die wir durchgeführt haben, nicht dazu führten, dass etwas nicht mehr funktionierte.

<strong>Gründe</strong>

Ein nicht unwesentlichen Anteil daran, dass das Projekt besser als erwartet funktioniert hat, trägt sicherlich Wicket als Framework. Wenn man die Hürde genommen hat, die das Thema Modelle darstellt, ist der Rest recht offensichtlich. Eigene Komponenten werden erstellt, weil es a) sehr einfach ist und b) (viel entscheidender) man als Entwickler automatisch davon profitiert. Die Übersichtlichkeit der Anwendung entsteht auf diese Weise automatisch.

<strong>Fazit</strong>

Das eine Anwendung funktioniert, ist mindestens ein Maßstab zur Bewertung. Diese Anforderung ist gerade bei Webanwendungen nicht einfach zu erreichen. In Anbetracht der eher schlechten Voraussetzungen muss man das Ergebnis als gelungen bezeichnen. Da ich gebeten wurde, meine Einschätzung zu diesem Projekt abzugeben, freut es nicht nur mich, sondern sicher auch das Team, dass ich positiv überrascht bin.

Mit welcher anderen Technologie wäre dieses Projekt ähnlich gut verlaufen?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2009-11-11 09:03:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-11 08:03:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-nicht-nur-fur-einsteiger]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="erfahrung"><![CDATA[erfahrung]]></category>
		<category domain="post_tag" nicename="projekt"><![CDATA[projekt]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386730518]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"46.84206956931884";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"26.025769336991793";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"26.025769336991793";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:18:"20.130277015263562";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"17.403174194355895";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:18:"16.726356612830635";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1097</wp:comment_id>
			<wp:comment_author><![CDATA[Andreas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[amayr@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.91.116.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 10:35:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 09:35:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Mit welcher anderen Technologie wäre dieses Projekt ähnlich gut verlaufen?"

Mit JSF sicher nicht...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pre-Optimization - Erkennen und Vermeiden</title>
		<link>http://www.wicket-praxis.de/blog/2009/11/16/pre-optimization-erkennen-und-vermeiden/</link>
		<pubDate>Mon, 16 Nov 2009 08:43:35 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason - including blind stupidity.
<a href="http://en.wikipedia.org/wiki/Program_optimization">W.A. Wulf -  Quotes</a>
</blockquote>

Der Mensch ist faul und das ist gut so. Denn so denkt er ständig darüber nach, wie er Ziele mit dem geringsten Aufwand erreichen kann. Dabei geht es um den sparsamen Einsatz von Resourcen und ist so in vielen Bereichen der Natur anzutreffen. Wo Resourcen im Überfluss vorhanden sind, hält meist Verschwendung Einzug. Ein plötzlicher Lottogewinn hat zu selten zu langfristigem Glück und Wohlstand geführt. Genauso wenig ist eine künstliche Verknappung von Resource automatisch der Weg zu Glück und Erfolg.

Auch wenn man im Bereich der Softwareentwicklung meist nicht genug Resourcen hat, entstehen deshalb nicht automatisch optimale Lösungen. Das Problem ist komplizierter, aber gerade aus diesem Grund auch so spannend. Die folgende Darstellung veranschaulicht, mit welchem Themenkomplex wir es zu tun haben.

[caption id="attachment_201" align="aligncenter" width="450" caption="pre-optimization - übersicht"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/pre-optimization.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/11/pre-optimization-450x337.png" alt="pre-optimization - übersicht" title="pre-optimization" width="450" height="337" class="size-medium wp-image-201" /></a>[/caption]

Ziele sind in den meisten fällen unscharf, der Weg zum Ziel ist komplex und mit vielen Stolpersteinen versehen. Auf dem Weg zum Ziel sind verschiedene Probleme zu lösen. Manche sind bereits bekannt, manche Problemstellungen werden erwartet. Je weiter ein Problem in der Zukunft liegt, desto höher ist das Risiko, dass man nicht nur in die falsche Richtung rennt. Denn die Energie und den Aufwand, den man in diese Problemlösung gesteckt hat, fehlt vielleicht am Ende oder sogar schon unterwegs.

Ein Wanderer hat von einer großen Wüste gehört, die er durchqueren muss. Also bepackt er sich mit Wasser und macht sich auf den Weg. Er kommt an einen Berg und stellt fest, dass er mit dem Wasser den Berg nicht hochkommen wird. Er hat also die ganze Zeit das Wasser umsonst mitgeschleppt. Wenn er an dem Wasser festhält, wird er den Berg nicht schaffen, das Ziel nicht erreichen. Hätte er gewusst, dass hinter dem Berg und vor der Wüste ein Fluss ist, hätte er das Wasser nicht eingepackt. Aber dummerweise kann man manchmal noch nicht mal den Berg sehen, hinter dem die Lösung liegt.

Daher sollte man sich immer fragen, ob man gerade ein Problem löst, dass zwischen dem Jetzt und dem nächsten Schritt liegt, den man gehen muss. Und man sollte sich fragen, ob man das Problem mit dem geringst möglichen Aufwand löst. Manchmal kann man sogar einen kleinen Umweg machen und das Problem umgehen. Alles andere löst Probleme, die man noch nicht hat.

<strong>Wenn man sich sehr viele Gedanken um die Zukunft macht, schreitet meist nur die Zeit voran.</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2009-11-16 09:43:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-16 08:43:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pre-optimization-erkennen-und-vermeiden]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="pre-optimization"><![CDATA[pre-optimization]]></category>
		<category domain="post_tag" nicename="resourcen"><![CDATA[resourcen]]></category>
		<category domain="post_tag" nicename="ziel"><![CDATA[ziel]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386694408]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"22.546717658730287";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:16:"6.45610061549815";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:16:"6.45610061549815";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"6.0275000324288595";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"220";s:5:"score";s:17:"4.780434515175124";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"196";s:5:"score";s:17:"4.509343531746056";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>954</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>955</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>950</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>951</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>952</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>953</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>956</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>957</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>960</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>963</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>962</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>964</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>965</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>967</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>968</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>969</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>971</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>973</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>975</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>980</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>981</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>982</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>985</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>986</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>988</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>989</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>990</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>991</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>992</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>994</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>995</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>997</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>998</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1000</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1003</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1004</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1005</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1006</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1007</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1009</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1010</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1012</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1028</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1014</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1021</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1017</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1026</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1019</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1020</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1031</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1035</wp:comment_id>
			<wp:comment_author><![CDATA[@mosmann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mosmann@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mosmann/statuses/1465686268</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-16 09:48:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-16 08:48:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New Blog Post: Pre-Optimization – Erkennen und Vermeiden http://tinyurl.com/yfmktvm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>E-Mail mit Wicket verschicken</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/01/sending-html-email-from-wicket-app/</link>
		<pubDate>Tue, 01 Dec 2009 06:59:14 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[Wäre es nicht praktisch, wenn man eine E-Mail verschicken könnte, in dem man die Komponenten, die man für die Darstellung auf der Webseite verwendet, auch für das Erstellen der E-Mail heranziehen könnte. Das Unterfangen ist leider nicht trivial, weil man nicht ohne Weiteres um die "Magie", die Wicket an vielen Stellen benutzt, herum kommt. Nun bietet Wicket die Möglichkeit, Komponenten und Seiten, Formulare und vieles mehr in Unit-Test zu testen. Was liegt also näher, als diese Funktionalität für unsere Zwecke zu missbrauchen.

<strong>Die E-Mail</strong>

Als erstes erstellen wir eine Seite, die den Inhalt der E-Mail erzeugen soll:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.email;

import java.util.List;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.model.IModel;

public class EmailContentPage extends WebPage
{
  public EmailContentPage(IModel<List<? extends String>> list)
  {
    add(new ListView<String>("list",list)
    {
      @Override
      protected void populateItem(ListItem<String> item)
      {
        item.add(new Label("name",item.getModel()));
      }
    });
  }
}
</code>

Der Code soll zeigen, dass Komponenten ganz normal Funktionieren. Deshalb bekommt die Seite von außen eine Liste mit Werten übergeben, die dann durch eine ListView dargestellt wird.

<code lang="html"><h1>TestEmail</h1>
<ul>
  <li wicket:id="list"><span wicket:id="name"></span></li>
</ul>
</code>

Im Markup habe ich absichtlich den "Rahmen" der Seite (html > body) weggelassen. Die Klasse und das Markup dienen in diesem Beispiel nur als Platzhalter.

<strong>Darstellen und Abschicken</strong>

In Wicket sind sehr viele Objekte an den aktuellen Thread gebunden. Das ist notwendig, damit man nicht eine ganze Liste von Objekten als Übergabeparameter durch Methodenaufrufe schleifen muss. Das ist allerdings genau dann ein Problem, wenn wir innerhalb einer Wicketanwendung eine andere Seite darstellen möchten. Außerdem ist es ein Problem, wenn es wie in einem im Hintergrund laufenden Prozess überhaupt keine WicketApplication gibt. Daher erstellen wir uns ein paar Hilfsklassen, die sich um dieses Problem kümmern.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.email;

public interface WicketCallback<I,O>
{
  public O getResult(I input);
}
</code>

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.email;

import java.util.logging.Logger;

public class WicketThreadAdapter<I,O> extends Thread
{
  private static final Logger _logger = Logger.getLogger(WicketThreadAdapter.class.getName());
  
  Object _lock=new Object();
  
  WicketCallback<I, O> _callback;
  I _input;
  O _output;
  boolean _done=false;
  
  protected WicketThreadAdapter(WicketCallback<I, O> callback, I input)
  {
    _callback=callback;
    _input=input;
  }
  
  @Override
  public void run()
  {
    synchronized (_lock)
    {
      _output=_callback.getResult(_input);
      _done=true;
      _lock.notify();
    }
  }
  
  protected O getResult() throws InterruptedException
  {
    synchronized (_lock)
    {
      while (!_done)
      {
        _lock.wait();
      }
      return _output;
    }
  }
  
  public static <I,O> O getResult(WicketCallback<I, O> callback, I input) throws InterruptedException
  {
    WicketThreadAdapter<I,O> threadAdapter = new WicketThreadAdapter<I,O>(callback,input);
    threadAdapter.start();
    return threadAdapter.getResult();
  }
}
</code>

Die WicketThreadAdapter-Klasse wird über die statische Methode getResult(...) angesprochen und macht folgendes: Es wird ein neuer Thread erzeugt. Im laufenden Thread wird der Callback aufgerufen und der Thread beendet. Das Ergebnis, das im Thread ermittelt wurde, wird als Ergebnis herausgereicht. Kurz: Das Ergebnis wird in einem anderen Thread als dem aktuellen ermittelt und führt so nicht zu Kollisionen mit der laufenden Anwendung.

<strong>Der Trick</strong>

Das alles führt noch nicht zum Ziel. Wir müssen uns jetzt noch darum kümmern, dass wir die Seite dargestellt bekommen. Dazu benutzten wir die Klasse BaseWicketTester, die sich um alles weitere kümmert. Dort übergeben wir die Seite, die wir darstellen wollen. Dann können wir auf den Inhalt der Seite zugreifen und als Ergebnis zurück liefern. 

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.email;

import java.util.Arrays;
import java.util.List;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.util.tester.BaseWicketTester;

public class EmailFromComponentPage extends WebPage
{
  public EmailFromComponentPage()
  {
    WicketCallback<List<String>, String> callback = new WicketCallback<List<String>, String>()
    {
      public String getResult(List<String> input)
      {
        final IModel<List<? extends String>> listModel = Model.ofList(input);
        
        BaseWicketTester tester=new BaseWicketTester();
        tester.startPage(new EmailContentPage(listModel));
        return tester.getServletResponse().getDocument();
      }
    };
    
    String result;
    try
    {
      result = WicketThreadAdapter.getResult(callback, Arrays.asList("Klaus","Susi","Bert"));
    }
    catch (InterruptedException e)
    {
      e.printStackTrace();
      result=e.getLocalizedMessage();
    }
    
    add(new Label("email",result).setEscapeModelStrings(false));
  }
}
</code>

Damit das Ergebnis richtig angezeigt wird, teilen wir dem Label "email" mit, dass es den Text nicht umschreiben soll.

<code lang="html"><html>
  <head>
    <title>Email Form Component</title>
  </head>
  <body>
    Email <span wicket:id="email"></span>
  </body>
</html></code>

Wenn man die Seite aufruft, erhält man dann folgende Darstellung:
[caption id="attachment_207" align="aligncenter" width="325" caption="Ergebnis: Html-E-Mail aus Wicket"]<img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-email.png" alt="Ergebnis: Html-E-Mail aus Wicket" title="wicket-email" width="325" height="195" class="size-full wp-image-207" />[/caption]

Wenn man die E-Mail durch Hintergrundprozesse versenden möchte, ist ein eigener Thread unnötig, weil keine WicketApplication-Klasse an den Thread gebunden ist. Dann sollte der Einsatz der BaseWicketTester-Klasse reichen. Es ist allerdings darauf zu achten, dass alles, was in der eigenen Application-Klasse definiert wurde, an dieser Stelle nicht ohne weiteres zur Verfügung steht (z.B. wird der OpenSessionInViewFilter für Spring nicht aufgerufen, die SpringBean-Annotationen sind ebenfalls funktionslos).

<strong>Fazit</strong>

Auch wenn sicher noch die eine oder andere Anpassung notwendig ist, damit man Komponenten sowohl für die Anwendung als auch für den E-Mail-Versand benutzten kann, lohnt sich der Aufwand, weil man a) auf die vielfältigen Möglichkeiten, die Wicket als "Template-Engine" bietet, zurückgreifen kann, b) man sich im besten Fall doppelten Code ersparen kann und c) man keine zweite Lösung einbinden muss. Und wieder hat mich Wicket ein wenig überrascht. Weil es dann doch so einfach ging:)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2009-12-01 07:59:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-01 06:59:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sending-html-email-from-wicket-app]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="email"><![CDATA[email]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="post_tag" nicename="sending"><![CDATA[sending]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[test]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386682324]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:17:"95.66797123229627";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"62.253001710450725";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"31.17363968310937";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"15.627342924422535";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"15.627342924422535";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"265";s:5:"score";s:16:"7.13906539296274";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1099</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1100</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1101</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1105</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1106</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1104</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1111</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1109</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1110</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1113</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1114</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1115</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1116</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1127</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1119</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1126</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1128</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1129</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1136</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1137</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1134</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1143</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1139</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1140</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1142</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1146</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1147</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1149</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1158</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1172</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1173</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1175</wp:comment_id>
			<wp:comment_author><![CDATA[@elsholz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elsholz@tweetback]]></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/elsholz/statuses/1978868917</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-02 17:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-02 16:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, wicket als emailgenerator.  http://tinyurl.com/ye9u9uv]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>477156</wp:comment_id>
			<wp:comment_author><![CDATA[Culver City Custom Orthotics]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://markets.financialcontent.com/salemcomm.ksac/news/read/31795855</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.198.119.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-19 07:29:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-19 06:29:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Culver City Custom Orthotics</strong>

E-Mail mit Wicket verschicken | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1489904951.160713;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Praxisbuch Wicket - Übersicht</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/10/praxisbuch-wicket-ubersicht/</link>
		<pubDate>Thu, 10 Dec 2009 06:58:45 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[Hinterher ist man meistens schlauer, hofft man. Nachdem ich gerade per Twitter auf eine <a href="http://mcatr.blogspot.com/2009/11/jsf-2-mind-map.html" target="_blank">JSF-Mindmap</a> gestoßen bin (dank <a href="http://twitter.com/ptrthomas" target="_blank" rel="nofollow">@ptrthomas</a>), dachte ich mir, dass es hilfreich sein könnte, die Mindmap, die ich mir bei der Arbeit am Buch erstellt habe, auch anderen zur Verfügung zu stellen. Perfektionismus führt manchmal dazu, dass man nie ankommt, daher hier sofort das ungefilterte Ergebnis.

[caption id="attachment_211" align="aligncenter" width="360" caption="Wicket Struktur - Übersicht aus der Arbeit am Buch"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/Struktur.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/Struktur-360x450.png" alt="Wicket Struktur - Übersicht aus der Arbeit am Buch" title="Wicket Struktur - Übersicht aus der Arbeit am Buch" width="360" height="450" class="size-medium wp-image-211" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2009-12-10 07:58:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-10 06:58:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[praxisbuch-wicket-ubersicht]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="category" nicename="jsf-migration"><![CDATA[JSF]]></category>
		<category domain="post_tag" nicename="mindmap"><![CDATA[mindmap]]></category>
		<category domain="post_tag" nicename="overview"><![CDATA[overview]]></category>
		<category domain="post_tag" nicename="struktur"><![CDATA[struktur]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386684222]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:18:"41.531131080000335";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"30.423153016497906";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"17.537819714013782";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.694139395272693";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"223";s:5:"score";s:18:"15.963204802748281";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"15.910298677454866";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Form Submit - mit und ohne Ajax</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/11/wicket-form-submit-mit-und-ohne-ajax/</link>
		<pubDate>Fri, 11 Dec 2009 08:52:29 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[Webanwendungen ohne Formulare gibt es nicht. Dabei ist die korrekte Formularbehandlung alles andere als trivial. Zum Glück bietet Wicket eine ausgezeichnete Unterstützung für Formulare, die kaum Wünsche offen lässt. Doch auch mit Wicket sind ein paar Dinge zu beachten, um die verschiedenen Interaktionsmöglichkeiten des Nutzers korrekt zu verarbeiten.

Wicket bietet die Möglichkeit, neben dem normalen Abschicken eines Formulars auch auf die angeklickten Submit-Buttons reagieren zu können. Damit man aber auch zuverlässig unterscheiden kann, ob der Nutzer das Formular durch ein Enter im Textfeld oder durch einen Klick auf einen Button abgeschickt hat, muss man ein paar Vorbereitungen treffen.

Für das Formular legen wir eine Bean an, welche die Daten aufnimmt.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.submit;

import java.io.Serializable;

public class FormBean implements Serializable
{
  String _name;
  
  public String getName()
  {
    return _name;
  }
  
  public void setName(String name)
  {
    _name = name;
  }
}</code>

Für unser Beispiel benötigen wir ein Formular, einen AjaxFallbackButton, einen normalen Button und einen Button, den wir dazu benutzen, denn Fall herauszubekommen, wenn der Nutzer einfach nur Enter gedrückt hat. Das FeedbackPanel sollte man auch nicht vergessen.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.submit;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.CompoundPropertyModel;

public class FormSubmitPage extends WebPage
{
  int _counter;
  
  public FormSubmitPage()
  {
    final FeedbackPanel feedbackPanel = new FeedbackPanel("feedback");
    feedbackPanel.setOutputMarkupId(true);
    add(feedbackPanel);
    
    CompoundPropertyModel<FormBean> formModel = new CompoundPropertyModel<FormBean>(new FormBean());
    Form<FormBean> form = new Form<FormBean>("form",formModel)
    {
      @Override
      protected void onSubmit()
      {
        info("Form Submit: "+_counter++);
      }
    };
    
    form.add(new TextField<String>("name"));
    
    form.add(new Button("defaultSubmit")
    {
      @Override
      public void onSubmit()
      {
        info("Default Button: "+_counter++);
      }
    });
    
    form.add(new Button("submit")
    {
      @Override
      public void onSubmit()
      {
        info("Button: "+_counter++);
      }
    });
    
    form.add(new AjaxFallbackButton("ajaxSubmit",form)
    {
      @Override
      protected void onSubmit(AjaxRequestTarget target, Form<?> form)
      {
        if (target!=null)
        {
          info("AjaxSubmit Button(ajax): "+_counter++);
          target.addComponent(feedbackPanel);
        
          _counter=0;
        }
        else
        {
          info("AjaxFallbackButton: "+_counter++);
        }
      }
    });
    
    add(form);
  }
  
  @Override
  protected void onBeforeRender()
  {
    _counter=0;
    super.onBeforeRender();
  }
}
</code>

Damit man die Reihenfolge besser erkennen kann, mit der die onSubmit-Methoden aufgerufen werden, wird ein Zähler (_counter) hochgezählt und vor dem Darstellen des Formulars wieder zurückgesetzt. In diesem Beispiel liegt die entscheidende Information im Markup. Dabei ist die Reihenfolge der verschiedenen Submit-Komponenten wichtig.

<code lang="html"><html>
  <head>
    <title>FormSubmitPage</title>
  </head>
  <body>
    <div wicket:id="feedback"></div>
    
    <form wicket:id="form">
      <input wicket:id="defaultSubmit" type="submit" value="" style="border:0px; width: 0px; height: 0px; visibility: collapse; display: compact;">
      Name <input wicket:id="name"><br>
      <input wicket:id="ajaxSubmit"  type="submit" value="AjaxButton">
      <input wicket:id="submit" type="submit" value="Button"> 
    </form>
  </body>
</html>
</code>

Der Button mit der Wicket-ID defaultSubmit muss vor allen anderen Submit-Komponenten stehen. Dadurch wird beim Abschicken des Formulars durch Enter dieser Button ausgewählt. Wenn einer der anderen Buttons angeklickt wird, dann wird das Formular über diesen Button abgeschickt. Doch warum soviel Aufwand? Die onSubmit()-Methode des Formulars wird doch in jedem Fall aufgerufen.

Der Aufwand ist notwendig, wenn man abhängig davon, ob der Nutzer auf einen Button oder eben auf keinen Button geklickt hat, eine Aktion ausführen möchte. Das bedeutet, dass man die Aktion nicht in onSubmit ausführen kann. Es ist allerdings auch nicht möglich, im onSubmit() der Buttonkomponenten ein Flag zu setzen, dass dann in der onSubmit()-Methode des Formulars aufgerufen wird, da die Methode beim AjaxFallbackButton erst nach dem onSubmit() der Komponente aufgerufen wird.

Folgende Ergebnisse erhält man, wenn man das Formular a) per Enter, b) per AjaxButton und c) per Button abschickt:

[caption id="attachment_215" align="aligncenter" width="263" caption="Submit per Enter"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png" alt="Submit per Enter" title="wicket-form-submit-enter" width="263" height="114" class="size-full wp-image-215" /></a>[/caption]

[caption id="attachment_216" align="aligncenter" width="271" caption="Submit per AjaxButton"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton.png" alt="Submit per AjaxButton" title="wicket-form-submit-ajaxbutton" width="271" height="118" class="size-full wp-image-216" /></a>[/caption]

[caption id="attachment_217" align="aligncenter" width="263" caption="Submit per Button"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png" alt="Submit per Button" title="wicket-form-submit-button" width="263" height="115" class="size-full wp-image-217" /></a>[/caption]


Wenn Javascript deaktiviert ist, dann erhält man folgende Ausgabe:
[caption id="attachment_215" align="aligncenter" width="263" caption="Submit per Enter"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-enter.png" alt="Submit per Enter" title="wicket-form-submit-enter" width="263" height="114" class="size-full wp-image-215" /></a>[/caption]

[caption id="attachment_218" align="aligncenter" width="262" caption="Submit per AjaxButton"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton-no-javascript.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-ajaxbutton-no-javascript.png" alt="Submit per AjaxButton" title="wicket-form-submit-ajaxbutton-no-javascript" width="262" height="117" class="size-full wp-image-218" /></a>[/caption]

[caption id="attachment_217" align="aligncenter" width="263" caption="Submit per Button"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2009/12/wicket-form-submit-button.png" alt="Submit per Button" title="wicket-form-submit-button" width="263" height="115" class="size-full wp-image-217" /></a>[/caption]

Wenn man dieses Vorgehen beherzigt, funktioniert die Anwendung auch mit deaktiviertem JavaScript genauso zuverlässig. Das freut den Nutzer und in diesem Fall auch den Entwickler:)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2009-12-11 09:52:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-11 08:52:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-form-submit-mit-und-ohne-ajax]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="fallback"><![CDATA[fallback]]></category>
		<category domain="post_tag" nicename="form"><![CDATA[form]]></category>
		<category domain="post_tag" nicename="submit"><![CDATA[submit]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[vgwpixel]]></wp:meta_key>
			<wp:meta_value><![CDATA[<img src="http://vg05.met.vgwort.de/na/182d54349d0b4270ad76cfc3ce7e8d24" width="1" height="1" alt="">]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386676331]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:16:"81.1574367751437";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"120";s:5:"score";s:17:"65.71101497187905";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"63.38145418542754";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"54.664437736739934";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"244";s:5:"score";s:17:"27.95644917253401";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>472416</wp:comment_id>
			<wp:comment_author><![CDATA[susu penambah tinggi badan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.hilo-school.com/nutrisi/cara-agar-cepat-tinggi-secara-alami/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.210.216.90]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-11-04 03:47:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-11-04 02:47:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>susu penambah tinggi badan</strong>

Wicket Form Submit &#8211; mit und ohne Ajax | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478227632.780642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Ajax Tipp - AjaxRequestTarget nachträglich ermitteln</title>
		<link>http://www.wicket-praxis.de/blog/2009/12/23/wicket-ajax-tipp-ajaxrequesttarget-nachtraglich-ermitteln/</link>
		<pubDate>Wed, 23 Dec 2009 07:02:28 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[Gestern wurde ich gefragt, ob und wie man denn vermeiden kann, dass man das AjaxRequestTarget immer als Funktionsargument weiterreichen muss, wenn man an anderer Stelle darauf zugreifen möchte. Ich muss zugeben, dass ich die einfache Antwort nicht sofort wusste (was, wie man sehen wird, erstaunlich ist). Ich wusste aber, dass mir kürzlich ein Stück Wicket-Code begegnet ist, wo ermittelt werden musste, ob ein AjaxRequest oder ein normaler Request abgearbeitet wird.

Ich machte mich also erneut auf die Suche und fand die Code-Zeile in der AjaxFallbackButton-Klasse. Ich war kurz davor ein paar Zeilen Code daraus abzuleiten und warf nur einen flüchtigen Code in die AjaxRequestTarget-Klasse, um festzustellen, das es das natürlich schon gibt.

<code lang="java5">AjaxRequestTarget target=AjaxRequestTarget.get();</code>

So einfach geht das. So einfach, dass ich es fast übersehen hätte.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2009-12-23 08:02:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-23 07:02:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-ajax-tipp-ajaxrequesttarget-nachtraglich-ermitteln]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="ajaxrequesttarget"><![CDATA[AjaxRequestTarget]]></category>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386680795]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"40.392549729462736";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:16:"38.0930144174171";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"13.071829153130265";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"213";s:5:"score";s:18:"10.150693809660464";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2640</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Funk]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[funkattack@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.58.185.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-08 09:02:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-08 08:02:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Moin moin,

es lohnt aber auch einen Blick in die Implementierung der Methode zu werfen:

	public static AjaxRequestTarget get()
	{
		final RequestCycle requestCycle = RequestCycle.get();
		if (requestCycle != null)
		{
			if (requestCycle.getRequestTarget() instanceof AjaxRequestTarget)
			{
				return (AjaxRequestTarget)requestCycle.getRequestTarget();
			}
		}
		return null;
	}

Man kann gut erkennen wie man von überall an ein Request Target kommen kann.
Ausserdem sieht man, dass die Methode null zurückgibt, wenn das aktuelle Target kein AjaxRequestTarget ist.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3162</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.190.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-22 17:22:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-22 16:22:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Danke für die Ergänzung:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2640</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>477053</wp:comment_id>
			<wp:comment_author><![CDATA[photos.katie.Happylittlethings.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://Photos.katie.happylittlethings.com/ireland/DSC00180.JPG.html</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[36.82.72.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-15 02:52:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-15 01:52:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>photos.katie.Happylittlethings.com</strong>

Wicket Ajax Tipp &#8211; AjaxRequestTarget nachträglich ermitteln | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1489542766.8471899;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Anfang und Ende</title>
		<link>http://www.wicket-praxis.de/blog/2010/01/02/anfang-und-ende/</link>
		<pubDate>Sat, 02 Jan 2010 17:28:08 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[Ich wünsche allen ein gesundes neues Jahr. 2009 hat sich verabschiedet und 2010 zeigt sich bereits jetzt von seiner besten Seite (wenn man Schnee mag). Ich freue mich auf die vielen spannenden Themen, die das neue Jahr bereithält.

Auch wenn es anders kommt, als man sich denkt, wage ich hier doch mal ein paar Vorhersagen. Manches davon ist offensichtlich und wird vermutlich schon deshalb nicht eintreten, Anderes ist frei erfunden und hat damit die besten Chancen, zum Volltreffer zu werden.

Nachdem 2009 eigentlich ein Scala-Jahr war, wird es auch 2010 in diesem Bereich interessant bleiben. Zu meiner Überraschung konnte allerdings auch Java durch den Scala-Hype profitieren. Einige fühlten sich wohl durch die Möglichkeiten von Scala entsprechend angestachelt, dass selbst für Dinge wie Scala Traits Implementierungen (z.B. <a href="http://code.google.com/p/java-mixins/">java-mixins</a>) für Java geschrieben wurden. Java ist zwar etwas angestaubt aber eben noch nicht tot. Und was Google mit GWT und Android alles auf Basis von Java anstellt, zeigt deutlich, dass da noch Platz für Innovationen ist. Das bedeutet, dass es auch 2010 nicht verkehrt ist, auf Java zu setzen.

Nachdem JSF 2.0 wie zu erwarten war, nicht alle Probleme, die JSF bis jetzt angesammelt hat, lösen wird, gehe ich davon aus, dass wie schon 2009 immer mehr Projekte auch mit Wicket realisiert werden. Da Wicket als Basis schon sehr ausgereift ist, wird sich der Zustrom an Entwicklern vermutlich eher auf Integrationsthemen auswirken: Web-Worker, Javascript-Frameworks und andere noch unbekannte Entwicklungen. Ich erwarte außerdem (unabhängig von meinem <a href="http://www.wicket-praxis.de/blog/2009/11/03/wicket-theme-css-layout-fur-wicket-anwendungen/">eigenen Teilprojekt</a> auf wicketstuff.org) ein paar Standardvorlagen für Wicket-Projekte.

Nachdem Groovy in der neuesten Version alle Sprachfeatures hat, die für eine saubere Wicket-Integration notwendig sind, wird es auch in diesem Bereich interessant. Die Bedenken, die ich trage, richten sich vielmehr an die Plattform Groovy/Grails an sich. Es gibt Entwicklungen, die bei mir Bauchschmerzen hervorrufen (<a href="http://docs.codehaus.org/display/GROOVY/Groovy+1.7+release+notes">Grape</a> - Dependency Management als Annotation auf einem Import - WTF)), die merkwürdig sind und auf die Frage "Warum?" vermutlich nur mit einem "Weil es geht." beantwortet werden.

Alles in Allem, es bleibt und wird spannend. Ich wünsche allen (unabhängig von der technologischen Präferenz) ein gutes und erfolgreiches Jahr.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date><![CDATA[2010-01-02 18:28:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-02 17:28:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anfang-und-ende]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2010"><![CDATA[2010]]></category>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="gwt"><![CDATA[gwt]]></category>
		<category domain="category" nicename="jsf-migration"><![CDATA[JSF]]></category>
		<category domain="post_tag" nicename="next"><![CDATA[next]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386685635]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"247.13135264586546";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"32.940509997560156";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:16:"27.4459070467886";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:18:"20.130277015263562";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"17.403174194355895";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"210";s:5:"score";s:18:"15.963204802748281";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket - lose Koppelung von Komponenten</title>
		<link>http://www.wicket-praxis.de/blog/2010/01/05/wicket-lose-koppelung-von-komponenten/</link>
		<pubDate>Tue, 05 Jan 2010 08:02:40 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[Auch bei Webanwendungen entstehen schnell komplexe Oberflächen. Es ist nur eine Frage der Zeit, bis man Komponenten, die miteinander interagieren sollen, gegenseitig bekannt macht. Diese Vorgehensweise ist limitiert und außerdem sehr aufwendig. Wie ich bereits im <a href="http://books.google.de/books?id=9esdx8R-fJAC&pg=PA103&lpg=PA103&dq=praxisbuch+wicket+Ajax+Events&source=bl&ots=ajlFEqWKuj&sig=FA36Ar-X7aa4psPGuECpIJrKZtU&hl=de&ei=aONCS6-AFZLcmgOI4azzCw&sa=X&oi=book_result&ct=result&resnum=10&ved=0CDQQ6AEwCQ#v=onepage&q=&f=false">Buch</a> beschrieben habe, kann man die Koppelung von Komponenten aufweichen, die per Ajax neu gezeichnet werden müssen. Dabei ist es zu kurz gedacht, dass man die Entkoppelung von Komponenten nur aus diesem Grund forciert.

Der Unterschied zwischen einem normalen Request und einem Ajax-Request liegt darin, dass bei einem Ajax-Request nur Teile der Seite neu gerendert werden. Dazu müssen die Komponenten markiert werden, die in der Zielseite ersetzt werden sollen. Wenn es sich um einen normalen Request handelt, ist das nicht notwendig, da die ganze Seite und damit alle Komponenten neu gerendert werden.

Solange sich alle Aktionen auf die Änderungen von Daten beziehen, die dann entweder per Ajax neu dargestellt werden oder beim Darstellen der ganzen Seite automatisch angezeigt werden, besteht eigentlich kein Grund, mehr Aufwand in das Entkoppeln von Komponenten zu stecken. Doch oft ist das Ändern der Daten nicht trivial, der Code verteilt sich unwillkürlich auf verschiedene Komponenten.

Um dieser Entwicklung entgegen zu wirken, erweitert man das Event-Konzept einfach auch auf normale Requests. Im folgenden Code werden daher alle notwendigen Klassen aufgeführt. Die im Buch verwendeten Klassen können durch diese ersetzt werden.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

public interface EventListenerInterface
{
  public void notifyAjaxEvent(AbstractEvent event);
}</code>

Das EventListenerInterface muss jede Komponente implementieren, dass auf Events reagieren muss.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.Component;
import org.apache.wicket.Page;
import org.apache.wicket.Component.IVisitor;
import org.apache.wicket.ajax.AjaxRequestTarget;

public class AbstractEvent
{
  Component _source;
  AjaxRequestTarget _requestTarget;
  
  protected AbstractEvent(Component source,AjaxRequestTarget requestTarget)
  {
    _source=source;
    _requestTarget=requestTarget;
  }
  
  public Component getSource()
  {
    return _source;
  }
  
  public void fire()
  {
    Page page = _source.getPage();
    if (page instanceof EventListenerInterface)
    {
      ((EventListenerInterface) page).notifyAjaxEvent(this);
    }
    page.visitChildren(EventListenerInterface.class, new AjaxEventVisitor(this));
  }
  
  public void update(Component component)
  {
    if (_requestTarget!=null) _requestTarget.addComponent(component);
  }
  
  protected static class AjaxEventVisitor implements IVisitor<Component>
  {
    AbstractEvent _event;
    
    protected AjaxEventVisitor(AbstractEvent event)
    {
      _event=event;
    }
    
    public Object component(Component component)
    {
      ((EventListenerInterface) component).notifyAjaxEvent(_event);
      return IVisitor.CONTINUE_TRAVERSAL;
    }
  }
}</code>

Die Eventklasse wurde dahingehend erweitert, dass jetzt auch für die Seite geprüft wird, ob das EventListernerInterface implementiert wurde. Ob Ajax benutzt wurde oder nicht, wird in der update()-Methode überprüft, so dass man diese Prüfung nicht mehr selbst vornehmen muss.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.Component;
import org.apache.wicket.ajax.AjaxRequestTarget;

public class ChangeEvent extends AbstractEvent
{
  int _change;
  
  protected ChangeEvent(Component source, AjaxRequestTarget requestTarget, int change)
  {
    super(source, requestTarget);
    
    _change=change;
  }

  public int getChange()
  {
    return _change;
  }
}</code>

Der ChangeEvent wurde abgeleitet und um eine Information erweitert. In der folgenden Komponente wird diese Information ausgewertet:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;

public class CounterPanel extends Panel implements EventListenerInterface
{
  IModel<Integer> _counter;
  
  public CounterPanel(String id,IModel<Integer> counter)
  {
    super(id);
    
    setOutputMarkupId(true);
  
    _counter=counter;
    
    add(new Label("counter",_counter));
  }

  public void notifyAjaxEvent(AbstractEvent event)
  {
    if (event instanceof ChangeEvent)
    {
      int change = ((ChangeEvent) event).getChange();
      Integer cur = _counter.getObject();
      
      info("Aktuell: "+cur+" Change: "+change);
      
      _counter.setObject(cur+change);
      event.update(this);
    }
  }
}</code>

Man beachte, dass für die Komponente setOutputMarkupId() aufgerufen wird, da diese Komponente evtl. per Ajax aktualisiert werden kann.

<code lang="html"><wicket:panel>
  <span wicket:id="counter"></span>
</wicket:panel></code>

Jetzt benötigen wir noch eine Komponente, die diesen Event auslöst:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;

public class ActionPanel extends Panel
{
  public ActionPanel(String id,IModel<Integer> change)
  {
    super(id);
    
    AjaxFallbackLink<Integer> link = new AjaxFallbackLink<Integer>("link",change)
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        new ChangeEvent(ActionPanel.this,target,getModelObject()).fire();
      }
    };
    link.add(new Label("change",change));
    add(link);
  }
}</code>

<code lang="html"><wicket:panel>
  <a wicket:id="link"><span wicket:id="change"></span></a>
</wicket:panel></code>

Nachdem wir alle Komponten erstell habe, benutzen wir sie in einer Anwendung:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.Model;

public class EventPage extends WebPage
{
  public EventPage()
  {
    add(new EventFeedbackPanel("feedback"));
    
    add(new ActionPanel("changeAdd1",Model.of(1)));
    add(new ActionPanel("changeSub1",Model.of(-1)));
    
    add(new CounterPanel("counter",Model.of(5)));
  }
  
  static class EventFeedbackPanel extends FeedbackPanel implements EventListenerInterface
  {
    public EventFeedbackPanel(String id)
    {
      super(id);
      
      setOutputMarkupId(true);
    }
    
    public void notifyAjaxEvent(AbstractEvent event)
    {
      event.update(this);
    }
  }
}</code>

Wie man sieht, habe ich auch ein FeedbackPanel erstellt, dass auf Events (und in diesem Fall jedes) reagiert.

<code lang="java5"><html>
  <head>
    <title>EventPage</title>
  </head>
  <body>
    <div wicket:id="feedback"></div>
    
    <wicket:container wicket:id="changeAdd1"></wicket:container>
    <wicket:container wicket:id="changeSub1"></wicket:container>
    
    <div wicket:id="counter"></div>
  </body>
</html></code>

Wenn Komponenten per Ajax aktualisiert werden müssen, funktioniert das nur, wenn es auch ein Html-Tag mit der passenden ID gibt, dass per Javascript gefunden und ersetzt werden kann. Daher muss man die Komponente dann an ein Html-Tag binden, die Einbettung über wicket:container funktioniert nicht.

Betätigt man nun einen der Links in der AktionPanel-Komponente, dann wird der Zähler in der CounterPanel-Komponenten angepasst und eine entsprechende Meldung im FeedbackPanel angezeigt. Wenn man nun das CounterPanel einfach ausbaut, passiert nichts. Das zeigt zum einen, dass die Komponenten wirklich unabhängig voneinander sind, zum anderen aber auch, welches Risiko man eingeht: es kann vorkommen, dass Events nicht verarbeitet werden.

Dieses Beispiel veranschaulicht, wie einfach man Komponenten entkoppeln kann. Doch dieses Beispiel ist nur eine einfache Anwendung. Wie weit man diese Vorgehensweise in der Praxis treiben kann, möchte ich in ein paar Sichtpunkten erwähnen:
<ul>
	<li>Anwendung der Möglichkeiten von Vererbung auf Events</li>
	<li>Prüfung, ob ein Event einen Empfänger erreicht hat</li>
	<li>Kaskadierung von Events (wenn Event A eintrifft, wird Event B ausgelöst)</li>
	<li>Mehr als ein Sender und mehr als einen Empfänger für Events</li>
	<li>Ein Event kann mit und ohne Ajax ausgelöst werden, ohne dass der Code auf Empfängerseite angepasst werden muss.</li>
</ul>

Ich hoffe, dass dient als Anregung oder Vorlage. Komplexen Oberflächen mit Wicket steht nun nichts mehr im Weg.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2010-01-05 09:02:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-05 08:02:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-lose-koppelung-von-komponenten]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="coupling"><![CDATA[coupling]]></category>
		<category domain="post_tag" nicename="koppelung"><![CDATA[koppelung]]></category>
		<category domain="post_tag" nicename="loose"><![CDATA[loose]]></category>
		<category domain="post_tag" nicename="lose"><![CDATA[lose]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386678939]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"270";s:5:"score";s:16:"45.4011079705202";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:17:"33.92093354435572";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"28.699971857017527";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"22.778250702984494";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"22.725491314208554";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"22.296890731139264";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>355357</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Klöber]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thomas.kloeber@securintegration.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.50.74.134]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-16 09:11:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-16 08:11:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sehr gutes Beispiel, funktioniert bestens.
(Update für Wicket 6 wäre hilfreich)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1434442313.31512;s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443635109.9416831;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket und Eclipse</title>
		<link>http://www.wicket-praxis.de/blog/2010/01/13/wicket-und-eclipse/</link>
		<pubDate>Wed, 13 Jan 2010 06:24:20 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[Um mit Wicket Anwendungen entwickeln zu können, benötigt man eine vernünftige Java-Entwicklungsumgebung, die auch Html-Dateien bearbeiten kann. Das reicht für den Anfang. Doch im Laufe der Zeit wünscht man sich für verschiedene Dinge eine besser Unterstützung, weil man damit besonders häufig in Berührung kommt und der Effekt daher spürbar wäre. Manchmal erzielen kleine Dinge daher eine große Wirkung.

So habe ich mich bisher gescheut, für Wicket entsprechende Templates in Eclipse zu Pflegen, weil ich dachte, dass sich der Aufwand nicht lohnt, weil man davon nicht ausreichend profitiert. Das war bis vor ein paar Tagen so. Als ich dann merkte, dass ich immer häufiger "wicket:id" tippen musste, fügte ich dafür ein passendes Template in Eclipse hinzu. Es funktionierte wie erwartet und ich konnte etwas flüssiger arbeiten. Schon am darauf folgenden Tag benutzte ich in einem anderen Projekt ein neuen Workspace. Als ich das erste mal wieder "wicket:id" schreiben wollte und nun auf die Unterstützung von Eclipse wartete, fiel mir auf, was mir fehlt: in dem Projekt waren die Wicket-Templates noch nicht eingebunden.

Damit man sich nicht selbst hinsetzen muss und diese Templates in Eclipse konfigurieren muss, hier die Datei zum <a href="http://www.wicket-praxis.de/blog/download/">download</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2010-01-13 07:24:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-13 06:24:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-und-eclipse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="eclipse"><![CDATA[eclipse]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386691397]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"58.445682499673126";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:17:"44.22596462250109";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"267";s:5:"score";s:18:"38.474675621445705";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"17.403174194355895";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:17:"17.25831309552855";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"11.11739462652801";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket - verzögerte Initialisierung</title>
		<link>http://www.wicket-praxis.de/blog/2010/01/20/wicket-lazy-init/</link>
		<pubDate>Wed, 20 Jan 2010 08:28:05 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[Nicht immer ist es möglich oder sinnvoll, im Konstruktor einer Komponente bereits die vollständige Komponentenstruktur anzulegen. Wie man Komponenten zu einem späteren Zeitpunkt anlegen kann, kann man in den Repeater-Klassen ansehen. Aber es geht wesentlich einfacher. Nach dem Erstellen einer Komponente wird als nächstes (für den Fall,dass die Komponente dargestellt wird) onBeforeRender() aufgerufen. Wir können die fehlenden Komponenten in diesem Methodenaufruf erstellen. Wir müssen nur darauf achten, dass diese Initialisierung nur einmal durchgeführt wird. Am besten verpacken wir das ganze in eine eigene Klasse.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.lazy;

import org.apache.wicket.markup.html.panel.Panel;

public abstract class AbstractLazyPanel extends Panel
{
  boolean _lazyInitCalled;
  
  public AbstractLazyPanel(String id)
  {
    super(id);
  }

  @Override
  protected void onBeforeRender()
  {
    if (!_lazyInitCalled)
    {
      _lazyInitCalled=true;
      lazyInit();
    }
    super.onBeforeRender();
  }

  protected abstract void lazyInit();
}</code>

Eigene Komponenten werden dann von dieser Klasse abgeleitet. Dieser Umbau hat keine Veränderung des Markup zur Folge, da keinerlei Hilfskomponenten eingefügt wurden.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.lazy;

import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.Model;

public class TestPanel extends AbstractLazyPanel
{
  public TestPanel(String id)
  {
    super(id);
  }

  @Override
  protected void lazyInit()
  {
    add(new Label("label",Model.of("Label")));
    add(new SimplePanel("panel"));
  }
}</code>

<code lang="html"><wicket:panel>
  <span wicket:id="label"></span>
  <br>
  <wicket:container wicket:id="panel"></wicket:container>
</wicket:panel></code>

Wie man sieht, lässt sich die neuen Klasse sehr einfach als Ersatz für die Panel-Klasse benutzen. Vielleicht ist dieser Ansatz ausbaufähig, so dass man durch eine verspätete Initialisierung auch die Probleme rund um TransparentResolver umgehen kann.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2010-01-20 09:28:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-20 08:28:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-lazy-init]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="init"><![CDATA[init]]></category>
		<category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="transparent-resolver"><![CDATA[transparent resolver]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386679787]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"240";s:5:"score";s:17:"129.4111864565043";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"29.006805626049157";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:18:"21.229024878897928";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:16:"17.5112642320669";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.269390698710406";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"249";s:5:"score";s:18:"15.003914219427413";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1810</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets die Wicket – verzögerte Initialisierung | wicket praxis erwähnt -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/www.wicket-praxis.de/blog/2010/01/20/wicket-lazy-init/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-20 12:22:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-20 11:22:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Dieser Eintrag wurde auf Twitter von Nick Wiedenbrueck, mosmann erwähnt. mosmann sagte: New blog post: Wicket - verzögerte Initialisierung http://www.wicket-praxis.de/blog/2010/01/20/wicket-lazy-init/ [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1812</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Wiedenbrueck]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nick.wiedenbrueck@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.91.39.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-20 12:32:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-20 11:32:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interessanter Beitrag. Wir benutzen diese Methode häufiger.

&gt; Wir müssen nur darauf achten, dass diese Initialisierung nur einmal durchgeführt wird
Als Variante kann man in onBeforeRender() auch zunächst alle Kind-Komponenten entfernen (removeAll()) und danach wieder neu erzeugen lassen, so dass die Kind-Komponenten bei jedem Rendern neu erzeugt werden. Dadurch erhält man quasi ein "AbstractRefreshingPanel", analog zu einer RefreshingView.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1816</wp:comment_id>
			<wp:comment_author><![CDATA[Martin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[funkattack@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.227.35.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-20 13:20:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-20 12:20:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Man sollte den if noch ein synchronized spendieren:

synchronized (this) {
    if (!_lazyInitCalled)
   {
      _lazyInitCalled=true;
      lazyInit();
   }
    super.onBeforeRender();
}]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1861</wp:comment_id>
			<wp:comment_author><![CDATA[Ilja Pavkovic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ilja.pavkovic@binaere-bauten.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.binaere-bauten.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.196.57.233]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-21 17:49:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-21 16:49:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[das liefert wicket alleine:

public void onBeforeRender() {
  if(!hasBeenRendered()) {
// initialize
  }
  super.onBeforeRender();
}]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1863</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-21 18:00:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-21 17:00:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[AFAIK werden die Komponenten dann aber erst initialisiert, wenn die Elternkomponente auch sichtbar ist.... aber sonst, ja, geht auch so.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1861</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1867</wp:comment_id>
			<wp:comment_author><![CDATA[Ilja Pavkovic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ilja.pavkovic@binaere-bauten.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.binaere-bauten.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.196.57.233]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-21 23:08:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-21 22:08:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[will man das denn vorher?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1863</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1872</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.86.168.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-22 10:48:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-22 09:48:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Es ist nicht auszuschließen.. wenn man z.B. über Events auch unsichtbare Komponenten erreichen möchte.. in der Palette-Komponente (wicket extensions) gab es mal einen Bug, der auf so eine Problemstellung zurückzuführen war..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1867</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1920</wp:comment_id>
			<wp:comment_author><![CDATA[Ilja Pavkovic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ilja.pavkovic@binaere-bauten.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.binaere-bauten.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.196.118.148]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-24 22:44:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-24 21:44:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[das stimmt.

Ich habe mir den sourcecode von Component noch mal näher angeschaut und glaube, dass man sich doch nicht auf hasBeenRendered verlassen sollte, das der Zustandswechsel dort von vielen Randbedingungen abhängt.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1872</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket - No TransparentResolver</title>
		<link>http://www.wicket-praxis.de/blog/2010/01/20/wicket-no-transparentresolver/</link>
		<pubDate>Wed, 20 Jan 2010 09:16:14 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[Wie ich im letzten Beitrag bereits angkündigt habe, kann man tatsächlich das TransparentResolver-Problem mit Hilfe der verzögerten Initialisierung lösen. Dazu muss die AbstractLazyPanel-Klasse nur ein wenig verändert werden.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.transparent.lazy;

import org.apache.wicket.Component;
import org.apache.wicket.MarkupContainer;
import org.apache.wicket.markup.html.panel.Panel;

public abstract class AbstractLazyPanel extends Panel
{
  boolean _lazyInitCalled;
  
  public AbstractLazyPanel(String id)
  {
    super(id);
  }

  @Override
  protected void onBeforeRender()
  {
    if (!_lazyInitCalled)
    {
      _lazyInitCalled=true;
      lazyInit();
    }
    super.onBeforeRender();
  }

  protected abstract MarkupContainer lazyInit();
}</code>

Die Methode lazyInit() liefert die Komponente zurück, unter der alle Kindkomponenten eingehangen werden müssen. Das sieht in eigenen Komponenten dann wie folgt aus:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.transparent.lazy;

import org.apache.wicket.MarkupContainer;
import org.apache.wicket.markup.html.WebMarkupContainer;

public abstract class BasePanel extends AbstractLazyPanel
{
  public BasePanel(String id)
  {
    super(id);
  }

  @Override
  protected MarkupContainer lazyInit()
  {
    WebMarkupContainer border = new WebMarkupContainer("border");
    add(border);
    return border;
  }
}</code>

Hier erstellen wir einen Container, den wir an ein div-Tag binden.

<code lang="html"><wicket:panel>
  Base
  <div style="border:1px solid blue" wicket:id="border">
    <wicket:child />
  </div>
  Base End
</wicket:panel></code>

Die davon abgeleitete Klasse sieht dann wie folgt aus:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.transparent.lazy;

import org.apache.wicket.MarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.Model;

public class SubPanel extends BasePanel
{
  public SubPanel(String id)
  {
    super(id);
  }

  @Override
  protected MarkupContainer lazyInit()
  {
    MarkupContainer root = super.lazyInit();
    root.add(new Label("label",Model.of("Sub")));
    return root;
  }
}</code>

<code lang="html"><wicket:extend>
  <span wicket:id="label"></span>
</wicket:extend></code>

Wie man sehen kann, wurde in diesem Beispiel sowohl Markup- als auch Komponentenvererbung benutzt. Trotzdem konnte auf den Einsatz von TransparentResolver verzichtet werden. Die Komponentenhierarchie entspricht der im Markup.

Ich hätte nicht gedacht, dass die Lösung so nahe liegt. Feedback wie immer willkommen...
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2010-01-20 10:16:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-20 09:16:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-no-transparentresolver]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="init"><![CDATA[init]]></category>
		<category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="transparent-resolver"><![CDATA[transparent resolver]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386688280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"237";s:5:"score";s:17:"129.4111864565043";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"29.006805626049157";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"28.656866714982048";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:18:"21.229024878897928";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"16.697991281779696";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.269390698710406";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>476319</wp:comment_id>
			<wp:comment_author><![CDATA[Indy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gqva0r3s24y@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://obajageluz.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 02:40:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 01:40:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A bit suiesrrpd it seems to simple and yet useful.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486690815.188246;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket - kombiniertes AutoCompleteBehavoir </title>
		<link>http://www.wicket-praxis.de/blog/2010/02/05/wicket-combined-autocomplete-behavoir/</link>
		<pubDate>Fri, 05 Feb 2010 08:09:25 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[Eine der ersten Demonstrationen für die Möglichkeiten von Ajax bestand darin, dass man dem Nutzer während er Eingabe von Informationen Vorschläge unterbreitete, was er denn wohl gemeint haben könnte. Das ist lange her und gehört zum guten Ton einer moderneren Webanwendung. Wicket liefert das notwendige Werkzeug bereits mit, so dass sehr einfach ist, den Nutzer auf diese Art zu unterstützen.

Etwas komplizierter wird es, wenn man dem Nutzer Vorschläge unterbreiten möchte, die nicht nur für ein Eingabefeld relevant sind, sondern wie z.B. bei der Postleitzahl auch den Wert eines anderen Eingabefeldes beeinflussen kann. Im folgenden Beispiel versuchen wir, dem Nutzer bei der Eingabe einer Postleitzahl auch den Ort mit anzuzeigen und den Wert in das Ortsfeld zu übernehmen.

Normalerweise kommen die Daten für die Postleitzahlen aus einer Datenbank, in unserem Beispiel begnügen wir uns mit einer sehr kleinen Auswahl:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.autocomplete;

import java.io.Serializable;

public class PlzOrt implements Serializable
{
  String _plz;
  
  String _ort;
  
  public PlzOrt(String plz, String ort)
  {
    _plz=plz;
    _ort=ort;
  }
  
  public String getPlz()
  {
    return _plz;
  }
  
  public String getOrt()
  {
    return _ort;
  }
}</code>

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.autocomplete;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class PlzOrtListFactory implements Serializable
{
  List<PlzOrt> _all=new ArrayList<PlzOrt>();
  
  {
    _all.add(new PlzOrt("23562", "Lübeck"));
    _all.add(new PlzOrt("23858", "Reinfeld"));
    _all.add(new PlzOrt("14199", "Berlin"));
    _all.add(new PlzOrt("70619", "Stuttgart"));
    
  }
  
  public PlzOrtListFactory()
  {
  }
  
  public List<PlzOrt> getList(String plz)
  {
    List<PlzOrt> ret=null;
    if ((plz!=null) && (plz.length()>0))
    {
      ret=new ArrayList<PlzOrt>();
      for (PlzOrt po : _all)
      {
        if (po.getPlz().startsWith(plz)) ret.add(po);
      }
    }
    return ret;
  }
}
</code>

Die Methode getList() liefert dann die passende Teilmenge für die eingegebene Postleitzahl. Wenn der Nutzer also "23" eingeben hat, werden die ersten beiden Einträge aus der Liste gewählt.

Wicket hat die Möglichkeit, dem Nutzer Vorschläge unterbreiten zu können, von der Darstellung dieser Vorschläge getrennt. Die relevanten Anpassungen müssen in unserem Fall in der Darstellungskomponente vorgenommen werden. Dazu leiten wir einen eigenen Renderer von einer passenden Wicket-Basisklasse ab:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.autocomplete;

import org.apache.wicket.Response;
import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteRenderer;
import org.apache.wicket.markup.html.form.FormComponent;

public class PlzOrtRenderer extends AbstractAutoCompleteRenderer<PlzOrt>
{
  FormComponent<?> _ortInput;
  
  public PlzOrtRenderer(FormComponent<?> ortInput)
  {
    _ortInput=ortInput;
    _ortInput.setOutputMarkupId(true);
  }
  
  @Override
  protected String getTextValue(PlzOrt object)
  {
    return object.getPlz();
  }

  @Override
  protected void renderChoice(PlzOrt object, Response response, String criteria)
  {
    response.write(object.getPlz() + "-" + object.getOrt());
  }
  
  @Override
  protected CharSequence getOnSelectJavascriptExpression(PlzOrt plzort)
  {
    StringBuilder js = new StringBuilder();
    js.append("wicketGet('").append(_ortInput.getMarkupId()).append("').value ='" + plzort.getOrt() + "';");
    js.append("input");
    return js.toString();
  }

}</code>

In unserer Variante werden folgende Anpassungen vorgenommen: Für das zweite Eingabefeld wird die Ausgabe der MarkupId aktiviert, da wir uns später im Javascript darauf beziehen. Die Methode getTextValue() liefert den Wert zurück, der dann im Eingabefeld für die Postleitzahl erscheint. In der Methode renderChoice() wird die Auswahl gerendert. In unserem Fall zeigen wir Postleitzahl und Ort an. Damit der Ortsname korrekt im anderen Eingabefeld erscheint, übergeben wir durch das Überschreiben der Methode getOnSelectJavascriptExpression() die nötigen Javascript-Aufrufe. Die erste Zeile ermittelt das Objekt und setzt das Atrribut "input" auf den gewünschten Wert. Dabei ist zu beachten, dass die Zeile "input" den Wert darstellt, der in das Postleitzahlfeld geschrieben werden soll. Es sollte an dieser Stelle keine return-Anweisung aufgerufen werden.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.autocomplete;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior;
import org.apache.wicket.markup.html.form.FormComponent;


class PlzAutoCompleteBehavior extends AutoCompleteBehavior<PlzOrt>
{
  PlzOrtListFactory _listFactory;
  
  public PlzAutoCompleteBehavior(PlzOrtListFactory listFactory, FormComponent<?> ortInput)
  {
    super(new PlzOrtRenderer(ortInput));
    
    _listFactory=listFactory;
  }

  @Override
  protected Iterator<PlzOrt> getChoices(String input)
  {
    List<PlzOrt> list = _listFactory.getList(input);
    if (list!=null) return list.iterator();
    return Collections.EMPTY_LIST.iterator();
  }
}</code>

Wir leiten für dieses Beispiel unsere eigenes Behavior passend ab (Natürlich ist es möglich, das Behavior und den Renderer allgemeingültiger zu gestalten. Darauf wurde aber zu Gunsten der Lesbarkeit verzichtet.) Hinweis: Der Rückgabewert von getChoices() darf in diesem Fall nicht null sein.

Jetzt können wir endlich das Formular bauen und das Behavior einsetzen:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.form.autocomplete;

import org.apache.wicket.extensions.ajax.markup.html.autocomplete.DefaultCssAutocompleteTextField;
import org.apache.wicket.markup.html.CSSPackageResource;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.Model;

public class FormAutoCompletePage extends WebPage
{
  public FormAutoCompletePage()
  {
    add(CSSPackageResource.getHeaderContribution(DefaultCssAutocompleteTextField.class,"DefaultCssAutocompleteTextField.css"));
    
    Form<Void> form = new Form<Void>("form");
    
    TextField<String> plz = new TextField<String>("plz",Model.of(""));
    TextField<String> ort = new TextField<String>("ort",Model.of(""));
    
    plz.add(new PlzAutoCompleteBehavior(new PlzOrtListFactory(),ort));
    
    form.add(plz);
    form.add(ort);
    
    add(form);
  }
}</code>

Für die Darstellung der Auswahl müssten wir jetzt noch etwas CSS bemühen. Das ersparen wir uns in diesem Beispiel, in dem wir die CSS-Datei der DefaultCssAutocompleteTextField-Klasse einbinden.

Eine kleine Besonderheit ist zu beachten: Man muss die Vorschläge, die der Browser dem Nutzer macht, unterbinden, damit die beiden Auswahlmöglichkeiten nicht kollidieren. Dazu fügt man im Markup das Attribut "autocomplete" mit dem Wert "off" hinzu.

<code lang="html"><html>
  <head>
    <title>FormAutoCompletePage</title>
  </head>
  <body>
    <form wicket:id="form">
      Postleitzahl: <input wicket:id="plz" autocomplete="off" ></input><br>
      Ort: <input wicket:id="ort" autocomplete="off" ></input><br>
      <input type="submit" value="Button"> 
    </form>
  </body>
</html></code>

Und so sieht es dann aus:

<img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/02/wicket-combined-autocomplete-behavoir.jpg" alt="wicket-combined-autocomplete-behavoir" title="wicket-combined-autocomplete-behavoir" width="251" height="90" class="aligncenter size-full wp-image-245" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2010-02-05 09:09:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-05 08:09:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-combined-autocomplete-behavoir]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autocomplete"><![CDATA[autocomplete]]></category>
		<category domain="post_tag" nicename="behavior"><![CDATA[behavior]]></category>
		<category domain="post_tag" nicename="form"><![CDATA[form]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386716228]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:16:"85.9561703307669";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"120";s:5:"score";s:18:"36.125230339605736";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"213";s:5:"score";s:17:"27.95644917253401";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"17.25831309552855";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"16.236225473415498";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"14.33876320620079";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Buchkritik bei it-republik.de</title>
		<link>http://www.wicket-praxis.de/blog/2010/02/11/buchkritik-praxisbuch-wicket/</link>
		<pubDate>Thu, 11 Feb 2010 08:46:12 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[Danke für die gute <a href="http://it-republik.de/jaxenter/buchtipps/Praxisbuch-Wicket-0810.html">Rezension</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2010-02-11 09:46:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-11 08:46:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[buchkritik-praxisbuch-wicket]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="buch"><![CDATA[buch]]></category>
		<category domain="post_tag" nicename="rezension"><![CDATA[rezension]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386677652]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"93.24225656015221";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"27.983334165636286";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"168";s:5:"score";s:18:"24.614088067874484";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"125";s:5:"score";s:18:"23.167697279014952";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"15.910298677454866";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"7.231953944297662";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Extensions - Anpassungen am ModalWindow</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/03/wicket-extensions-anpassungen-am-modalwindow/</link>
		<pubDate>Wed, 03 Mar 2010 07:42:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket liefert im Bereich Extensions Komponenten mit, die zwar nicht direkt zum Kern von Wicket gehören, die aber fast so häufig wie die Standardwicketkomponenten zum Zuge kommen. Im folgenden Beitrag zeige ich, wie man die ModalWindow-Komponente benutzen kann und wie man die Darstellung an eigene Wünsche anpasst. Als erstes benötigen wir eine Komponente, die durch das ModalWindow angezeigt werden soll.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.modal;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;
import org.apache.wicket.markup.html.panel.Panel;

public abstract class AbstractModalClosePanel extends Panel
{
  public AbstractModalClosePanel(ModalWindow modalWindow)
  {
    super(modalWindow.getContentId());
    
    add(new AjaxLink<Void>("link")
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        AbstractModalClosePanel.this.onClick(target);
      }
    });
  }
  
  public abstract void onClick(AjaxRequestTarget target);
}</code>

Die ModalWindow-Komponente kann nur eine andere Komponente anzeigen. Daher ist die Komponenten-ID fest definiert. Daher macht es Sinn, statt einer eigenen ID einfach das ModalWindow, in dem die Komponente angezeigt werden soll als Parameter zu übergeben. Damit diese Komponente auch eine Funktion bereitstellt, fügen wir einen Link hinzu. Wichtig: Wenn man Formulare benutzen möchte, muss man diese bei Anzeige durch ein ModalWindow per Ajax absenden.

Das Markup der Komponente ist wenig überraschend:
<code lang="html"><wicket:panel>
  <div>
    Nothing to hide:)
    <a wicket:id="link">Link</a>
  </div>
</wicket:panel></code>

Die ModalWindow-Komponente unterscheidet sich von anderen Komponenten in einem wesentlichen Punkt. Die Darstellung wird nicht durch ein Markup realisiert, dass man überschreiben könnte. Der Rahmen für das Fenster wird per Javascript erzeugt. Um das Aussehen der Komponente anzupassen müssen wir also etwas tiefer in die Trickkiste greifen.

In diesem Beispiel nehmen wir Veränderungen an verschiedenen Stellen vor. Fangen wir mit den Grafiken für den Rahmen an. Der Einfachheit halber verändere ich nur die Farbwirkung aber nicht die Dimensionen, so dass ich die vorhandenen Grafiken (die man sich aus dem wicket-extension.jar extrahieren kann) nur leicht verändere:

<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-alpha.png"><img class="alignnone size-full wp-image-251" title="frame-custom-1-alpha" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-alpha.png" alt="frame-custom-1-alpha" width="100" height="100" /></a><a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-ie.png"><img class="alignnone size-full wp-image-252" title="frame-custom-1-ie" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-1-ie.png" alt="frame-custom-1-ie" width="100" height="100" /></a><a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-alpha.png"><img class="alignnone size-full wp-image-253" title="frame-custom-2-alpha" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-alpha.png" alt="frame-custom-2-alpha" width="20" height="100" /></a><a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-ie.png"><img class="alignnone size-full wp-image-254" title="frame-custom-2-ie" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/frame-custom-2-ie.png" alt="frame-custom-2-ie" width="20" height="100" /></a>

Es gibt zwei Grafiken, wobei es für jede noch eine Version für den InternetExplorer gibt, die auf transparente Schatten verzichtet (der InternetExplorer hat da Schwierigkeiten, ähm.. nicht nur da). Wie man sieht befinden sich die Grafikinformationen für die Ränder, Ecken und Buttons in einer Grafik. Das Stylesheet sorgt dafür, dass an der richtigen Stelle die richtige Grafik eingeblendet wird. Daher müssen wir eine eigene Stylesheet-Datei einbinden, die unsere Anpassungen wiederspiegelt. Auch an dieser Stelle ist es sinnvoll, sich den Inhalt der ModalWindow-eigenen Stylesheet-Datei anzuschauen.

<code lang="css">div.wicket-modal div.w_content_3
{
  border:0px;
}

div.wicket-modal div.w_caption
{
  background-color: inherit;
}

div.wicket-modal a.w_close {  
  top: 3px;
}

div.wicket-modal div.custom div.w_left,
div.wicket-modal div.custom div.w_right {
  background-image: url('frame-custom-2-alpha.png'); 
  _background-image: url('frame-custom-2-ie.png');
}


div.wicket-modal div.custom div.w_top,
div.wicket-modal div.custom div.w_bottom,
div.wicket-modal div.custom div.w_topLeft,
div.wicket-modal div.custom div.w_topRight,
div.wicket-modal div.custom div.w_bottomRight,
div.wicket-modal div.custom div.w_bottomLeft,
div.wicket-modal div.custom a.w_close {
  background-image: url('frame-custom-1-alpha.png'); 
  _background-image: url('frame-custom-1-ie.png');
}</code>

Wie ich bereits weiter oben erwähnt habe, wird das Html für den Rahmen nicht wie üblich sondern per Javascript erzeugt. Da wir auch an dieser Stelle Anpassungen vornehmen wollen, müssen wir die entsprechende Funktion überschreiben:

<code lang="javascript">Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
  var s =
      "<div class=\"wicket-modal\" id=\""+idWindow+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
      "<div id=\""+idClassElement+"\">"+
        "<div class=\"w_caption\"  id=\""+idCaption+"\">"+
          "<a class=\"w_close\" href=\"#\"></a>"+                 
          "<span id=\""+idCaptionText+"\" class=\"w_captionText\"></span>"+
        "</div>"+
        
        "<div class=\"w_top_1\">"+

        "<div class=\"w_topLeft\" id=\""+idTopLeft+"\">"+
        "</div>"+       

        "<div class=\"w_topRight\" id=\""+idTopRight+"\">"+
        "</div>"+

        "<div class=\"w_top\" id='"+idTop+"'>"+                 
        "</div>"+

        "</div>"+
                
        "<div class=\"w_left\" id='"+idLeft+"'>"+
          "<div class=\"w_right_1\">"+
            "<div class=\"w_right\" id='"+idRight+"'>"+
              "<div class=\"w_content_1\" onmousedown=\"if (Wicket.Browser.isSafari()) { event.ignore = true; }  else { Wicket.stopEvent(event); } \">"+                                      
              
                "<div class=\"w_content_2\">"+
                "<div class=\"w_content_3\">"+
                  "<div class=\"w_content\">";
        if (isFrame) {
          if (Wicket.Browser.isIELessThan7() || !Wicket.Browser.isIE()) {                       
            s+= "<iframe src='\/\/:' frameborder=\"0\" id='"+idContent+"' allowtransparency=\"false\" style=\"height: 200px\">"+
                    "</iframe>";
          } else {
            s+= "<iframe src='about:blank' frameborder=\"0\" id='"+idContent+"' allowtransparency=\"false\" style=\"height: 200px\">"+
            "</iframe>";
          }
        } else {
          s+=
                    "<div id='"+idContent+"'></div>";
        }
          s+=             
                  "</div>"+
                "</div>"+
                "</div>"+
              "</div>"+
            "</div>"+
          "</div>"+
        "</div>"+


        "<div class=\"w_bottom_1\" id=\""+idBottom+"\">"+         
          
          "<div class=\"w_bottomRight\"  id=\""+idBottomRight+"\">"+
          "</div>"+
          
          "<div class=\"w_bottomLeft\" id=\""+idBottomLeft+"\">"+
          "</div>"+

          "<div class=\"w_bottom\" id=\""+idBottom+"\">"+       
          "</div>"+       


        "</div>"+       


      "</div>"+
    "</form></div>";
    
    return s;
}</code>

Da die Javascript-Datei der ModalWindow-Komponente automatisch eingebunden wird (da von dieser Klasse abgeleitet wird), muss ich nur diese eine Funktion überschreiben. Ich habe mich in diesem Beispiel darauf beschränkt, den Bereich für die Überschrift und den CloseButton oberhalb des Rahmens darstellen zu lassen (Das div mit der Klasse "w_caption").

In unsere Komponentenklasse betreten wir nun wieder vertrautes Terrain. Wir leiten von ModalWindow ab und passen ein paar grundsätzliche Dinge an:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.modal;

import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;
import org.apache.wicket.markup.html.CSSPackageResource;
import org.apache.wicket.markup.html.JavascriptPackageResource;
import org.apache.wicket.markup.html.resources.CompressedResourceReference;
import org.apache.wicket.markup.html.resources.JavascriptResourceReference;

public class CustomModalWindow extends ModalWindow
{
  private static ResourceReference CSS = new CompressedResourceReference(CustomModalWindow.class, "styles/custom-modal.css");
  private static ResourceReference JAVASCRIPT = new JavascriptResourceReference(CustomModalWindow.class,  "styles/custom-modal.js");
  
  public CustomModalWindow(String id)
  {
    super(id);
    
    setCssClassName("custom");
    
    add(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));
    add(CSSPackageResource.getHeaderContribution(CSS));
    
    setCloseButtonCallback(new CloseButtonCallback()
    {
      public boolean onCloseButtonClicked(AjaxRequestTarget target)
      {
        return onCloseClicked(target);
      }
    });
    
    setWindowClosedCallback(new WindowClosedCallback()
    {
      public void onClose(AjaxRequestTarget target)
      {
        CustomModalWindow.this.onClose(target);
      }
    });
  }
  
  protected void onClose(AjaxRequestTarget target)
  {
    
  }

  protected boolean onCloseClicked(AjaxRequestTarget target)
  {
    return true;
  }
}</code>

Wir setzen die Css-Klasse für den Rahmen, fügen unsere CSS- und Javascript-Anpassungen hinzu (da unsere Referenzen nach den ModalWindow-Referenzen eingebunden werden, überschreiben wir sowohl die CSS-Definitionen als auch die Javascript-Funktionen). Außerdem fügen wir zwei Callbacks hinzu, die auf einen Klick auf das Schließen-Symbol reagieren. Für diese Komponenten benötigen wir keine eigene Markup-Datei.

Jetzt möchten wir diese Komponente endlich verwenden. Dazu legen wir eine Seitenklasse an:

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.modal;

import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.util.time.Duration;

public class ModalWindowPage extends WebPage
{
  public ModalWindowPage()
  {
    final CustomModalWindow modalWindow = new CustomModalWindow("modal");
    
    modalWindow.setTitle("Popup");
    modalWindow.setInitialWidth(400);
    modalWindow.setInitialHeight(400);
    modalWindow.setResizable(true);
    modalWindow.setContent(new AbstractModalClosePanel(modalWindow)
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        modalWindow.close(target);
      }
    });
    add(modalWindow);
    
    add(new AjaxLink<Void>("open")
    {
      @Override
      public void onClick(AjaxRequestTarget target)
      {
        modalWindow.show(target);
      }
    });
    
    add(new AbstractAjaxTimerBehavior(Duration.seconds(2))
    {
      @Override
      protected void onTimer(AjaxRequestTarget target)
      {
        modalWindow.show(target);
        stop();
      }
    });
  }
}</code>

Wir erstellen eine Instanz unsere ModalWindow-Komponente und fügen ein Panel als Content-Element hinzu. Dabei wird beim Klick auf den Link innerhalb der Komponente das Fenster geschlossen. Da das ModalWindow per Ajax geöffnet und geschlossen werden muss, benötigen wir zum Öffnen einen AjaxLink. Wenn man dem Nutzer das Fenster bereits beim Aufruf der Seite einmalig anzeigen möchte, kann man sich damit behelfen, das man eine Instanz AbstractAjaxTimerBehavior-Klasse erstellt und die Zeit entsprechend klein wählt (weniger als die zwei Sekunden aus diesem Beispiel). In der onTimer()-Methode führt der Aufruf von stop() dazu, dass die Methode nach der abgelaufenen Zeit nicht noch einmal aufgerufen wird.

<code lang="html"><html>
  <head>
    <title>ModalWindow Page</title>
  </head>
  <body>
    <div wicket:id="modal"></div>
    <a wicket:id="open">Open</a>
  </body>
</html></code>

Und so sieht das Ergebnis aus:

<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-custom-modalwindow.jpg"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-custom-modalwindow-382x450.jpg" alt="wicket-custom-modalwindow" title="wicket-custom-modalwindow" width="382" height="450" class="aligncenter size-medium wp-image-255" /></a>

Der Aufwand für eine eigene Komponente ist zwar wesentlich höher als in anderen Fällen, aber der Aufwand lohnt schon deshalb, weil dann das Aussehen der ModalWindow-Kompoente zur restlichen Anwendung passt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 08:42:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 07:42:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-extensions-anpassungen-am-modalwindow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="modalwindow"><![CDATA[modalwindow]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386687777]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"39.78366718046976";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"35.95168990498365";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"16.982797841567873";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"16.34167722953802";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"237";s:5:"score";s:18:"15.003914219427413";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9510</wp:comment_id>
			<wp:comment_author><![CDATA[Greg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.findfiles.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.3.249.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-02-25 00:07:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-02-24 23:07:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michael,

genau nach dieser Lösung habe ich gesucht und sie hier gefunden. Danke! 
Leider habe ich ein kleines Problem. Das CustomModalWindow, das ich nicht über ein Panel, sondern über eine WebPage einbinde zeigt zwar alle vier gerundeten Ecken, aber nicht den linken und den oberen Balken. Auch ist der Hintergrund des Containers hinter dem Close Button nicht transparent. Ich verwende Wicket 1.4.19. Was muss ich anpassen damit die Darstellung vollständig ist?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9565</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.21.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-02-26 17:19:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-02-26 16:19:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das kann man so pauschal nicht beantworten. Vermutlich liegt es am CSS. Weitere Einzelheiten per E-Mail.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Heatmap - Ajax mit Parametern</title>
		<link>http://www.wicket-praxis.de/blog/2010/03/07/wicket-heatmap-ajax-mit-parametern/</link>
		<pubDate>Sun, 07 Mar 2010 15:22:07 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[Wer wissen möchte, wohin die Nutzer in der eigenen Anwendung so klicken (z.B. auf Dinge, von denen man selbst nicht annehmen würde, das Nutzer darauf klicken), der muss jeden Mausklick des Nutzers aufzeichnen. Aus diesen Daten kann man dann ermitteln, wohin die Nutzer ihren Mauszeiger so wandern lassen. Dafür gibt es bereits Opensourcelösungen, die meist auf PHP basieren. Unter dem Suchbergriff <a href="http://de.wikipedia.org/wiki/Heatmap" rel="nofollow" target="_blank">Heatmap</a> wird man auch bei Google fündig. Da sich alles in diesem Blog um Java und dann noch um Wicket dreht, lag es natürlich nahe, zu prüfen, ob und wie man diese Anforderung mit Wicket realisieren kann. Dieser Beitrag wäre viel kürzer, wenn man die Frage nach dem "ob" mit nein beantworten müsste. Kommen wir also zum "wie?".

Für die Umsetzung habe ich mir anfänglich einiges aus dem Beispielen aus folgendem <a href="http://blog.corunet.com/the-definitive-heatmap/">Blogbeitrag</a> entlehnt. Im Laufe der Zeit ist zwar davon nicht mehr viel zu sehen, das Grundprinzip ist aber das Gleiche geblieben.

Folgende Fragestellung stand am Anfang dieses Versuchs: Wie kann man mit Wicket Werte in einem AjaxRequest übergeben (z.B. die Mausposition). Die erste Idee bestand darin, ein unsichtbares Formular zu erstellen, in das man die Werte per Javascript einfügt und dieses Formular per Ajax abschickt. Das hat auch funktioniert, war aber irgendwie auch ein wenig zu aufwendig. Nach einer Reihe missglückter Versuche, den richtigen Ansatz zu finden, stellte ich diese Frage in der Wicket-Mailingliste und bekam den entscheidenen Tipp von Ernesto Reinaldo Barreiro. Es gab einen <a href="http://londonwicket.googlecode.com/files/LondonWicket-Paint.pdf" target="_blank">Vortrag</a> der <a href="http://code.google.com/p/londonwicket/" target="_blank">London Wicket User Group</a>, der dieses Problem löste. Mit dieser Vorarbeit begann ich das Thema umzusetzen. Dabei hat sich die eigene Implementierung vom Original entfernt. Hier nun Schritt für Schritt der vollständige Code:

<strong>AbstractParameterizedDefaultAjaxBehavior</strong>

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import java.util.HashMap;
import java.util.Map;

import org.apache.wicket.Request;
import org.apache.wicket.RequestCycle;
import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.IHeaderResponse;
import org.apache.wicket.util.time.Duration;

public abstract class AbstractParameterizedDefaultAjaxBehavior extends AbstractDefaultAjaxBehavior
{
  static int sec=0;
  
  private Duration _throttleDelay;

  @Override
  public void renderHead(IHeaderResponse response)
  {
    super.renderHead(response);
    response.renderJavascriptReference(new ResourceReference(AbstractParameterizedDefaultAjaxBehavior.class,"AbstractParameterizedDefaultAjaxBehavior.js"));
  }
  
  @Override
  protected void respond(AjaxRequestTarget target)
  {
    Request request = RequestCycle.get().getRequest();
    
    Map<String,Object> map=new HashMap<String, Object>();
    Parameter<?>[] parameter = getParameter();
    for (Parameter<?> p : parameter)
    {
      String svalue = request.getParameter(p.getName());
      if (svalue!=null)
      {
        Object value=getComponent().getConverter(p.getType()).convertToObject(svalue, getComponent().getLocale());
        map.put(p.getName(), value);
      }
    }
    
    respond(target, new ParameterMap(map));
  }
  
  @Override
  public CharSequence getCallbackUrl(boolean onlyTargetActivePage)
  {
    StringBuilder sb=new StringBuilder();
    sb.append(super.getCallbackUrl(onlyTargetActivePage));
    
    Parameter<?>[] parameter = getParameter();
    for (Parameter<?> p : parameter)
    {
      sb.append("&").append(p.getName()).append("='+").append(p.getJavascript()).append("+'");
    }
    
    return sb.toString();
  }
  
  @Override
  protected final CharSequence getCallbackScript()
  {
    if (_throttleDelay!=null)
    {
      return throttleScript(super.getCallbackScript(),"thw"+(sec++),_throttleDelay);
    }
    return super.getCallbackScript();
  }
  
  protected static class Parameter<T>
  {
    String _name;
    String _javascript;
    Class<T> _type;
    
    protected Parameter(String name,Class<T> type,String javascript)
    {
      _name=name;
      _type=type;
      _javascript=javascript;
    }
    
    protected String getName()
    {
      return _name;
    }
    protected String getJavascript()
    {
      return _javascript;
    }
    protected Class<T> getType()
    {
      return _type;
    }
  }
  
  protected static <T> Parameter<T> of(String name,Class<T> type,String javascript)
  {
    return new Parameter<T>(name, type, javascript);
  }
  
  protected static class ParameterMap
  {
    Map<String, Object> _map;
    
    protected ParameterMap(Map<String, Object> map)
    {
      _map=map;
    }
    
    public <T> T getValue(Parameter<T> parameter)
    {
      return (T) _map.get(parameter.getName());
    }
  }
  
  public final AbstractParameterizedDefaultAjaxBehavior setThrottleDelay(Duration throttleDelay)
  {
    _throttleDelay=throttleDelay;
    return this;
  }
  
  protected abstract void respond(AjaxRequestTarget target,ParameterMap parameterMap);
  
  protected abstract Parameter<?>[] getParameter();

}</code>

Die drei wichtigsten Bestandteile dieser Klasse sind folgende: Die Klasse Parameter definiert den Namen, den Typ, und das Javascript, das für das Ermitteln des Wertes im Browser aufgerufen muss. Die Methode respond(AjaxRequestTarget) liest die Werte aus dem Request aus, konvertiert diese in den gewünschen Typ und ruf damit eine zu überschreibende Methode auf. Die Methode getCallbackUrl() liefert das Javascript-Fragment für die Url, die dann per Ajax aufgerufen wird.

Um die Position des Mauszeigers ermitteln zu können, muss man sich mit einer eigenen Funktion für so einen Event registrieren. Damit mehr als eine Funktion auf so einen Event reagieren kann, sollte man die Funktion, die davor registriert war, ebenfalls aufrufen. Um für diese Problematik, die vermutlich in allen abgeleiteten Klassen vorhanden ist, besser lösen zu können, binden wir automatisch eine hilfreiche Javascript-Klasse ein.

<code lang="javascript">Callback = {
  create: function(oldCallback,newCallback)
  {
    return function(a,b,c,d,e,f)
    {
      if (oldCallback) 
      {
        oldCallback(a,b,c,d,e,f);
      }
      newCallback(a,b,c,d,e,f);
    }
  },
};</code>

Der Code sieht etwas merkwürdig aus. Das liegt an folgenden Gründen: zum einen stehe ich mit Javascript immer noch auf Kriegsfuß (mit Wicket kann man den Javascript-Teil sehr schön verstecken) und habe daher keine geeignete Lösung gefunden, mit der es mir möglich war, alle Argumente des Funktionsaufrufs an die zwei Funktionen weiterzureichen. Da es aber Javascript egal ist, mit wie vielen Parametern man eine Funktion aufruft, werden auf diese Weise bis zu 6 Übergabeparameter weitergereicht. Für Hinweise an dieser Stelle bin ich extrem dankbar.

<strong>WicketWindowJavascript</strong>

Für vieles bringt Wicket bereits fertige Implementierungen mit. Allerdings verstecken sich diese manchmal an unauffälligen Stellen. Für das Ermitteln des sichtbaren Bereichs fand ich die nötigen Javascript-Funktionen bei der ModelWindow-Klasse. Da ich nicht das vollständige ModalWindow-Javascript einbinden wollte, habe ich diese allgemeinen Funktionen in eine eigene Resource verpackt.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import org.apache.wicket.ResourceReference;

public class WicketWindowJavascript
{
  private WicketWindowJavascript()
  {
  }
  
  public static final ResourceReference RESOURCE=new ResourceReference(WicketWindowJavascript.class,"WicketWindowJavascript.js");
}</code>

<code lang="javascript">// aus der Datei modal.js zur Klasse ModalWindow

if (typeof(Wicket.Window) == "undefined") {
  Wicket.Window = { };
}

/**
 * Returns the height of visible area.
 */
Wicket.Window.getViewportHeight = function() {
  if (window.innerHeight != window.undefined) 
    return window.innerHeight;
  
  if (document.compatMode == 'CSS1Compat') 
    return document.documentElement.clientHeight;
    
  if (document.body) 
    return document.body.clientHeight;
     
  return window.undefined; 
}

/**
 * Returns the width of visible area.
 */
Wicket.Window.getViewportWidth =  function() {
  if (window.innerWidth != window.undefined) 
    return window.innerWidth;
     
  if (document.compatMode == 'CSS1Compat') 
    return document.documentElement.clientWidth; 
    
  if (document.body) 
    return document.body.clientWidth;
     
  return window.undefined;
}

/**
 * Returns the horizontal scroll offset
 */
Wicket.Window.getScrollX = function() {
  var iebody = (document.compatMode && document.compatMode != "BackCompat") ? document.documentElement : document.body  
  return document.all? iebody.scrollLeft : pageXOffset
}

/**
 * Returns the vertical scroll offset
 */
Wicket.Window.getScrollY = function() {
  var iebody = (document.compatMode && document.compatMode != "BackCompat") ? document.documentElement : document.body  
  return document.all? iebody.scrollTop : pageYOffset
}


/**
 * Returns element offset
 */
Wicket.Window.getXYOffset = function(obj)
{
  var curleft = 0;
  var curtop = 0;
  if (obj.offsetParent)
  {
    while (obj.offsetParent)
    {
      curleft += obj.offsetLeft;
      curtop += obj.offsetTop;
      obj = obj.offsetParent;
    }
  }
  else
  {
    if (obj.x)
    {
      curleft += obj.x;
    }
    if (obj.y)
    {
      curtop += obj.y;
    }
  }
  
  if (Wicket.Browser.isIE())
  {
    bodyElement=document.getElementsByTagName('body')[0];
    // In IE there's a default margin in the page body. If margin's not defined,
    // use defaults
    var marginLeftExplorer  = parseInt(bodyElement.style.marginLeft);
    var marginTopExplorer   = parseInt(bodyElement.style.marginTop);
    /* assume default 10px/15px margin in explorer */
    if (isNaN(marginLeftExplorer)) {marginLeftExplorer=10;}
    if (isNaN(marginTopExplorer)) {marginTopExplorer=15;}
    curleft=curleft+marginLeftExplorer;
    curtop=curtop+marginTopExplorer;
  }

  return [curleft,curtop];
}</code>

Hinzugefügt habe ich nur die Methode Wicket.Window.getXYOffset(), um den Offset für ein bestimmtes oder das erste Kindelement der Seite ermitteln zu können. Eine Klasse, die diese Methoden benötigt, muss die Resource entsprechend einbinden.

<strong>WindowResizeBehavior</strong>

Um die Heatmap in der richtigen Größe zeichnen zu können, benötigen wir Informationen über die Dimensionen des sichtbaren Bereichs. Für window.onresize wird ein neuer Callback registriert. Die Werte können über die ensprechend Wicket.Window-Funktionen ermittelt werden. Daher wird nicht nur der Callback registiert, sondern die Funktion nach dem Laden der Seite direkt aufgerufen. Auf diese Weise bekommen wir die Informationen über den sichtbaren Bereich nicht erst, wenn der Nutzer die Fenstergröße verändert.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.IHeaderResponse;
import org.apache.wicket.util.time.Duration;

public abstract class WindowResizeBehavior extends AbstractParameterizedDefaultAjaxBehavior
{
  static final Parameter<Integer> WIDTH=of("width", Integer.class, "Wicket.Window.getViewportWidth()");
  static final Parameter<Integer> HEIGHT=of("height", Integer.class, "Wicket.Window.getViewportHeight()");

  @Override
  public void renderHead(IHeaderResponse response)
  {
    super.renderHead(response);
    response.renderJavascriptReference(WicketWindowJavascript.RESOURCE);
    response.renderOnDomReadyJavascript(getJavascript());
    response.renderOnDomReadyJavascript(getCallbackScript().toString());
  }
  
  protected final String getJavascript()
  {
    return "window.onresize = Callback.create(window.onresize,function () {"+getCallbackScript()+"});";
  }

  @Override
  protected final Parameter<?>[] getParameter()
  {
    return new Parameter<?>[]{ WIDTH,HEIGHT};
  }
  
  @Override
  protected void respond(AjaxRequestTarget target, ParameterMap parameterMap)
  {
    onResize(target, parameterMap.getValue(WIDTH), parameterMap.getValue(HEIGHT));    
  }
  
  protected abstract void onResize(AjaxRequestTarget target, int width, int height);
}</code>

<strong>ElementOffsetBehavior</strong>

Die Bestimmung der richtigen Mauskoordinaten gestaltet sich insofern schwierig, als das nicht jede Webseite bei jeder Fenstergröße gleich aussieht. Damit die Koordinaten bei der Auswertung verwendbar bleiben, berechnen wir die Position in Relation zu einem Element, dass den Rahmen der Seite darstellen sollte (z.B. das erste div-Tag innerhalb des body-Tags, dass auf eine feste Breite gesetzt wurde und im sichtbaren Bereich zentriert dargestellt wird).

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.IHeaderResponse;

import de.wicketpraxis.web.blog.pages.questions.ajax.parameter.AbstractParameterizedDefaultAjaxBehavior.Parameter;

public abstract class ElementOffsetBehavior extends AbstractParameterizedDefaultAjaxBehavior
{
  static final Parameter<Integer> X_OFFSET=of("xOffset", Integer.class, "xOffset");
  static final Parameter<Integer> Y_OFFSET=of("yOffset", Integer.class, "yOffset");
  
  private String _contentId;

  @Override
  public void renderHead(IHeaderResponse response)
  {
    super.renderHead(response);
    response.renderJavascriptReference(WicketWindowJavascript.RESOURCE);
    response.renderJavascriptReference(new ResourceReference(ElementOffsetBehavior.class,"ElementOffsetBehavior.js"));
    response.renderOnDomReadyJavascript(getJavascript());
  }
  
  public ElementOffsetBehavior()
  {
    
  }
  
  public ElementOffsetBehavior(String contentId)
  {
    _contentId=contentId;
  }
  
  protected final String getJavascript()
  {
    if (_contentId!=null) return "ElementOffsetBehavoir.init(function (xOffset,yOffset) {"+getCallbackScript()+"},'"+_contentId+"');";
    return "ElementOffsetBehavoir.init(function (xOffset,yOffset) {"+getCallbackScript()+"});";
  }

  @Override
  protected final Parameter<?>[] getParameter()
  {
    return new Parameter<?>[]{ X_OFFSET,Y_OFFSET};
  }
  
  @Override
  protected void respond(AjaxRequestTarget target, ParameterMap parameterMap)
  {
    onOffset(target, parameterMap.getValue(X_OFFSET), parameterMap.getValue(Y_OFFSET));   
  }
  
  protected abstract void onOffset(AjaxRequestTarget target, int xOffset, int yOffset);
}</code>

Im Gegensatz zum letzten Behavior sind wir in diesem Fall auf etwas mehr Javascript angewiesen.

<code lang="javascript">ElementOffsetBehavoir =
{
  init : function(callback, contentId)
  {
    function Listener(callback, contentId)
    {
      this.xOffset = 0;
      this.yOffset = 0;
      this.firstElement = null;

      // function(xOffset,yOffset)
      this.onOffsetChanged = callback;

      this.updateOffsets = function()
      {
        var offsets = Wicket.Window.getXYOffset(this.firstElement);
        this.xOffset = offsets[0];
        this.yOffset = offsets[1];
        this.onOffsetChanged(this.xOffset, this.yOffset);
      };

      var bodyElement = document.getElementsByTagName('body')[0];
      this.firstElement = bodyElement.childNodes[1];
      if (contentId != null)
      {
        this.firstElement = document.getElementById(contentId);
      }
    }

    var listener = new Listener(callback, contentId);
    listener.updateOffsets();
    window.onresize = Callback.create(window.onresize, function()
    {
      listener.updateOffsets();
    });
  }
}</code>

Der Listener wird über die init-Methode initialisiert und wird ebenfalls aufgerufen, wenn die Fenstergröße verändert wurde. Außerdem wird die updateOffsets()-Methode bereits bei der Initialisierung aufgerufen. Somit ist auch in diesem Fall der Offset eines Elements bekannt.

<strong>PageMouseClickBehavior</strong>

Das letzte Behavior ist gleichzeitig das aufwendigste. In diesem Fall muss nicht nur die Position des Klicks ermittelt werden, sondern gleichzeitig in Relation zu einem Element gebracht werden. Auf diese Weise kommen die Koordinaten schon passend an und können z.B. auch negative Werte annehmen.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import org.apache.wicket.Request;
import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.IHeaderResponse;

public abstract class PageMouseClickBehavior extends AbstractParameterizedDefaultAjaxBehavior
{
  static final Parameter<Integer> MOUSE_X=of("x", Integer.class, "x");
  static final Parameter<Integer> MOUSE_Y=of("y", Integer.class, "y");
  
  String _contentId;
  
  public PageMouseClickBehavior()
  {
  }
  
  public PageMouseClickBehavior(String contentId)
  {
    _contentId=contentId;
  }
  
  @Override
  public void renderHead(IHeaderResponse response)
  {
    super.renderHead(response);
    
    response.renderJavascriptReference(WicketWindowJavascript.RESOURCE);
    response.renderJavascriptReference(new ResourceReference(PageMouseClickBehavior.class,"PageMouseClickBehavior.js"));
    response.renderOnDomReadyJavascript(getJavascript());
  }
  
  protected String getJavascript()
  {
    if (_contentId!=null) return "PageMouseClickBehavoir.init(function (x,y,xOffset,yOffset) {"+getCallbackScript()+"},'"+_contentId+"');";
    return "PageMouseClickBehavoir.init(function (x,y,xOffset,yOffset) {"+getCallbackScript()+"});";
  }

  @Override
  protected Parameter<?>[] getParameter()
  {
    return new Parameter<?>[] { MOUSE_X, MOUSE_Y };
  }
  
  @Override
  protected void respond(AjaxRequestTarget target, ParameterMap map)
  {
    onClick(target, map.getValue(MOUSE_X), map.getValue(MOUSE_Y));    
  }

  protected abstract void onClick(AjaxRequestTarget target, int x, int y);
}</code>

Das dazugehörige Javascript kümmert sich um die Verarbeitung:

<code lang="javascript">PageMouseClickBehavoir = 
{
  init: function(callback,contentId)
  {
    function Listener(callback,contentId)
    {
      this.xOffset=0;
      this.yOffset=0;
      this.firstElement=null;
  
      // function(x,y)
      this.onMouseEvent=callback;
      
      this.mouseEvent= function(e)
      {
        tempX=0;
        tempY=0;
        
        if (Wicket.Browser.isIE() || Wicket.Browser.isGecko())
        {
          tempX = e.clientX + Wicket.Window.getScrollX();
          tempY = e.clientY + Wicket.Window.getScrollY();
        }
        else
        {
          tempX = e.pageX
          tempY = e.pageY
        }
        tempX-=this.xOffset;
        tempY-=this.yOffset;
        this.onMouseEvent(tempX,tempY);
        return true;
      };
      
      this.updateOffsets=function()
      {
        var offsets=Wicket.Window.getXYOffset(this.firstElement);
        this.xOffset=offsets[0];
        this.yOffset=offsets[1];
      };
      
      var bodyElement=document.getElementsByTagName('body')[0];
      this.firstElement=bodyElement.childNodes[1];
      if (contentId!=null)
      {
        this.firstElement=document.getElementById(contentId);
      }
      
      this.updateOffsets();
    }
  
  
    var listener=new Listener(callback,contentId);
    
    document.onmousedown=Callback.create(document.onmousedown,function(e)
    {
      listener.mouseEvent(e)
    });
    window.onresize=Callback.create(window.onresize,function()
    {
      listener.updateOffsets();
    });
  },
}
</code>

Sobald der Nutzer klickt (auch wenn es eigentlich nichts klickbares gibt), wird eine Request an die Anwendung gesendet. Diese Behavior können wir nun in die Anwendung einbauen, um die Mausklicks der Nutzer aufzuzeichnen.

<strong>Die Anwendung</strong>

In unserer Beispielanwendung werfen wir alles in einen Topf. Wir zeichnen alle Mausklicks auf und aktualisieren dann die Heatmap.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.parameter;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.image.Image;
import org.apache.wicket.markup.html.image.NonCachingImage;
import org.apache.wicket.markup.html.image.resource.DynamicImageResource;
import org.apache.wicket.markup.html.image.resource.RenderedDynamicImageResource;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.protocol.http.WebResponse;
import org.apache.wicket.util.time.Duration;

public class HeatMapPage extends WebPage
{
  List<Pos> _points=new ArrayList<Pos>();
  int _xOffset=0;
  int _yOffset=0;
  
  public HeatMapPage()
  {
    final FeedbackPanel feedbackPanel = new FeedbackPanel("feedback");
    feedbackPanel.setOutputMarkupId(true);
    add(feedbackPanel);

    final WebMarkupContainer box=new WebMarkupContainer("box");
    final ClickMap imageResource = new ClickMap(100, 100);
    final Image image = new NonCachingImage("map",imageResource);
    box.setOutputMarkupId(true);
    box.add(image);
    add(box);
    
    add(new ElementOffsetBehavior("#content")
    {
      @Override
      protected void onOffset(AjaxRequestTarget target, int xOffset, int yOffset)
      {
        info("Offset: "+xOffset+","+yOffset);
        _xOffset=xOffset;
        _yOffset=yOffset;
        imageResource.invalidate();
        target.addComponent(feedbackPanel);
        target.addComponent(box);
      }
    }.setThrottleDelay(Duration.milliseconds(250)));
    
    add(new PageMouseClickBehavior("#content")
    {
      @Override
      protected void onClick(AjaxRequestTarget target, int x, int y)
      {
        info("Clicked: "+x+","+y);
        _points.add(new Pos(x,y));
        imageResource.invalidate();
        target.addComponent(box);
        target.addComponent(feedbackPanel);
      }
    }.setThrottleDelay(Duration.milliseconds(50)));
    
    add(new WindowResizeBehavior()
    {
      @Override
      protected void onResize(AjaxRequestTarget target, int width, int height)
      {
        info("Size changed: "+width+","+height);
        imageResource.setWidth(width);
        imageResource.setHeight(height);
        imageResource.invalidate();
        
        target.addComponent(feedbackPanel);
        target.addComponent(box);
      }
    }.setThrottleDelay(Duration.milliseconds(250)));
    
  }
  
  class ClickMap extends RenderedDynamicImageResource
  {
    public ClickMap(int width, int height)
    {
      super(width, height,"jpg");
      setCacheable(false);
    }
    
    @Override
    protected boolean render(Graphics2D graphics)
    {
      graphics.setBackground(new Color(255,255,255));
      graphics.setColor(new Color(0,0,0,50));
      graphics.clearRect(0, 0, getWidth(), getHeight());
 
      graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      
      for (Pos p : _points)
      {
        graphics.fillArc(_xOffset+p.getX()-5, _yOffset+p.getY()-5, 9, 9, 0, 360);
      }
      return true;
    }
  }
  
  static class Pos implements Serializable
  {
    int _x;
    int _y;
    
    public Pos(int x, int y)
    {
      super();
      _x = x;
      _y = y;
    }
    
    public int getX()
    {
      return _x;
    }
    
    public int getY()
    {
      return _y;
    }
  }
}</code>

Im Markup müssen wir dann nur das Image hinter der Seite platzieren und schon stimmen Mausklick und Heatmap überein.

<code lang="html"><html>
  <head>
    <title>Heatmap Page</title>
  </head>
  <body>
    <div id="#content" style="width:800px; margin:auto; border:1px solid #888;">
      <div wicket:id="feedback"></div>
    </div>
    <div wicket:id="box" style="z-index: -1; position: absolute; top: 0px;left: 0px;">
      <img wicket:id="map">
    </div>
  </body>
</html></code>

In diesem Beispiel haben ich den Rahmen auf eine Breite von 800 Pixeln gesetzt und zentriert. Trotzdem werden die Mausklicks immer korrekt angezeigt.

<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-heatmap-ajax.jpg"><img class="aligncenter size-medium wp-image-262" title="wicket-heatmap-ajax" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/03/wicket-heatmap-ajax-450x156.jpg" alt="wicket-heatmap-ajax" width="450" height="156" /></a>

Wie man sehen kann, ist die Interaktion von Wicket mit Ereignissen, die durch Javascript ausgelöst werden, ohne weiteres möglich. Dabei können diese Komponenten ohne weiteres in beliebigen Anwendungen benutzt werden, ohne das sich ein anderer Entwickler mit den Implementierungsdetails beschäftigen muss. Allerdings hätte ich mir gewünscht, dass die Parameterisierung von Ajax-Aufrufen bereits in den Kern von Wicket integriert wäre.

Viel Spass mit dem ausprobieren:)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2010-03-07 16:22:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-07 15:22:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-heatmap-ajax-mit-parametern]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="clickmap"><![CDATA[clickmap]]></category>
		<category domain="post_tag" nicename="parameter"><![CDATA[parameter]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386696483]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"39.03709481231739";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"24.295351910588565";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"14.33876320620079";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:17:"13.95362860599995";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"13.90061836740897";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4434</wp:comment_id>
			<wp:comment_author><![CDATA[Thorsten Krüger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thkrueger@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.91.39.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-10 07:33:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-10 06:33:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das sieht aus, als müsste ich es dringend mal ausprobieren - einige schöne Tricks! Eine saubere Implementierung von Ajax mit Parametern ist ja an sich schon was Nettes.

Was das JavaScript angeht, hier sollte apply() helfen. Der folgende Code:
oldCallback.apply(this,arguments)
ruft oldCallback mit dem Scope der aktuellen Funktion und allen Parametern dieses Scopes auf. Ein kleines Beispiel dazu findest Du unter <a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4436</wp:comment_id>
			<wp:comment_author><![CDATA[Thorsten Krüger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thkrueger@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.91.39.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-10 07:36:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-10 06:36:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm, der Link wollte mich nicht. Zweiter Versuch: <a href="http://www.webreference.com/js/column26/apply.html" rel="nofollow">]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4434</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket - AbstractEvent Update</title>
		<link>http://www.wicket-praxis.de/blog/2010/04/09/wicket-abstractevent-update/</link>
		<pubDate>Fri, 09 Apr 2010 07:20:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[Wie ich bereits beschrieben habe, kann man mit Wicket relativ leicht eine <a href="http://www.wicket-praxis.de/blog/2010/01/05/wicket-lose-koppelung-von-komponenten/">lose Koppelung von Komponenten</a> über einen Event-Mechanismus erreichen. Dabei wurden bisher nur Komponenten berücksichtigt. Manchmal ist es aber sinnvoll, die Behandlung dieser Events an einer zentralen Stelle durchzuführen. Daher habe ich die Basisklasse leicht erweitert. Dabei ist der Visitior in eine eigene Klasse gewandert. Außerdem ist es wesentlich geschickter, auch bei nicht Ajax-Requests mit Events zu arbeiten. Die Modifikation des EventListener-Interface trägt dem Rechnung.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

public interface EventListenerInterface
{
  public void notifyEvent(AbstractEvent event);
}
</code>

Die Methode lautet nun <strong>notifyEvent</strong> statt <strong>notifyAjaxEvent</strong>.

<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.Component;
import org.apache.wicket.Component.IVisitor;

public class NotifyVisitor implements IVisitor<Component> 
{
  private final AbstractEvent _event;
   
  public NotifyVisitor(final AbstractEvent event)
  {
    _event = event;
  }
   
  public Object component(final Component component)
  {
    if (component instanceof EventListenerInterface) 
    {
      ((EventListenerInterface) component).notifyEvent(_event);
    }
    return IVisitor.CONTINUE_TRAVERSAL;
  }
}</code>

Der Event sucht jetzt nicht nur in allen Komponenten nach dem EventListenerInterface, sondern auch in der Application, der Session und der Page.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.events;

import org.apache.wicket.Application;
import org.apache.wicket.Component;
import org.apache.wicket.Page;
import org.apache.wicket.Session;
import org.apache.wicket.Component.IVisitor;
import org.apache.wicket.ajax.AjaxRequestTarget;

public class AbstractEvent
{
  private final Component _source;
  protected final AjaxRequestTarget _target;
  
  public AbstractEvent(final Component source, AjaxRequestTarget target)
  {
    _source = source;
    _target = target;
  }
  
  public AbstractEvent(final Component source)
  {
    this(source,null);
  }
  
  public Component getSource()
  {
    return _source;
  }
  
  /**
   * notify Application, Session, Page and Components
   */
  public final void fire()
  {
    Page page=getSource().getPage();
    
    Application application=page.getApplication();
    if (application instanceof EventListenerInterface)
    {
      ((EventListenerInterface) application).notifyEvent(this);
    }
    Session session=page.getSession();
    if (session instanceof EventListenerInterface)
    {
      ((EventListenerInterface) session).notifyEvent(this);
    }
    if (page instanceof EventListenerInterface)
    {
      ((EventListenerInterface) page).notifyEvent(this);
    }
    page.visitChildren(EventListenerInterface.class, getVisitor());
    onAfterFire();
  }

  protected  void onAfterFire()
  {
    
  }

  protected IVisitor<Component> getVisitor()
  {
    return new NotifyVisitor(this);
  }

  public AjaxRequestTarget getTarget()
  {
    return _target;
  }
  
  public boolean isAjax()
  {
    return _target!=null;
  }

  public final void update(Component component)
  {
    if (_target!=null)
    {
      _target.addComponent(component);
    }
  }

}</code>

Hinzugekommen ist außerdem die Funktion onAfterFire() die aufgerufen wird, sobald alle möglichen Listener benachrichtig wurden. An dieser Stelle könnte man dann Prüfungen einbauen, ob z.B. der Event überhaupt ein Ziel erreicht hat.

Ich glaube, dass diese Lösung zu offensichtlich war, so dass man sie leicht übersehen konnte.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2010-04-09 08:20:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-09 07:20:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-abstractevent-update]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="event"><![CDATA[event]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386694460]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:18:"24.513282346043468";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"24.156324256047235";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"20.51469057378244";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"14.33876320620079";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"13.840894490897174";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4093</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets die New blog post: Wicket - AbstractEvent Update erwähnt -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L1&amp;url=http://www.wicket-praxis.de/blog/2010/04/09/wicket-abstractevent-update/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-11 23:06:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-11 22:06:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Dieser Eintrag wurde auf Twitter von Michael Mosmann erwähnt. Michael Mosmann sagte: New blog post: Wicket - AbstractEvent Update http://www.wicket-praxis.de/blog/2010/04/09/wicket-abstractevent-update/ [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Eclipse Plugin -  qwickie</title>
		<link>http://www.wicket-praxis.de/blog/2010/04/14/wicket-eclipse-plugin-qwickie/</link>
		<pubDate>Wed, 14 Apr 2010 06:28:47 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[Zufällig bin ich auf ein <a href="http://code.google.com/p/qwickie/" target="_blank">Wicket-Eclipse-Plugin</a> gestoßen, dass im täglichen Umgang mit Wicket-basierten Projekten zu einer nicht unwesentlichen Arbeitserleichterung führt. In Anbetracht des frühen Entwicklungsstadiums (Version 0.1) ist das bereits eine reife Leistung.

<strong>Was macht das Plugin?</strong>

Mit dem Plugin ist es möglich, durch den Klick auf die Wicket-ID einer Komponente zwischen Java-Klasse und zugehörigen Markup wechseln zu können. Dabei springt der Cursor gleich an die richtige Stelle. Kurz: Das ist genau das, was ich am häufigsten benötige.

Bei der Installation sollte man zwei Dinge beachten: 1. Das Plugin befindet sich wirklich noch in einem sehr frühen Stadium, so dass Fehler auftreten. Man muss also abwägen, ob der Vorteil die Nachteile aufwiegt. 2. Die Hinweise zur Installation und zur Handhabung auf der Seite sollte man beachten.

Diese Plugin sollte man im Auge behalten. Sofern es meine Zeit erlaubt, werde ich versuchen, an diesem Plugin mitzuentwickeln. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2010-04-14 07:28:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-14 06:28:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-eclipse-plugin-qwickie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="eclipse"><![CDATA[eclipse]]></category>
		<category domain="category" nicename="eclipse"><![CDATA[eclipse]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386678719]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"64.95298965668162";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:17:"45.65419321672372";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"229";s:5:"score";s:18:"38.474675621445705";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"28.699172077552806";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"27.072869659088315";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"16.982797841567873";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket - Flexibilität mit Factories</title>
		<link>http://www.wicket-praxis.de/blog/2010/07/15/wicket-flexibilitat-mit-factories/</link>
		<pubDate>Thu, 15 Jul 2010 07:13:46 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[Komplexe Komponenten entstehen in Wicket durch das zusammenfügen von einfacheren Komponenten. Dabei werden die verwendeten Komponenten direkt adressiert. Nach außen ist nicht sichtbar, wie sich eine Komponente zusammensetzt. Um von dieser Komponente eine leicht abgewandelte Form zu erstellen, kann man auf z.B. Vererbung zurückgreifen, Komponenten ausblenden, das Markup überschreiben. Je mehr Variationen nötig sind, desto komplizierter wird der Aufbau. Der Aufwand steigt erheblich an.

Einen Ausweg aus dieser Situation könnte die Verwendung von Factories liefern. Dazu benötigen wir ein sehr einfach gehaltenes Interface:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.Component;

public interface IComponentFactory<T extends Component>
{
  T newComponent(String id);
}</code>

Eine einfach Implementierung, die immer ein Label mit einem bestimmten Text liefert, können wir wie folgt implementieren:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.IModel;

public class LabelFactory implements IComponentFactory<Label>
{
  IModel<?> _model;
  
  public LabelFactory(IModel<?> model)
  {
    _model = model;
  }
  
  public Label newComponent(String id)
  {
    return new Label(id,_model);
  }
}</code>

Wir übergeben hierbei ein Model, das durch das Label angezeigt wird. Soll ein anderer Text angezeigt werden, muss man dafür eine neue Factory erstellen. Bis jetzt ist noch kein Vorteil dieser Lösung absehbar. Deshalb steigern wir etwas die Komplexität. Wir erstellen eine Factory, die einen Rahmen um eine Komponente ziehen kann. Dabei wird für die Darstellung das style-Attribut erweitert.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.behavior.AttributeAppender;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;

public class BorderPanelFactory implements IComponentFactory<Panel>
{
  private final IComponentFactory<? extends Component> _content;
  private final IModel<String> _style;

  public BorderPanelFactory(IComponentFactory<? extends Component> content, IModel<String> style)
  {
    _content = content;
    _style = style;
  }
  
  public Panel newComponent(String id)
  {
    return new BorderPanel(id, _content, _style);
  }
  
  static class BorderPanel extends Panel
  {
    public BorderPanel(String id,IComponentFactory<? extends Component> content,IModel<String> style)
    {
      super(id);
      
      WebMarkupContainer border=new WebMarkupContainer("border");
      border.add(content.newComponent("content"));
      border.add(new AttributeAppender("style", true, style,";"));
      add(border);
    }
  }
}</code>
Wir übergeben daher eine Factory, die Komponenten erzeugt und ein Model, dass die Styleattribute beinhaltet. In dem Panel, was innerhalb der Factory erzeugt wird, wir dann eine Komponente eingebunden ("content"), die aus der übergebenen Factory kommt. Wir benötigen noch eine passende Markup-Datei (BorderPanelFactory$BorderPanel.html):
<code lang="html"><wicket:panel>
  <div wicket:id="border" style="padding: 8px">
    <wicket:container wicket:id="content"></wicket:container>
  </div>
</wicket:panel></code>

Um zu demonstrieren, welche Flexibilität man mit diesen wenigen Klassen bereits erreicht hat, verwenden wir beide Factories in einem Beispiel:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.model.Model;

public class ComponentFactoryPage extends WebPage
{
  public ComponentFactoryPage()
  {
    Model<String> redBorderStyle = Model.of("border:1px solid red; background-color: #fff0f0;");
    Model<String> greenBorderStyle = Model.of("border:1px solid green; background-color: #f0fff0;");
    Model<String> blueBorderStyle = Model.of("border:1px solid blue; background-color: #f0f0ff;");
    
    LabelFactory haveFunLabelFactory = new LabelFactory(Model.of("Have Fun"));
    
    BorderPanelFactory redBorderHasFunFactory = new BorderPanelFactory(haveFunLabelFactory,redBorderStyle);
    BorderPanelFactory greenBorderWrapsRedFactory = new BorderPanelFactory(redBorderHasFunFactory,greenBorderStyle);
    BorderPanelFactory blueBorderWrapsAllFactory = new BorderPanelFactory(greenBorderWrapsRedFactory,blueBorderStyle);
    
    add(blueBorderWrapsAllFactory.newComponent("element"));
  }
}</code>

Wir erstellen 3 Modelle mit unterschiedlichen Werten für das style-Attribut. Um etwas Text anzuzeigen benutzen wir die LabelFactory. Danach werden drei BorderPanelFactory-Instanzen erzeugt, die eine andere Factory "umwickelt". Zum Schluss wird ein Element erzeugt und in der Seite benutzt. Das Markup ist entsprechend einfach:
<code lang="html"><html>
  <head>
    <title>ComponentFactory Page</title>
  </head>
  <body>
    <wicket:container wicket:id="element"></wicket:container>
  </body>
</html></code>

Das Ergebnis sieht dann wie folgt aus:
<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory.jpg"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory-450x72.jpg" alt="" title="Wicket Component Factory Beispiel" width="450" height="72" class="aligncenter size-medium wp-image-271" /></a>

Um zu zeigen, wie schnell die Möglichkeiten wachsen, die man mit diesem Ansatz abdecken kann, erstellen wir eine weitere Factory. In diesem Fall möchten wir zwei Elemente nebeneinander dargestellen:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.Component;
import org.apache.wicket.markup.html.panel.Panel;

public class TwoInARowFactory implements IComponentFactory<Component>
{
  private final IComponentFactory<? extends Component> _left;
  private final IComponentFactory<? extends Component> _right;

  public TwoInARowFactory(IComponentFactory<? extends Component> left, IComponentFactory<? extends Component> right)
  {
    _left = left;
    _right = right;
  }
  
  public Component newComponent(String id)
  {
    return new ContainerPanel(id, _left, _right);
  }
  
  static class ContainerPanel extends Panel
  {
    public ContainerPanel(String id,IComponentFactory<? extends Component> left, IComponentFactory<? extends Component> right)
    {
      super(id);
      
      add(left.newComponent("left"));
      add(right.newComponent("right"));
    }
  }
}</code>
Es werden daher zwei Factories übergeben, die dann für die Erzeugung des linken und des rechten Elements zuständig sind. Das Markup benutzt der Einfachheit halber Html-Tabellen für die Anordnung:
<code lang="html"><wicket:panel>
  <table>
    <tr>
      <td><wicket:container wicket:id="left"></wicket:container></td>
      <td><wicket:container wicket:id="right"></wicket:container></td>
    </tr>
  </table>
</wicket:panel></code>

Unsere Seitenklasse ergänzen wir entsprechend:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.factories;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.model.Model;

public class ComponentFactoryPage extends WebPage
{
  public ComponentFactoryPage()
  {
    Model<String> redBorderStyle = Model.of("border:1px solid red; background-color: #fff0f0;");
    Model<String> greenBorderStyle = Model.of("border:1px solid green; background-color: #f0fff0;");
    Model<String> blueBorderStyle = Model.of("border:1px solid blue; background-color: #f0f0ff;");
    
    LabelFactory haveFunLabelFactory = new LabelFactory(Model.of("Have Fun"));
    
    BorderPanelFactory redBorderHasFunFactory = new BorderPanelFactory(haveFunLabelFactory,redBorderStyle);
    BorderPanelFactory greenBorderWrapsRedFactory = new BorderPanelFactory(redBorderHasFunFactory,greenBorderStyle);
    BorderPanelFactory blueBorderWrapsAllFactory = new BorderPanelFactory(greenBorderWrapsRedFactory,blueBorderStyle);
    
    add(blueBorderWrapsAllFactory.newComponent("element"));
    
    TwoInARowFactory twoInARowFactory = new TwoInARowFactory(redBorderHasFunFactory, greenBorderWrapsRedFactory);
    
    add(twoInARowFactory.newComponent("two"));
  }
}</code>

Das Markup muss ebenfalls angepasst werden:
<code lang="html"><html>
  <head>
    <title>ComponentFactory Page</title>
  </head>
  <body>
    <wicket:container wicket:id="element"></wicket:container>
    <wicket:container wicket:id="two"></wicket:container>
  </body>
</html></code>

Das Ergebnis kann sich sehen lassen:
<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory-split.jpg"><img src="http://www.wicket-praxis.de/blog/wp-content/uploads/2010/07/wicket-component-factory-split-450x128.jpg" alt="" title="Wicket Component Factory Split" width="450" height="128" class="aligncenter size-medium wp-image-272" /></a>

Wie man an diesem Beispiel sehr gut erkennen kann, liegt in diesem Ansatz sehr viel Potential, gerade wenn die Anforderungen an die Flexibilität sehr hoch sind. In Projekten, die eine hohe Flexibilität erforderten hat sich dieses System bereits erfolgreich bewährt. Dabei kommt eine Kombinationen aus dem "klassischen" und dem Factory-Ansatz zum Einsatz, wodurch sich die meisten Anforderungen wesentlich besser abdecken lassen.

Gibt es noch ganz andere Lösungsstrategien?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2010-07-15 08:13:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-15 07:13:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-flexibilitat-mit-factories]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="factory"><![CDATA[factory]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[vgwpixel]]></wp:meta_key>
			<wp:meta_value><![CDATA[<img src="http://vg05.met.vgwort.de/na/dbf3aa1d112c4807bddeabbd9ede6f31" width="1" height="1" alt="">]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386687568]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"50.52515686305202";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"225";s:5:"score";s:16:"45.4011079705202";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"166";s:5:"score";s:17:"37.20538901520793";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"22.296890731139264";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"21.956929903505515";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"20.51469057378244";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4617</wp:comment_id>
			<wp:comment_author><![CDATA[Nick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nick.wiedenbrueck@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.91.39.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-16 11:37:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-16 10:37:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interessanter Ansatz. Ich glaube aber ebenso, dass in machen Fällen der klassische Ansatz auch weiterhin sinnvoll ist. 

Als weitere Lösungsstrategie, allerdings ähnlich zu Factories, könnte man sich eine Umsetzung nach dem Builder-Pattern vorstellen, etwa

Component c = new BorderPanelBuilder(haveFunLabelFactory).borderWidth(2).borderColor("red").padding(4).build();]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4622</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.19.193]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-19 05:46:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-19 04:46:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Der Spamfilter hat bei diesem Kommentar irgendwie angeschlagen und ich musste ihn erst freischalten. Entschuldigung.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4617</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5038</wp:comment_id>
			<wp:comment_author><![CDATA[Greg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gkaczor@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.findfiles.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.220.36.92]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-10-03 00:25:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-10-02 23:25:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Michael,

leider habe ich keinen wirklich passenden Post gefunden um folgende Frage zu stellen.
Wie kann ich in Wicket Apache HttpClient in einer IDataProvider implementierung verwenden, ohne dass Wicket versucht den HttpClient zu serialisieren?

 Ich habe mehrere Sachen versucht, insbesondere im Bezug auf Kapitel 5.4.4 "Datenbankzugriffsmodelle" Deines Buches, aber ich bekomme immer eine WicketNotSerializableException mit Bezug auf den HttpClient. 

org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.commons.httpclient.HttpClient

Viele Grüße

GRegor]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5125</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.233.17.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-10-24 10:20:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-10-24 09:20:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kannst Du mal etwas Code beisteuern, der zeigt, wie Du den HttpClient einbindest? Muss der Zustand des HttpClient über mehrere Request bewahrt werden oder wird der Client bei jedem Seitenaufruf neu initalisiert?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>5038</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wicket - Mainstream, Github, MongoDB</title>
		<link>http://www.wicket-praxis.de/blog/2010/10/24/wicket-mainstream-github-mongodb/</link>
		<pubDate>Sun, 24 Oct 2010 09:45:57 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[In den letzten Wochen und Monaten habe ich recht wenig neues über Wicket gelesen. Man könnte meinen, dass es ruhig geworden ist um Wicket. Doch wenn man sich z.B. die Mailinglisten ansieht, spricht das eine deutlich andere Sprache. Jobangebote fragen zunehmend ab, ob Wicket-KnowHow vorhanden ist. Man sieht mehr und mehr Anwendungen, die mit Wicket realisiert wurden. Wicket ist im Mainstream angekommen.

Vielleicht ist das auch nur eine sehr persönliche Sichtweise, aber ich glaube, das auch Git im Mainstream angekommen ist. Git wurde bereits in bestimmten Bereichen auf einer breiten Basis eingesetzt. Aber der bedeutende Unterschied liegt darin, dass man sich bei neuen Projekten eigentlich immer die Frage stellt: Subversion oder besser gleich Git?

Ich habe alle meine Projekte von Subversion auf Git umgestellt und dabei gemerkt, das Subversion und Git nicht wirklich aufeinander abbildbar sind, aber die Vorteile die Git mitbringt sich selbst dann auszahlen, wenn man Git noch wie Subversion benutzt. Man findet ab jetzt die Quelltexte für das Buch bei Github unter <a href="http://github.com/michaelmosmann/wicket-praxis.git" rel="nofollow">http://github.com/michaelmosmann/wicket-praxis.git</a>.

Da ich in meinen aktuellen Projekten mich mit der Frage beschäftigt habe, ob nicht eine Dokumentendatenbank wie MongoDB die bessere Alternative ist, sei an dieser Stelle auch noch auf einen Objektmapper verwiesen, denn in ich diesem Zusammenhang entwickelt habe: <a href="http://github.com/michaelmosmann/mongoom.flapdoodle.de">http://github.com/michaelmosmann/mongoom.flapdoodle.de</a>

In Zukunft an dieser Stelle wieder mehr und dann vielleicht rund um Wicket in Zusammenarbeit mit Dokumentendatenbanken.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2010-10-24 10:45:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-24 09:45:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-mainstream-github-mongodb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386680640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:17:"35.60251952190951";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"18.647132749610876";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"15.910298677454866";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"11.716374235984926";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"352";s:5:"score";s:17:"11.05925496105728";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:17:"7.840379136189079";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>474977</wp:comment_id>
			<wp:comment_author><![CDATA[home]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fddjuufnj@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.hoverboardkings.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[142.54.189.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-12-11 15:09:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-12-11 14:09:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[kdihyhkmopxwehbgbxutiamogcscruea]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481465365.9868059;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket - Back Button zuverlässig erkennen</title>
		<link>http://www.wicket-praxis.de/blog/2011/04/29/wicket-back-button-detect/</link>
		<pubDate>Fri, 29 Apr 2011 06:22:31 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[Die Entwicklung moderner Webanwendungen orientiert sich zunehmend am Interaktionsmodel wie es Desktopanwendungen bieten. Wicket unterstütz dabei erheblich, in dem z.B. der Einsatz von Ajax keine große Hürde mehr darstellt. Eine Interaktionsmöglichkeit ist Desktopanwendungen doch bisher eher fremd: der Back Button im Browser. Der Nutzer erwartet, dass er auf einen vorherigen Zustand zurück navigieren kann. Je komplexer die Webanwendung, desto aufwendiger war es mit anderen Frameworks, die Nutzererwartung auch in ein sinnvolles Anwendungsverhalten zu übertragen. Wicket bietet mit versionierten Seiten bereits eine gute Unterstützung, die einem Entwickler ermöglicht, die kleine "Zeitreise", die der Nutzer vornimmt, auf Anwendungsseite entsprechend abbilden zu können.

Trotzdem möchte man unter Umständen wissen, dass der Nutzer den Back Button betätigt hat, weil es vielleicht auch einen Rückschluss darauf zulässt, dass der Nutzer in der Anwendung nicht die richtige Interaktionsmöglichkeit gefunden hat (z.B. in einem Bestellvorgang doch nochmal die Anschrift ändern zu wollen).

Folgendes Beispiel ist eine Möglichkeit, zu erkennen, ob der Nutzer mit dem Browser vor und zurück navigiert hat. Dabei gibt es zwei Dinge zu beachten. Der erste Seitenaufruf darf nicht in einer Url enden, die den Konstruktor der Seite aufruft. Denn dann sieht das aus Anwendungssicht so aus, als ob der Nutzer erneut auf die Seite navigiert ist. Zum zweiten muss man den Browser dazu zwingen, die Seite in jedem Fall neu vom Server abzurufen.

Daher brauchen wir zu erst eine Sprungseite:
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.backbutton;

import org.apache.wicket.markup.html.WebPage;

public class BackButtonStartPage extends WebPage {

  public BackButtonStartPage() {
    setResponsePage(new BackButtonPage());
    setRedirect(true);
  }
}</code>

Die Sprungseite ruft die eigentliche Seite auf. Außerdem ist der Aufruf von setRedirect() notwendig, damit nicht nur die neue Seite dargestellt wird, sondern sich auch die Url entsprechend ändert.

Die Seite mit der Erkennung der Button-Nutzung sieht dann wie folgt aus:<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.backbutton;

import java.util.Date;

import org.apache.wicket.MetaDataKey;
import org.apache.wicket.Session;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.protocol.http.WebResponse;

public class BackButtonPage extends WebPage {

  static final TimeStampKey KEY = new TimeStampKey();
  private long _pageInitTimeStamp;

  public BackButtonPage() {
    //setVersioned(true);

    _pageInitTimeStamp = new Date().getTime();
    setPageTimeStamp(_pageInitTimeStamp);

    add(new FeedbackPanel("feedback"));

    add(new Link<Void>("link") {

      @Override
      public void onClick() {
        setResponsePage(new BackButtonPage());
      }
    });
  }

  private static void setPageTimeStamp(long timeStamp) {
    Session.get().setMetaData(KEY, timeStamp);
  }

  @Override
  protected void onBeforeRender() {
    super.onBeforeRender();

    Long lastPageRendered = Session.get().getMetaData(KEY);
    setPageTimeStamp(_pageInitTimeStamp);

    if (lastPageRendered > _pageInitTimeStamp) {
      info("BackButton pressed");
    }
    if (lastPageRendered < _pageInitTimeStamp) {
      info("ForwardButton pressed");
    }
  }

  @Override
  protected void configureResponse() {
    super.configureResponse();
    WebResponse response = getWebRequestCycle().getWebResponse();
    response.setHeader("Cache-Control", "no-cache, max-age=0,must-revalidate, no-store");
  }

  static class TimeStampKey extends MetaDataKey<Long> {

  }
}</code>

Das Markup der Seite:

<code lang="html"><html>
  <head>
    <title>BackButton Page</title>
  </head>
  <body>
    <div wicket:id="feedback"></div>
    <a wicket:id="link">Link</a>
  </body>
</html></code>

Das Prinzip funktioniert wie folgt: Die Seite bekommt einen Zeitstempel über den Zeitpunkt der Erstellung. Dieser Zeitpunkt wird außerdem als Metainformation in die Session gesetzt (Hinweis: um diese Funktion bei mehr als einer Seite benutzen zu können, ist natürlich etwas mehr Aufwand nötig). Das bedeutet, dass jede Version der Seite einen eigenen Zeitstempel hat. In onBeforeRender() kann man nun prüfen, ob diese Seite auch die aktuelle Seite ist, oder ob der Nutzer auf einen neuere oder ältere Version zurückgegriffen hat. Der Link dient dazu, immer neue Version der Seite zu erzeugen.

Damit der Browser die Seite aber in jedem Fall neu lädt, muss man entsprechende Header in den Http-Response einfügen. Eine Möglichkeit besteht darin, die configureResponse()-Methode entsprechend zu überschreiben.

Wenn man nun auf der Seite den Link klickt und dann mit dem Back Button oder dem Forward Button navigiert, erscheinen die entsprechenden Hinweise auf der Seite.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2011-04-29 07:22:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-04-29 06:22:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-back-button-detect]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="post_tag" nicename="back"><![CDATA[back]]></category>
		<category domain="post_tag" nicename="back-button"><![CDATA[back button]]></category>
		<category domain="post_tag" nicename="browser"><![CDATA[browser]]></category>
		<category domain="post_tag" nicename="button"><![CDATA[button]]></category>
		<category domain="post_tag" nicename="detect"><![CDATA[detect]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386676140]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"29.44438274797521";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"17.591680390560843";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:17:"13.48592515708911";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"13.071829153130265";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"13.057324574019816";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket - Komponentenübersicht (1.4.17)</title>
		<link>http://www.wicket-praxis.de/blog/2011/05/15/wicket-komponentenubersicht-1-4-17/</link>
		<pubDate>Sun, 15 May 2011 08:48:50 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[Seit Wicket 1.4.1 haben sich bei den Komponenten und Interfaces ein paar Anpassungen ergeben, so dass ich die Komponentenübersichten aktualisiert habe. Folgende Diagramme beziehen sich auf die Version 1.4.17.

[caption id="attachment_161" align="aligncenter" width="450" caption="Wicket Kompontenten - Basis"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp.gv_.jpg"><img class="size-medium wp-image-161" title="wicket-comp.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp.gv_-450x367.jpg" alt="Wicket Kompontenten - Basis" width="450" height="367" /></a>[/caption]

[caption id="attachment_162" align="aligncenter" width="410" caption="Wicket Komponenten inklusive Extensions"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp-ext.gv_.jpg"><img class="size-medium wp-image-162" title="wicket-comp-ext.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-comp-ext.gv_-410x450.jpg" alt="Wicket Komponenten inklusive Extensions" width="410" height="450" /></a>[/caption]

[caption id="attachment_164" align="aligncenter" width="450" caption="Wicket Modelle"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-model.gv_.jpg"><img class="size-medium wp-image-164" title="wicket-model.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-model.gv_-450x382.jpg" alt="Wicket Modelle" width="450" height="382" /></a>[/caption]

[caption id="attachment_160" align="aligncenter" width="450" caption="Wicket Behavior"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-behavior.gv_.jpg"><img class="size-medium wp-image-160" title="wicket-behavior.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-behavior.gv_-450x95.jpg" alt="Wicket Behavior" width="450" height="95" /></a>[/caption]

[caption id="attachment_163" align="aligncenter" width="450" caption="Wicket Listener"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-listener.gv_.jpg"><img class="size-medium wp-image-163" title="wicket-listener.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-listener.gv_-450x205.jpg" alt="Wicket Listener" width="450" height="205" /></a>[/caption]

[caption id="attachment_165" align="aligncenter" width="450" caption="Wicket RequestTarget"]<a href="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-requestTarget.gv_.jpg"><img class="size-medium wp-image-165" title="wicket-requestTarget.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2011/05/wicket-requestTarget.gv_-450x180.jpg" alt="Wicket RequestTarget" width="450" height="180" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2011-05-15 09:48:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-15 08:48:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-komponentenubersicht-1-4-17]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386708231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"48.71891763993038";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"22.144962563604714";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"15.627342924422535";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"15.627342924422535";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"10";s:5:"score";s:18:"14.222185817125112";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"330";s:5:"score";s:16:"9.45360376157458";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Ajax - IAjaxRegionMarkupIdProvider</title>
		<link>http://www.wicket-praxis.de/blog/2011/05/18/wicket-ajax-iajaxregionmarkupidprovider/</link>
		<pubDate>Wed, 18 May 2011 07:00:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[Fast unbemerkt versammeln sich in den Wicket-Updates neben einer Reihe von Bugfixes kleine Anpassungen, die das Entwickeln mit Wicket einfacher machen können. Da man nicht bei jedem Update nachsieht, was sich verändert hat, weil die Erfahrung gezeigt hat, dass man bei Wicket eigentlich immer auf die aktuelle Version wechseln kann, läuft man Gefahr, dass man wichtige Anpassungen verpasst. Deshalb stelle ich heute eine Erweiterung von Wicket vor, die in meinen Augen ein erhebliches Potential bietet: das Interface <strong>IAjaxRegionMarkupIdProvider</strong>.

Über dieses Interface ist es möglich, Wicket mitzuteilen, welches Seitenelement in einem Ajax-Response eigentlich ersetzt werden soll. So ist es möglich, z.B. in einem Behavior vor und nach der Komponente Html-Markup einzufügen, dass bei Aktualisierung der Komponente ebenfalls ersetzt wird. Was sich kompliziert anhört ist in der Anwendung recht einfach. Wir implementieren ein Interface, dass einen roten Rahmen um eine Komponente ziehen soll, die per Ajax aktualisiert wird.
<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.behavior;

import org.apache.wicket.Component;
import org.apache.wicket.ajax.IAjaxRegionMarkupIdProvider;
import org.apache.wicket.behavior.AbstractBehavior;


public class AjaxRegionBehavior extends AbstractBehavior implements IAjaxRegionMarkupIdProvider {

  @Override
  public void beforeRender(Component component) {
    component.getResponse().write("<div style=\"border:1px solid red;\" id=\""+getAjaxRegionMarkupId(component)+"\">");
    super.beforeRender(component);
  }
  
  @Override
  public void onRendered(Component component) {
    super.onRendered(component);
    component.getResponse().write("</div>");
  }
  
  @Override
  public String getAjaxRegionMarkupId(Component component) {
    return component.getMarkupId()+"_border";
  }
  
}</code>

Das Behavior funktioniert wie folgt: In beforeRender() und in onRendered() wird um die Komponente herum ein div-Tag mit passender Style-Anweisung geschrieben. Hierbei muss in beforeRender() die id des Tags auf den Wert gesetzt werden, den Wicket dann auch über die Interface-Methode getAjaxRegionMarkupId() bekommt. Das führt dazu, dass Wicket die Ersetzung per Ajax automatisch auf den durch das Behavior definierten Rahmen, eben die ID, die per getAjaxRegionMarkupId() definiert wurde, ausweitet.

Die Anwendung ist recht einfach:<code lang="java5">package de.wicketpraxis.web.blog.pages.questions.ajax.behavior;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.Model;


public class AjaxRegionPage extends WebPage {

  
  private Model<Integer> _counter;

  public AjaxRegionPage() {
    
    _counter = Model.of(0);
    final Label label=new Label("label",_counter);
    label.setOutputMarkupId(true);
    label.add(new AjaxRegionBehavior());
    add(label);
    
    add(new AjaxLink<Integer>("link",_counter) {
      @Override
      public void onClick(AjaxRequestTarget target) {
        setModelObject(1+getModelObject());
        target.addComponent(label);
      }
    });
  }
}</code>

Wie man im Code-Beispiel sehen kann, wird das Behavior zur Komponente hinzugefügt. Würde man das Interface nicht implementieren, würden bei jeder Aktualisierung immer neue rote Rahmen um die Komponente entstehen.

<code lang="html"><html>
  <head>
    <title>AjaxRegion Page</title>
  </head>
  <body>
    <span wicket:id="label"></span>
    <a wicket:id="link">Count</a>
  </body>
</html></code>

Bisher war es nötig, diese Anforderung immer auf Komponenten abzubilden, die dann korrekt ersetzt werden mussten. Damit ist es jetzt sehr viel einfacher möglich, Eine Komponente zu dekorieren und diese Dekoration auch per Ajax korrekt zu ersetzten. Auch wenn der erste Gedanke einer Anwendung sich vermutlich um Formularfelder mit fehlerhaften Eingaben dreht, gibt es unzählige Möglichkeiten, wo diese Funktionalität die Entwicklung nachhaltig vereinfachen wird.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2011-05-18 08:00:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-05-18 07:00:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-ajax-iajaxregionmarkupidprovider]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386694738]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"72.78444570587388";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"17.591680390560843";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"290";s:5:"score";s:18:"11.947869177952763";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"127";s:5:"score";s:18:"10.106734599740355";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"229";s:5:"score";s:17:"8.429533099840596";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"7.231953944297662";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket best Practices - Leseempfehlung</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/03/wicket-best-practices/</link>
		<pubDate>Tue, 03 Jul 2012 12:34:41 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=323</guid>
		<description></description>
		<content:encoded><![CDATA[Der Artikel ist irgendwie an mir vorbei gewandert, halte ihn aber für eine recht gute Zusammenfassung von Empfehlungen, die die Arbeit mit Wicket um einiges einfacher machen können.

<a href="http://www.devproof.org/article/Apache_Wicket_-_Best_practices_german" target="_blank">Apache Wicket - best practices (german)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date><![CDATA[2012-07-03 13:34:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-03 12:34:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-best-practices]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"4.220903021247178";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"1.5715354712540692";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"0.714334305115486";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"60";s:5:"score";s:18:"0.5714674440923888";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"0.4286005830692916";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"0.4286005830692916";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quelltexte zum Buch mit Wicket 1.5</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/12/quelltexte-zum-buch-mit-wicket-1-5/</link>
		<pubDate>Thu, 12 Jul 2012 19:43:01 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[Es ist etwas Aufwand, aber ich bin dabei, die Quelltexte zum Buch auf Wicket 1.5 (aktuell 1.5.7) zu migrieren. Natürlich macht Wicket 1.5 einige Dinge anders, so dass es nicht bei einer Funktionsnamensanpassung bleibt. Im Moment kann das Projekt gebaut werden und 90% des Codes funktioniert wie erwartet. Die restlichen Fehler werden in den nächsten Tagen beseitigt und dann kommt die eigentliche Fleißarbeit: die inhaltliche Migration auf Wicket 1.5. Das wird sicher zu dem einen oder anderen Artikel führen.

Wer sich beteiligen möchte, findet das Projekt unter&nbsp;<a href="https://github.com/michaelmosmann/wicket-praxis">https://github.com/michaelmosmann/wicket-praxis</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date><![CDATA[2012-07-12 20:43:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-12 19:43:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[quelltexte-zum-buch-mit-wicket-1-5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:17:"32.26923532405402";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"53";s:5:"score";s:18:"27.677747027710527";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"26.936030061554238";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:18:"24.307518775671916";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"22.063916397869004";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"352";s:5:"score";s:17:"18.88438854276845";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket – Komponentenübersicht (1.5.7)</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/</link>
		<pubDate>Tue, 17 Jul 2012 21:25:02 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[Wicket ist schon eine Weile in der Version 1.5 unterwegs und steuert zügig auf ein neues Versionsschema zu (Wicket 6), da ist es sicher noch nicht zu spät, aktualisierte Kompontenen- und Klassenübersichten zu veröffentlichen.

[caption id="attachment_332" align="alignnone" width="450" caption="Wicket Kompontenten – Basis"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-comp-gv-3/" rel="attachment wp-att-332"><img class="size-medium wp-image-332" title="wicket-comp.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_-450x352.jpg" alt="" width="450" height="352" /></a>[/caption]

[caption id="attachment_333" align="alignnone" width="396" caption="Wicket Komponenten inklusive Extensions"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-comp-ext-gv-3/" rel="attachment wp-att-333"><img class="size-medium wp-image-333" title="wicket-comp-ext.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_-396x450.jpg" alt="" width="396" height="450" /></a>[/caption]

[caption id="attachment_334" align="alignnone" width="447" caption="Wicket Modelle"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-model-gv-3/" rel="attachment wp-att-334"><img class="size-medium wp-image-334" title="wicket-model.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_-447x450.jpg" alt="" width="447" height="450" /></a>[/caption]

[caption id="attachment_335" align="alignnone" width="450" caption="Wicket Behavior"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-behavior-gv-3/" rel="attachment wp-att-335"><img class="size-medium wp-image-335" title="wicket-behavior.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_-450x228.jpg" alt="" width="450" height="228" /></a>[/caption]

[caption id="attachment_336" align="alignnone" width="450" caption="Wicket Listener"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-listener-gv-3/" rel="attachment wp-att-336"><img class="size-medium wp-image-336" title="wicket-listener.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_-450x233.jpg" alt="" width="450" height="233" /></a>[/caption]

[caption id="attachment_337" align="alignnone" width="450" caption="Wicket RequestTarget"]<a href="http://www.wicket-praxis.de/blog/2012/07/17/wicket-komponentenubersicht-1-5-7/wicket-requesthandler-gv/" rel="attachment wp-att-337"><img class="size-medium wp-image-337" title="wicket-requestHandler.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_-450x260.jpg" alt="" width="450" height="260" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date><![CDATA[2012-07-17 22:25:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-17 21:25:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-komponentenubersicht-1-5-7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:18:"63.824537181704805";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"16.982797841567873";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"16.982797841567873";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:17:"16.34167722953802";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:18:"12.821332380623812";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"341";s:5:"score";s:18:"11.683933836599744";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket – Komponentenübersicht (6.0.0-beta3)</title>
		<link>http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/</link>
		<pubDate>Wed, 18 Jul 2012 18:52:15 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[Eine erste Komponentenübersicht für Wicket 6 für die frisch erschienen Beta. Bisher sieht es nicht so aus, als ob sich da großartig was geändert hat, aber man könnte ja weitere Ansichten generieren. Wenn jemand dafür eine gute Idee hat...

[caption id="attachment_343" align="alignnone" width="450" caption="Wicket Kompontenten – Basis"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-comp-gv-4/" rel="attachment wp-att-343"><img class="size-medium wp-image-343" title="wicket-comp.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp.gv_1-450x340.jpg" alt="" width="450" height="340" /></a>[/caption]

[caption id="attachment_344" align="alignnone" width="351" caption="Wicket Komponenten inklusive Extensions"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-comp-ext-gv-4/" rel="attachment wp-att-344"><img class="size-medium wp-image-344" title="wicket-comp-ext.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-comp-ext.gv_1-351x450.jpg" alt="" width="351" height="450" /></a>[/caption]

[caption id="attachment_346" align="alignnone" width="450" caption="Wicket Modelle"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-model-gv-4/" rel="attachment wp-att-346"><img class="size-medium wp-image-346" title="wicket-model.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-model.gv_1-450x325.jpg" alt="" width="450" height="325" /></a>[/caption]

[caption id="attachment_342" align="alignnone" width="450" caption="Wicket Behavior"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-behavior-gv-4/" rel="attachment wp-att-342"><img class="size-medium wp-image-342" title="wicket-behavior.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-behavior.gv_1-450x187.jpg" alt="" width="450" height="187" /></a>[/caption]

[caption id="attachment_345" align="alignnone" width="450" caption="Wicket Listener"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-listener-gv-4/" rel="attachment wp-att-345"><img class="size-medium wp-image-345" title="wicket-listener.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-listener.gv_1-450x233.jpg" alt="" width="450" height="233" /></a>[/caption]

[caption id="attachment_347" align="alignnone" width="450" caption="Wicket RequestTarget"]<a href="http://www.wicket-praxis.de/blog/2012/07/18/wicket-komponentenubersicht-6-0-0-beta3/wicket-requesthandler-gv-2/" rel="attachment wp-att-347"><img class="size-medium wp-image-347" title="wicket-requestHandler.gv" src="http://www.wicket-praxis.de/blog/wp-content/uploads/2012/07/wicket-requestHandler.gv_1-450x222.jpg" alt="" width="450" height="222" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2012-07-18 19:52:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-18 18:52:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-komponentenubersicht-6-0-0-beta3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allgemein"><![CDATA[Allgemein]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"27.34755879042091";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"76";s:5:"score";s:18:"13.490552859621785";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:17:"13.48592515708911";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"83";s:5:"score";s:18:"13.071829153130265";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:18:"13.071829153130265";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"13.057324574019816";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Know-How für eigene Projekte</title>
		<link>http://www.wicket-praxis.de/blog/2012/09/30/wicket-know-fuer-eigene-projekte/</link>
		<pubDate>Sun, 30 Sep 2012 21:42:44 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=352</guid>
		<description></description>
		<content:encoded><![CDATA[Dank der guten Erfahrungen die ich mit verschiedenen anderen Projekten und Github sammeln konnte, war es eigentlich ein erwartbarer Schritt, dass ich Code, den ich in meinen Beiträgen erläutert habe als in Projekten direkt nutzbare Bibliothek anbiete. Das hätte ich viel früher machen sollen. Aber hinterher ist man immer schlauer. Ich werde also nach und nach Wicket-Funktionalität im folgenden Github-Projekt einbringen:

<a href="https://github.com/flapdoodle-oss/de.flapdoodle.wicket">https://github.com/flapdoodle-oss/de.flapdoodle.wicket</a>

Wie man die Bibliothek (wovon es regelmäßig ein release in maven central geben wird) einbindet, steht auf der Readme-Seite. Viel Spass damit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date><![CDATA[2012-09-30 22:42:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-30 21:42:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-know-fuer-eigene-projekte]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:17:"33.78066513744381";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:17:"26.12455849357798";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"85";s:5:"score";s:18:"19.842993045217504";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"327";s:5:"score";s:17:"18.88438854276845";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"15.546296758686829";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"68";s:5:"score";s:18:"11.854939622936543";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wicket Page Serializer und Performanceoptimierung - Teil 1</title>
		<link>http://www.wicket-praxis.de/blog/2012/11/27/wicket-page-serializer-und-performanceoptimierung-teil-1/</link>
		<pubDate>Tue, 27 Nov 2012 21:37:45 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=362</guid>
		<description></description>
		<content:encoded><![CDATA[

Wicket bildet den Zustand einer Anwendung, einer Webseite nicht wie andere Frameworks über Parameter in der Url ab. Wicket-Komponenten können viel mehr ihren eigenen Zustand über normale Java-Sprachmittel abbilden. Eine Komponente kann auf diese Weise die komplexesten Informationen halten, die möglicherweise sehr schwer über Url-Parameter abgebildet werden könnten. Das hat Vorteile, aber eben auch Nachteile. Der vermutlich größte Nachteil ist der Speicherbedarf, denn die Komponenten müssen für jeden Nutzer getrennt erzeugt und verwaltet werden. Anwendungen, die den Zustand einer Nutzerinteraktion immer über Url-Parameter abbilden, können nach dem ausliefern der Seite alle temporär erzeugten Daten verwerfen.

Wicket arbeitet anders. In Wicket ist eine Seite eine Sammlung verschiedenster Komponenten und Zustände in beliebigen Objekten. Wenn der Nutzer eine Aktion auf der Seite auslöst, wird die passende Komponente in diesem Komponentenbaum gesucht und die entsprechende Methode aufgerufen. Jede Interaktion erzeugt einen neuen Zustand und Wicket erzeugt eine neue Version der Seite für den Fall, dass der Nutzer z.B. mit dem Browser-Back-Buttom auf eine ältere Seite mit einem anderen Zustand zurück navigiert. Da der Arbeitsspeicher meist ein knappes Gut ist, werden die älteren Versionen einer Seite als Objektgraph mit all den Zuständen serialisiert und auf einem Datenträger abgelegt. Und hier wird es nun spannend.

Je mehr Zustand die Komponenten halten, je mehr Daten dafür notwendig sind, desto größer ist natürlich der Speicherbedarf zu Laufzeit aber auch der Platzbedarf auf dem Datenträger. Um nicht unnötig den Speicher und die Festplatte mit temporären Daten zu belasten, wird nach dem Ausliefern der Ergebnisseite für alle Komponenten die detach()-Methode aufgerufen, die sich darum kümmern muss, alles was für den Zustand der Komponente irrelevant ist, aufzuräumen.

<strong>Überraschung vorraus</strong>

Nun hat man seine Wicket-Komponenten geschrieben und vermutet, dass man alles richtig gemacht hat oder hat einfach akzeptiert, dass z.B. der Speicherbedarf so hoch sein muss wie er eben gerade ist. Wenn man genügend Speicher hat, muss man ja nichts verändern, aber das ist vermutlich selten der Fall. Zum Glück bietet die Vorgehensweise, die Wicket an den Tag legt sehr interessante Möglichkeiten, um verschiedeneste Optimierungen vorzunehmen.

Wenn die Menge der Daten, die auf Festplatte geschrieben werden sehr hoch ist und die die CPU's im Rechner eher langweilen, kann man recht günstig Plattenplatz und Rechnengeschwindigkeit eintauschen (typische Kompression 70%, Mehrbelastung der CPU vermutlich 1-5%). Dafür benutzt man statt dem Standard-Serializer einfach die DeflatedJavaSerializer-Implementierung. **Vorsicht: die Daten, die mit dem Standard-Serializer auf die Festplatte geschrieben wurden, können nicht zurückgelesen werden.**

Besser wäre es natürlich, gleich von Anfang an weniger Temporärdaten zu erzeugen. Doch was genau welchen Platz im Speicher und später auf der Festplatte belegt, ist meist nicht ganz so einfach zu ermitteln.

<strong>Der Anfang</strong>

Zu erst habe ich versucht, die Funktion, die bei Wicket für die aufschlußreiche Darstellung sorgt, welche Komponente nicht serialisierbare Objekte enthält entsprechend zu erweitern. Allerdings steigt man da in eine der eher nicht so gut gelüfteten Kammern von Java hinunter und kann sich sicher leicht verirren, so das eine andere Alternative gefunden werden musste. Zum Glück hatten dieses Gefühl wohl auch andere und haben das Projekt Kryo gestartet (<a href="http://code.google.com/p/kryo/" target="_blank">http://code.google.com/p/kryo/</a>). Kryo ist eine Alternative zur Serialisierung von Javaobjekten, die sehr konfigurierbar und trotz Reflection auch schneller und kompakter serialisieren soll.

Dann gab es recht schnell bei wicketstuff ein Projekt, dass Kryo in Wicket integriert hat. Allerdings bisher nur für die Version 1.x. Ich habe das dann für Kryo2 nachgeholt und entsprechend modularisiert, so dass man in den Serialisierungsprozess eingreifen kann und auf diese Weise verschiedene Informationen ermitteln kann. Doch dazu später mehr.

<strong>Setup</strong>

Zuerst muss man sein Wicket-Projekt um eine Dependency erweitern:

<code lang="xml"><dependency>
  <groupId>org.wicketstuff</groupId>
  <artifactId>wicketstuff-serializer-kryo2</artifactId>
  <version>${wicket.version}</version>
</dependency></code>

Dabei gibt es sowohl für Wicket 1.5 (ab Version 1.5.9) als auch für Wicket 6 (ab Version 6.2.1) eine Version in Maven Central.

Dann ergänzen wir unsere WebApplication-Klasse in der init()-Methode um folgende Codezeilen:

<code lang="java5">// output of report of type sizes, sorted tree report (by size), aggregated tree 
ISerializedObjectTreeProcessor typeAndSortedTreeAndCollapsedSortedTreeProcessors = TreeProcessors.listOf(
new TypeSizeReport(), new SortedTreeSizeReport(), new SimilarNodeTreeTransformator(
new SortedTreeSizeReport()));

// strips class object writes from tree
TreeTransformator treeProcessors = new TreeTransformator(
typeAndSortedTreeAndCollapsedSortedTreeProcessors,
TreeTransformator.strip(new TypeFilter(Class.class)));

// serialization listener notified on every written object
ISerializationListener serializationListener = SerializationListeners.listOf(
new DefaultJavaSerializationValidator(), new AnalyzingSerializationListener(
new NativeTypesAsLabel(new ComponentIdAsLabel()), treeProcessors));

// customized serializer
InspectingKryoSerializer serializer = new InspectingKryoSerializer(Bytes.megabytes(30L),
serializationListener);

// set custom serializer as default
getFrameworkSettings().setSerializer(serializer);

getStoreSettings().setAsynchronous(false);
getStoreSettings().setInmemoryCacheSize(0);
getPageSettings().setVersionPagesByDefault(true);
</code>

Ab sofort wird für jede Seite, die serialisiert wird, eine detailierte Übersicht über die verwendeten Komponenten und den Speicherbedarf ausgegeben.

<strong>Beispielausgabe</strong>

Wenn nun eine Seite von Wicket serialisiert wird, dann wird während des Schreibens des Objektgraphen die Anzahl der geschriebenen Bytes ermittelt und den passenden Objekten zugeteilt. Dabei gibt es gewisse Unschärfen. Wenn ein Objekt referenziert wird, wird nur das erste mal das Objekt selbst geschrieben. Jedes weitere mal wird nur eine Referenz auf das Objekt serialisiert, was natürlich viel weniger Platz in Anspruch nimmt. Insofern ist die Auswertung immer dann mit Vorsicht zu genießen, wenn ein Objekt an verschiedenen Stellen referenziert wird und nur einer den "Zuschlag" erhält.

Die Ausgabe und der ganze Serialisierungsprozess ist hochgradig anpassbar. In der Beispielkonfiguration entsteht für eine Beispielseite folgendes Ergebnis:
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.models.ModelsV1Page, id = 4, render count = 1]'
DEBUG - TypeSizeReport             - 
===================================================================
|Type........................................................bytes|
-------------------------------------------------------------------
|de.wicketpraxis.usecase.models.ModelsV1Page...................133|
|org.apache.wicket.markup.html.basic.Label.....................102|
|java.lang.Integer..............................................21|
|java.lang.String................................................9|
|de.wicketpraxis.usecase.models.ModelsV1Page$1...................3|
|de.wicketpraxis.usecase.models.ModelsV1Page$2...................3|
|org.apache.wicket.request.mapper.parameter.PageParameters.......3|
|[Ljava.lang.Object;.............................................2|
===================================================================

DEBUG - TreeSizeReport             - 
===========================================================================================
|  #|Type.............................................................%|.sum|.local|.child|
-------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.models.ModelsV1Page(4)................100%|.276|...129|...147|
| #4|  [Ljava.lang.Object;..........................................48%|.135|.....2|...133|
|#12|    org.apache.wicket.markup.html.basic.Label(now2)............24%|..67|....51|....16|
|#15|      java.lang.Integer(=1343434906)............................1%|...5|.....5|.....0|
|#17|      java.lang.String("now2")..................................1%|...5|.....5|.....0|
|#14|      org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0|        de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
|#16|      java.lang.Integer(=-1)....................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
| #5|    org.apache.wicket.markup.html.basic.Label(now).............23%|..66|....51|....15|
| #9|      java.lang.Integer(=1343434906)............................1%|...5|.....5|.....0|
| #8|      org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
| #0|        de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
|#11|      java.lang.String("now")...................................1%|...4|.....4|.....0|
|#10|      java.lang.Integer(=-1)....................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
|#18|  java.lang.Integer(=1342845082)................................1%|...5|.....5|.....0|
|#22|  org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
| #2|  java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
|#19|  java.lang.Integer(=-1)........................................0%|...1|.....1|.....0|
|#20|  java.lang.Integer(=4).........................................0%|...1|.....1|.....0|
|#23|  java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
===========================================================================================

DEBUG - TreeSizeReport             - 
============================================================================================
|   #|Type.............................................................%|.sum|.local|.child|
--------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.models.ModelsV1Page(4)................100%|.276|...129|...147|
|  #4|  [Ljava.lang.Object;..........................................48%|.135|.....2|...133|
| #12|    org.apache.wicket.markup.html.basic.Label(now2)............24%|..67|....51|....16|
|null|      java.lang.Integer(=1343434906|=-1)........................2%|...6|.....6|.....0|
| #17|      java.lang.String("now2")..................................1%|...5|.....5|.....0|
| #14|      org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
|  #0|        de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
|  #0|      de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
|  #5|    org.apache.wicket.markup.html.basic.Label(now).............23%|..66|....51|....15|
|null|      java.lang.Integer(=1343434906|=-1)........................2%|...6|.....6|.....0|
|  #8|      org.apache.wicket.model.LoadableDetachableModel...........1%|...4|.....3|.....1|
|  #0|        de.wicketpraxis.usecase.models.ModelsV1Page(4)..........0%|...1|.....1|.....0|
| #11|      java.lang.String("now")...................................1%|...4|.....4|.....0|
|  #0|      de.wicketpraxis.usecase.models.ModelsV1Page(4)............0%|...1|.....1|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1|=4)......................3%|...9|.....9|.....0|
| #22|  org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
============================================================================================</pre>
Die erste Tabelle enthält eine Aufschlüsselung nach Typen, die zweite Tabelle stellt den fast ungefilterten Komponentenbaum dar (die Klasse Component verwaltet Kindkomponenten und andere Dinge in einem Object-Array, weshalb im Baum [Ljava.lang.Object auftaucht). Die dritte Tabelle versucht gleiche Zweige zusammen zu fassen. Dabei werden die Größen aufadiert und die Labels (in Klammern dahinter) vereint. Die Angaben in den Klammern hinter den Klassennamen stellen ein Label für die Klasse dar. Bei Wicket-Komponenten ist das die Id, bei nativen Datentypen der Wert.

Und das nächste Mal sehen wir uns an, was für interessante Entdeckungen man damit machen kann. Doch zuvor ein Hinweis. Das sollten sie so nie in Produktivumgebungen einsetzen. Auch kann es bei bestehenden Anwendung zu sehr sehr umfangreichen Ausgaben kommen, so dass man in einer IDE die Logausgabe vielleicht besser in eine Datei umlenkt.

Viel Spass mit dem Experimentieren.

Den Code für die Beispielen findet man unter <a href="https://github.com/michaelmosmann/wicket-praxis/tree/master/quickstarts/de.wicketpraxis-quickstarts-15-kryo2" target="_blank">https://github.com/michaelmosmann/wicket-praxis/tree/master/quickstarts/de.wicketpraxis-quickstarts-15-kryo2</a>&nbsp;.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date><![CDATA[2012-11-27 22:37:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-27 21:37:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-page-serializer-und-performanceoptimierung-teil-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="kryo2"><![CDATA[Kryo2]]></category>
		<category domain="category" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="serializer"><![CDATA[Serializer]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"370";s:5:"score";s:17:"77.51509790575722";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:1:"4";s:5:"score";s:18:"23.167697279014952";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:3:"327";s:5:"score";s:18:"17.006978872410944";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"172";s:5:"score";s:18:"17.006978872410944";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:18:"16.269390698710406";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"16.269390698710406";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>67839</wp:comment_id>
			<wp:comment_author><![CDATA[Wicket Page Serializer und Performanceoptimierung – Teil 3 &#8211; Unerwünschte Gäste | wicket praxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.wicket-praxis.de/blog/2012/12/11/wicket-page-serializer-und-performanceoptimierung-teil-3-unerwunschte-gaste/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.198.25.105]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-11 21:40:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-11 20:40:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] folgt der 3. Teil der Serie (Wicket Page Serializer Teil 1). Dabei nähern wir uns dem Thema von vielleicht unerwarteter [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355258502.4114";s:7:"message";s:53:"michael hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355258450.0234";s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67794</wp:comment_id>
			<wp:comment_author><![CDATA[Wicket Page Serializer und Performanceoptimierung – Teil 2 &#8211; DateFormat | wicket praxis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.wicket-praxis.de/blog/2012/11/30/wicket-page-serializer-und-performanceoptimierung-teil-2-dateformat/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.198.25.105]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-30 00:11:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-29 23:11:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] im Teil 1 versprochen, werde ich im zweiten Teil an einem konkreten Beispiel demonstrieren, welche Fragen man [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354230707.8349";s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354231073.7722";s:7:"message";s:53:"michael hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67786</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Dilger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[martin@effectivetrainings.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.133.223.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-27 23:29:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-27 22:29:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Super, sehr interessant!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1354231082.449";s:7:"message";s:53:"michael hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1354055361.3474";s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>476364</wp:comment_id>
			<wp:comment_author><![CDATA[Bella]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kr5w1br98z7@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://aiqoieg.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.143.232.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-10 06:30:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-10 05:30:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[X CatrinoNon so quale sia la tua professione, ne quanto tu sia acculturato, fatto sta che i tuoi versi, espressi cosÃ¬ di getto, non sfigurano di certo.Anzi, a parer dello scrivente che non Ã¨ certo un letterato, pur se scritti nel nostro dialetto esprimono molto chiaramente ciÃ² che ci vuoi coC.micareunomplimenti e cordilalitÃ !]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1486704638.1808701;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Page Serializer und Performanceoptimierung – Teil 2 - DateFormat</title>
		<link>http://www.wicket-praxis.de/blog/2012/11/30/wicket-page-serializer-und-performanceoptimierung-teil-2-dateformat/</link>
		<pubDate>Thu, 29 Nov 2012 23:11:41 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[

Wie im <a href="http://www.wicket-praxis.de/blog/2012/11/27/wicket-page-serializer-und-performanceoptimierung-teil-1/">Teil 1</a> versprochen, werde ich im zweiten Teil an einem konkreten Beispiel demonstrieren, welche Fragen man vielleicht mit diesem neuen Werkzeug etwas besser beantworten kann.

<strong>Beispiel Datumsanzeige</strong>

Früher (und eher nicht später) wird man in einer Wicket-Anwendung ein Datum zur Anzeige bringen. Die einfachste Methode ist natürlich ein Label und ein IModelals Model-Instanz. Normalerweise möchte man aber eine ganz bestimmte Darstellung, so dass man nicht umhin kommt, das Datum irgendwie zu konvertieren. Ein möglicher Ansatz könnte in Abwandlungen wie folgt aussehen:

<code lang="java5">public class DateModel extends LoadableDetachableModel<Date>
{
  @Override
  protected Date load()
  {
    return new Date();
  }
}</code>

<code lang="java5">public class DateFormatV1Page extends WebPage
{
  public DateFormatV1Page()
  {
    add(new Label("now", new DateToStringModel(new DateModel())));
    add(new Label("now2", new DateToStringModel(new DateModel())));

    setStatelessHint(false);
  }

  static class DateToStringModel extends LoadableDetachableModel<String>
  {
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
    private final IModel<Date> dateModel;

    public DateToStringModel(IModel<Date> dateModel)
    {
      this.dateModel = dateModel;
    }

    @Override
    protected String load()
    {
      return dateFormat.format(dateModel.getObject());
    }

    @Override
    protected void onDetach()
    {
      super.onDetach();
      dateModel.detach();
    }
  }
}</code>

Das Markup spielt keine große Rolle, sollte aber nicht unerwähnt bleiben:

<code lang="xml"><html>
  <head>
    <title>Date Format</title>
  </head>
  <body>
    <h1>Date Format</h1>
    Now: <span wicket:id="now"></span><br>
    Now: <span wicket:id="now2"></span><br>
  </body>
</html></code>

Der Aufruf von setStatelessHint(false) im Konstruktor sorgt in diesem und in den folgenden Beispielen dafür, das Wicket annehmen muss, dass die Seite nicht zustandslos ist. Zustandslose Seiten werden nicht serialisiert, weil nicht zu erwarten ist, dass man diese Instanz später noch einmal benötigt.

Wenn diese Seite nun serialisiert wird, ergibt sich folgendes Bild:
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.dateformat.DateFormatV1Page, id = 0, render count = 1]'
DEBUG - TypeSizeReport             - 
===============================================================================
|Type....................................................................bytes|
-------------------------------------------------------------------------------
|[Ljava.lang.String;.......................................................287|
|de.wicketpraxis.usecase.dateformat.DateFormatV1Page.......................139|
|java.lang.String..........................................................112|
|org.apache.wicket.markup.html.basic.Label..................................83|
|java.text.SimpleDateFormat.................................................80|
|de.wicketpraxis.usecase.dateformat.DateFormatV1Page$DateToStringModel......80|
|java.lang.Integer..........................................................58|
|java.util.GregorianCalendar................................................46|
|java.lang.Character........................................................40|
|java.text.DecimalFormat....................................................36|
|java.util.Date.............................................................20|
|java.lang.Byte.............................................................12|
|java.lang.Boolean..........................................................10|
|java.util.Locale............................................................6|
|java.text.DateFormatSymbols.................................................4|
|java.math.RoundingMode......................................................3|
|org.apache.wicket.request.mapper.parameter.PageParameters...................3|
|[Ljava.lang.Object;.........................................................2|
|de.wicketpraxis.usecase.dateformat.DateModel................................2|
|java.text.DecimalFormatSymbols..............................................2|
===============================================================================

DEBUG - TreeSizeReport             - 
=============================================================================================================
|   #|Type.............................................................................%|..sum|.local|.child|
-------------------------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)........................100%|.1025|...137|...888|
|  #4|  [Ljava.lang.Object;..........................................................85%|..876|.....2|...874|
|  #5|    org.apache.wicket.markup.html.basic.Label(now).............................64%|..658|....77|...581|
|  #8|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page$DateToStringModel....55%|..570|....75|...495|
| #10|        java.text.SimpleDateFormat.............................................48%|..494|....72|...422|
| #16|          java.text.DateFormatSymbols..........................................23%|..242|.....2|...240|
| #25|            [Ljava.lang.String;.................................................7%|...76|....76|.....0|
| #28|            [Ljava.lang.String;.................................................5%|...56|....56|.....0|
| #26|            [Ljava.lang.String;.................................................3%|...39|....39|.....0|
| #19|            java.lang.String("GuMt...").........................................1%|...20|....20|.....0|
| #27|            [Ljava.lang.String;.................................................1%|...17|....17|.....0|
| #18|            [Ljava.lang.String;.................................................1%|...16|....16|.....0|
| #20|            java.util.Locale....................................................0%|...10|.....1|.....9|
| #21|              java.lang.String("DE")............................................0%|....3|.....3|.....0|
| #23|              java.lang.String("de")............................................0%|....3|.....3|.....0|
| #24|              java.lang.String("")..............................................0%|....2|.....2|.....0|
| #22|              java.lang.Integer(=-1)............................................0%|....1|.....1|.....0|
| #17|            [Ljava.lang.String;.................................................0%|....6|.....6|.....0|
| #30|          java.text.DecimalFormat..............................................12%|..125|....33|....92|
| #62|            java.text.DecimalFormatSymbols......................................4%|...45|.....1|....44|
| #63|              java.lang.String("�").............................................0%|....5|.....5|.....0|
| #64|              java.lang.String("&euro;").............................................0%|....5|.....5|.....0|
| #70|              java.lang.String("∞").............................................0%|....5|.....5|.....0|
| #71|              java.lang.String("EUR")...........................................0%|....4|.....4|.....0|
| #68|              java.lang.String("E").............................................0%|....3|.....3|.....0|
| #65|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #66|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #67|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #69|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #72|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #73|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #74|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #75|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #76|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #78|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #20|              java.util.Locale..................................................0%|....1|.....1|.....0|
| #77|              java.lang.Integer(=3).............................................0%|....1|.....1|.....0|
| #38|            java.lang.Integer(=MAX).............................................0%|....5|.....5|.....0|
| #48|            java.lang.String("'-")..............................................0%|....3|.....3|.....0|
| #50|            java.lang.String("-")...............................................0%|....3|.....3|.....0|
| #39|            java.lang.Integer(=309).............................................0%|....2|.....2|.....0|
| #49|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #51|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #54|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #55|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #56|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #57|            java.lang.String("")................................................0%|....2|.....2|.....0|
| #58|            java.math.RoundingMode..............................................0%|....2|.....2|.....0|
| #31|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #32|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #33|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #34|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #35|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #36|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
| #37|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
| #40|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #41|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #42|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #43|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
| #44|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
| #45|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
| #46|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
| #47|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
| #52|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #53|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #59|            java.lang.Integer(=4)...............................................0%|....1|.....1|.....0|
| #60|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
| #79|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #12|          java.util.GregorianCalendar...........................................2%|...23|....23|.....0|
| #80|          java.lang.String("dd.M...")...........................................1%|...20|....20|.....0|
| #14|          java.util.Date........................................................0%|...10|....10|.....0|
| #20|          java.util.Locale......................................................0%|....1|.....1|.....0|
| #81|          java.lang.Integer(=1).................................................0%|....1|.....1|.....0|
| #83|        de.wicketpraxis.usecase.dateformat.DateModel............................0%|....1|.....1|.....0|
| #84|      java.lang.Integer(=1343434906)............................................0%|....5|.....5|.....0|
| #86|      java.lang.String("now")...................................................0%|....4|.....4|.....0|
| #85|      java.lang.Integer(=-1)....................................................0%|....1|.....1|.....0|
|  #0|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)....................0%|....1|.....1|.....0|
| #87|    org.apache.wicket.markup.html.basic.Label(now2)............................21%|..216|.....6|...210|
| #88|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page$DateToStringModel....19%|..198|.....5|...193|
| #89|        java.text.SimpleDateFormat.............................................18%|..192|.....8|...184|
| #92|          java.text.DateFormatSymbols...........................................7%|...81|.....2|....79|
| #94|            [Ljava.lang.String;.................................................5%|...56|....56|.....0|
| #93|            [Ljava.lang.String;.................................................1%|...17|....17|.....0|
| #17|            [Ljava.lang.String;.................................................0%|....1|.....1|.....0|
| #18|            [Ljava.lang.String;.................................................0%|....1|.....1|.....0|
| #19|            java.lang.String("GuMt...").........................................0%|....1|.....1|.....0|
| #20|            java.util.Locale....................................................0%|....1|.....1|.....0|
| #25|            [Ljava.lang.String;.................................................0%|....1|.....1|.....0|
| #26|            [Ljava.lang.String;.................................................0%|....1|.....1|.....0|
| #95|          java.text.DecimalFormat...............................................6%|...67|.....3|....64|
|#117|            java.text.DecimalFormatSymbols......................................2%|...28|.....1|....27|
|#118|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#119|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#120|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#121|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#122|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#123|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#124|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#125|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#126|              java.lang.Character...............................................0%|....2|.....2|.....0|
|#128|              java.lang.Character...............................................0%|....2|.....2|.....0|
| #63|              java.lang.String("�").............................................0%|....1|.....1|.....0|
| #64|              java.lang.String("&euro;").............................................0%|....1|.....1|.....0|
| #68|              java.lang.String("E").............................................0%|....1|.....1|.....0|
| #70|              java.lang.String("∞").............................................0%|....1|.....1|.....0|
| #71|              java.lang.String("EUR")...........................................0%|....1|.....1|.....0|
| #20|              java.util.Locale..................................................0%|....1|.....1|.....0|
|#127|              java.lang.Integer(=3).............................................0%|....1|.....1|.....0|
|#103|            java.lang.Integer(=MAX).............................................0%|....5|.....5|.....0|
|#104|            java.lang.Integer(=309).............................................0%|....2|.....2|.....0|
| #96|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #97|            java.lang.Byte......................................................0%|....1|.....1|.....0|
| #98|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #99|            java.lang.Byte......................................................0%|....1|.....1|.....0|
|#100|            java.lang.Byte......................................................0%|....1|.....1|.....0|
|#101|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
|#102|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
|#105|            java.lang.Byte......................................................0%|....1|.....1|.....0|
|#106|            java.lang.Byte......................................................0%|....1|.....1|.....0|
|#107|            java.lang.Byte......................................................0%|....1|.....1|.....0|
|#108|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
|#109|            java.lang.Integer(=0)...............................................0%|....1|.....1|.....0|
|#110|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
|#111|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
|#112|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
| #48|            java.lang.String("'-")..............................................0%|....1|.....1|.....0|
| #49|            java.lang.String("")................................................0%|....1|.....1|.....0|
| #50|            java.lang.String("-")...............................................0%|....1|.....1|.....0|
| #51|            java.lang.String("")................................................0%|....1|.....1|.....0|
|#113|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
|#114|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #54|            java.lang.String("")................................................0%|....1|.....1|.....0|
| #55|            java.lang.String("")................................................0%|....1|.....1|.....0|
| #56|            java.lang.String("")................................................0%|....1|.....1|.....0|
| #57|            java.lang.String("")................................................0%|....1|.....1|.....0|
| #58|            java.math.RoundingMode..............................................0%|....1|.....1|.....0|
|#115|            java.lang.Integer(=4)...............................................0%|....1|.....1|.....0|
|#116|            java.lang.Integer(=1)...............................................0%|....1|.....1|.....0|
|#129|            java.lang.Boolean...................................................0%|....1|.....1|.....0|
| #90|          java.util.GregorianCalendar...........................................2%|...23|....23|.....0|
| #91|          java.util.Date........................................................0%|...10|....10|.....0|
| #20|          java.util.Locale......................................................0%|....1|.....1|.....0|
| #80|          java.lang.String("dd.M...")...........................................0%|....1|.....1|.....0|
|#130|          java.lang.Integer(=1).................................................0%|....1|.....1|.....0|
|#131|        de.wicketpraxis.usecase.dateformat.DateModel............................0%|....1|.....1|.....0|
|#132|      java.lang.Integer(=1343434906)............................................0%|....5|.....5|.....0|
|#134|      java.lang.String("now2")..................................................0%|....5|.....5|.....0|
|#133|      java.lang.Integer(=-1)....................................................0%|....1|.....1|.....0|
|  #0|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)....................0%|....1|.....1|.....0|
|#135|  java.lang.Integer(=1342845082)................................................0%|....5|.....5|.....0|
|#139|  org.apache.wicket.request.mapper.parameter.PageParameters.....................0%|....3|.....3|.....0|
|  #2|  java.lang.Integer(=1).........................................................0%|....1|.....1|.....0|
|#136|  java.lang.Integer(=-1)........................................................0%|....1|.....1|.....0|
|#137|  java.lang.Integer(=0).........................................................0%|....1|.....1|.....0|
|#140|  java.lang.Integer(=1).........................................................0%|....1|.....1|.....0|
=============================================================================================================

DEBUG - TreeSizeReport             - 
=============================================================================================================
|   #|Type.............................................................................%|..sum|.local|.child|
-------------------------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)........................100%|.1025|...137|...888|
|  #4|  [Ljava.lang.Object;..........................................................85%|..876|.....2|...874|
|  #5|    org.apache.wicket.markup.html.basic.Label(now).............................64%|..658|....77|...581|
|  #8|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page$DateToStringModel....55%|..570|....75|...495|
| #10|        java.text.SimpleDateFormat.............................................48%|..494|....72|...422|
| #16|          java.text.DateFormatSymbols..........................................23%|..242|.....2|...240|
|null|            [Ljava.lang.String;................................................20%|..210|...210|.....0|
| #19|            java.lang.String("GuMt...").........................................1%|...20|....20|.....0|
| #20|            java.util.Locale....................................................0%|...10|.....1|.....9|
|null|              java.lang.String("DE"|"de"|"")....................................0%|....8|.....8|.....0|
| #22|              java.lang.Integer(=-1)............................................0%|....1|.....1|.....0|
| #30|          java.text.DecimalFormat..............................................12%|..125|....33|....92|
| #62|            java.text.DecimalFormatSymbols......................................4%|...45|.....1|....44|
|null|              java.lang.String("�"|"&euro;"|"E"|"∞"|"EUR")...........................2%|...22|....22|.....0|
|null|              java.lang.Character...............................................1%|...20|....20|.....0|
| #20|              java.util.Locale..................................................0%|....1|.....1|.....0|
| #77|              java.lang.Integer(=3).............................................0%|....1|.....1|.....0|
|null|            java.lang.String("'-"|""|"-").......................................1%|...18|....18|.....0|
|null|            java.lang.Integer(=0|=MAX|=309|=1|=4)...............................1%|...16|....16|.....0|
|null|            java.lang.Byte......................................................0%|....6|.....6|.....0|
|null|            java.lang.Boolean...................................................0%|....5|.....5|.....0|
| #58|            java.math.RoundingMode..............................................0%|....2|.....2|.....0|
| #12|          java.util.GregorianCalendar...........................................2%|...23|....23|.....0|
| #80|          java.lang.String("dd.M...")...........................................1%|...20|....20|.....0|
| #14|          java.util.Date........................................................0%|...10|....10|.....0|
| #20|          java.util.Locale......................................................0%|....1|.....1|.....0|
| #81|          java.lang.Integer(=1).................................................0%|....1|.....1|.....0|
| #83|        de.wicketpraxis.usecase.dateformat.DateModel............................0%|....1|.....1|.....0|
|null|      java.lang.Integer(=1343434906|=-1)........................................0%|....6|.....6|.....0|
| #86|      java.lang.String("now")...................................................0%|....4|.....4|.....0|
|  #0|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)....................0%|....1|.....1|.....0|
| #87|    org.apache.wicket.markup.html.basic.Label(now2)............................21%|..216|.....6|...210|
| #88|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page$DateToStringModel....19%|..198|.....5|...193|
| #89|        java.text.SimpleDateFormat.............................................18%|..192|.....8|...184|
| #92|          java.text.DateFormatSymbols...........................................7%|...81|.....2|....79|
|null|            [Ljava.lang.String;.................................................7%|...77|....77|.....0|
| #19|            java.lang.String("GuMt...").........................................0%|....1|.....1|.....0|
| #20|            java.util.Locale....................................................0%|....1|.....1|.....0|
| #95|          java.text.DecimalFormat...............................................6%|...67|.....3|....64|
|#117|            java.text.DecimalFormatSymbols......................................2%|...28|.....1|....27|
|null|              java.lang.Character...............................................1%|...20|....20|.....0|
|null|              java.lang.String("�"|"&euro;"|"E"|"∞"|"EUR")...........................0%|....5|.....5|.....0|
| #20|              java.util.Locale..................................................0%|....1|.....1|.....0|
|#127|              java.lang.Integer(=3).............................................0%|....1|.....1|.....0|
|null|            java.lang.Integer(=0|=MAX|=309|=1|=4)...............................1%|...16|....16|.....0|
|null|            java.lang.String("'-"|""|"-").......................................0%|....8|.....8|.....0|
|null|            java.lang.Byte......................................................0%|....6|.....6|.....0|
|null|            java.lang.Boolean...................................................0%|....5|.....5|.....0|
| #58|            java.math.RoundingMode..............................................0%|....1|.....1|.....0|
| #90|          java.util.GregorianCalendar...........................................2%|...23|....23|.....0|
| #91|          java.util.Date........................................................0%|...10|....10|.....0|
| #20|          java.util.Locale......................................................0%|....1|.....1|.....0|
| #80|          java.lang.String("dd.M...")...........................................0%|....1|.....1|.....0|
|#130|          java.lang.Integer(=1).................................................0%|....1|.....1|.....0|
|#131|        de.wicketpraxis.usecase.dateformat.DateModel............................0%|....1|.....1|.....0|
|null|      java.lang.Integer(=1343434906|=-1)........................................0%|....6|.....6|.....0|
|#134|      java.lang.String("now2")..................................................0%|....5|.....5|.....0|
|  #0|      de.wicketpraxis.usecase.dateformat.DateFormatV1Page(0)....................0%|....1|.....1|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1|=0)......................................0%|....9|.....9|.....0|
|#139|  org.apache.wicket.request.mapper.parameter.PageParameters.....................0%|....3|.....3|.....0|
=============================================================================================================</pre>
<strong>Tabelle 1</strong>

Ich versuche mal, die obere Ausgabe etwas zu erklären. In der ersten Tabelle, die wir im Log finden, wird versucht, die Menge der geschriebenen Daten einem Typ zuzuordnen. Dabei kann es zu Ungenauigkeiten kommen, wenn Typen sich selbst enthalten können (<em>ArrayList</em> von Objekten, die wieder eine <em>ArrayList</em> benutzen). Die Typbezeichnung ergibt sich meist aus <em>getClass().toString()</em> (für anonyme Klassen wird die Elternklasse ausgewählt). Was in dieser Tabelle schon auffällt: da werden viele Strings geschrieben.

<strong>Tabelle 2</strong>

In der zweiten Tabelle befinden sich 6 Spalten (5 und eine Doppelbelegung). Die erste Spalte (#) gibt eine ObjektID an. Wird die selbe ID in mehr als einer Zeile verwendet, dann wird an der zweiten Stelle ebenfalls eine Referenz auf das Objekt gehalten und natürlich mit serialisiert. Ein Objekt wird immer beim ersten Treffer vollständig serialisiert. Das bedeutet, wenn 3 Objekte eine Referenz auf A haben, bekommt das erste Objekt den größten Zuschlag. Das kann man sicher irgendwie korrigieren, aber meist reicht dieses Wissen aus, um trotzdem sehr viel (wenn auch erst mal etwas gefühlt unpräzise) Erkenntnisse zu gewinnen. Die zweite Spalte (Type) gibt wie in der ersten Tabelle den Typ an. Da hier immer die selben Rohdaten benutzt werden (die zweite Tabelle ist eigentlich die ungefilterte Datenquelle, die anderen Tabellen sind aggregierte Daten davon), gelten die selben Regeln. Hinter dem Typ wird in Klammern für Komponenten die WicketID und für einfache Datentypen der Wert angezeigt (bei Integer ist immer ein = davor). Dann gibt es die dritte Spalte (%, die Doppelbelegung). Dort wird anzeigt welchen Platzanteil das Objekt inklusive aller Unterobjekte einnimmt. Das soll helfen, die großen Fische zu finden. Die drei letzten Spalten geben von hinten nach vorne die Größe aller Kinder (child), den Datenumfang des Objektes selbst (local) und die Summe beider Zahlen (sum) an.

Was an der zweiten Tabelle auffällt ist die große Anzahl an Objekten unterhalb von <em>java.text.SimpleDateFormat</em>. Wenn man sich dann die Gesamtgröße anschaut, werden für dieses Beispiel rund 1kb an Daten serialisiert. Das hört sich nicht viel an, verändert sich aber dramatisch, wenn man sich das ganze in einer langen Tabelle vorstellt. Die erste Instanz kommt auf 48% und die zweite auf 18% des Platzbedarfs der Seite. Das ist eigentlich recht viel. Wenn man mal in die Untiefen der Klassen hinabsteigt, stößt man in dem Fall auf die Klasse <em>java.text.DateFormatSymbols</em>. Diese Klasse entfaltet recht interessant viele String-Arrays im Speicher, die dann auch mit der Seite serialisiert wird. In Anbetracht der Eingangsdaten darf man durchaus über den Umfang überrascht sein.

<strong>Tabelle 3</strong>

Die dritte Tabelle versucht folgendes: Wenn in der Baumstruktur gleiche Äste vorhanden sind, dann werden diese unter Berücksichtigung der Größen zusammengelegt. Das kann man an zwei Dingen gut erkennen: Bei einfach Datentypen und Wicket-Komponenten erscheinen mehrere Werte durch | getrennt innerhalb der Klammern und die ObjektID ist null. Dadurch wird der Baum kompakter und kann gerade bei <em>ListView</em>-Konstrukten sehr viel lesbarer werden.

Es scheint keine gute Idee zu sein, eine Instanz der Klasse <em>SimpleDateFormat</em> mit der Seite mitzuserialisieren. Doch welche Alternativen haben wir?

<strong>Alternative 1</strong>

In Wicket kann man über Konverter dafür sorgen, dass eine automatische Umwandlung eines Typs in einen String oder aus einem String transparent für die restliche Anwendung durchgeführt wird. Eine einfache Methode ist das erstellen einer eigenen <em>Label</em>-Komponente, die einen anderen Konverter benutzt.

<code lang="java5">public class DateFormatV2Page extends WebPage
{
  public DateFormatV2Page()
  {
    add(new DateLabel("now", new DateModel()));
    add(new DateLabel("now2", new DateModel()));

    setStatelessHint(false);
  }

  static class DateLabel extends Label
  {
    public DateLabel(String id, IModel<Date> model)
    {
      super(id, model);
    }

    @Override
    public <T> IConverter<T> getConverter(Class<T> type)
    {
      return (IConverter<T>)new DateConverter()
      {
        @Override
        public DateFormat getDateFormat(Locale locale)
        {
          return new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
        }
      };
    }
  }
}</code>

Das Markup bleibt unverändert. Wenn diese Seite nun serialisiert wird, ergibt sich folgendes Bild:
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.dateformat.DateFormatV2Page, id = 2, render count = 1]'
DEBUG - TypeSizeReport             - 
=======================================================================
|Type............................................................bytes|
-----------------------------------------------------------------------
|de.wicketpraxis.usecase.dateformat.DateFormatV2Page...............139|
|de.wicketpraxis.usecase.dateformat.DateFormatV2Page$DateLabel.....119|
|java.lang.Integer..................................................21|
|java.lang.String....................................................9|
|org.apache.wicket.request.mapper.parameter.PageParameters...........3|
|[Ljava.lang.Object;.................................................2|
|de.wicketpraxis.usecase.dateformat.DateModel........................2|
=======================================================================

DEBUG - TreeSizeReport             - 
=======================================================================================================
|  #|Type.........................................................................%|.sum|.local|.child|
-------------------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.dateformat.DateFormatV2Page(2)....................100%|.295|...137|...158|
| #4|  [Ljava.lang.Object;......................................................49%|.146|.....2|...144|
| #5|    de.wicketpraxis.usecase.dateformat.DateFormatV2Page$DateLabel(now).....42%|.124|...112|....12|
| #9|      java.lang.Integer(=1343434906)........................................1%|...5|.....5|.....0|
|#11|      java.lang.String("now")...............................................1%|...4|.....4|.....0|
| #8|      de.wicketpraxis.usecase.dateformat.DateModel..........................0%|...1|.....1|.....0|
|#10|      java.lang.Integer(=-1)................................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.dateformat.DateFormatV2Page(2)................0%|...1|.....1|.....0|
|#12|    de.wicketpraxis.usecase.dateformat.DateFormatV2Page$DateLabel(now2).....6%|..20|.....7|....13|
|#14|      java.lang.Integer(=1343434906)........................................1%|...5|.....5|.....0|
|#16|      java.lang.String("now2")..............................................1%|...5|.....5|.....0|
|#13|      de.wicketpraxis.usecase.dateformat.DateModel..........................0%|...1|.....1|.....0|
|#15|      java.lang.Integer(=-1)................................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.dateformat.DateFormatV2Page(2)................0%|...1|.....1|.....0|
|#17|  java.lang.Integer(=1342845082)............................................1%|...5|.....5|.....0|
|#21|  org.apache.wicket.request.mapper.parameter.PageParameters.................1%|...3|.....3|.....0|
| #2|  java.lang.Integer(=1).....................................................0%|...1|.....1|.....0|
|#18|  java.lang.Integer(=-1)....................................................0%|...1|.....1|.....0|
|#19|  java.lang.Integer(=2).....................................................0%|...1|.....1|.....0|
|#22|  java.lang.Integer(=1).....................................................0%|...1|.....1|.....0|
=======================================================================================================

DEBUG - TreeSizeReport             - 
============================================================================================================
|   #|Type.............................................................................%|.sum|.local|.child|
------------------------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.dateformat.DateFormatV2Page(2)........................100%|.295|...137|...158|
|  #4|  [Ljava.lang.Object;..........................................................49%|.146|.....2|...144|
|null|    de.wicketpraxis.usecase.dateformat.DateFormatV2Page$DateLabel(now|now2)....48%|.144|...119|....25|
|null|      java.lang.Integer(=1343434906|=-1)........................................4%|..12|....12|.....0|
|null|      java.lang.String("now"|"now2")............................................3%|...9|.....9|.....0|
|null|      de.wicketpraxis.usecase.dateformat.DateModel..............................0%|...2|.....2|.....0|
|null|      de.wicketpraxis.usecase.dateformat.DateFormatV2Page(2)....................0%|...2|.....2|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1|=2)......................................3%|...9|.....9|.....0|
| #21|  org.apache.wicket.request.mapper.parameter.PageParameters.....................1%|...3|.....3|.....0|
============================================================================================================</pre>
Der größte Unterschied: viel weniger Objekte, nur noch ein drittel der Größe der vorherigen Seite. Der meiste Platz wird von der Seite und der Komponente beansprucht. Das auffällige [Ljava.lang.Object; ist einfach erklärt: Wicket verwaltet die Kindkomponenten und andere Dinge in einem ObjectArray und nicht in einer Liste. In dem Beispiel kann man auch gut erkennen, dass die Baumstruktur der Serialisierung vom der ersten und zweiten Label-Komponente gleich sind und diese für die dritte Tabelle zusammengefasst wurden.

<strong>Alternative 2</strong>

Wenn wir schon auf Wicket-Konverter zurückgreifen, kann man das ganze noch ein wenig weiter treiben. Dazu müssen wir allerding etwas mehr Anpassungen vornehmen.

In unserer WebApplication-Klasse müssen wir folgende Methode implementieren:

<code lang="java5">@Override
protected IConverterLocator newConverterLocator()
{
  ConverterLocator ret = new ConverterLocator();
  ret.set(SmallDate.class, new DateContainerConverter<SmallDate>(SmallDate.class, "dd.MM.yyyy"));
  ret.set(FullDate.class, new DateContainerConverter<FullDate>(FullDate.class, "dd.MM.yyyy HH:mm:ss"));
  return ret;
}</code>

Jetzt kommen noch ein paar Klassen, die notwendig sind, damit das ganze funktioniert. Die Idee dahinter ist folgende: Wicket sucht für eine Klasse den passenden Konverter über den ConverterLocator. Als Schlüssel dient der Typ. Wir benutzen einen Container-Typ von dem wir verschiedene Ableitungen erstellen (SmallDate, FullDate) und für diese Typen jeweils eigene Konverter registrieren. Doch hier erst einmal der Code:

<code lang="java5">public abstract class AbstractDateContainer
{
  private final Date value;

  public AbstractDateContainer(Date value)
  {
    this.value = value;
  }

  public Date getValue()
  {
    return value;
  }
}</code>

<code lang="java5">public class FullDate extends AbstractDateContainer
{
  public FullDate(Date value)
  {
    super(value);
  }
}

public class SmallDate extends AbstractDateContainer
{
  public SmallDate(Date value)
  {
    super(value);
  }
}</code>

Man sieht, am Date-Objekt, werden keine Anpassungen durch den Container vorgenommen.

<code lang="java5">public class DateContainerConverter<T extends AbstractDateContainer> extends AbstractConverter<T>
{
  private final Class<T> containerType;
  private final String pattern;
  private Constructor<T> constructor;

  public DateContainerConverter(Class<T> containerType,String pattern)
  {
    this.containerType = containerType;
    this.pattern = pattern;
    try
    {
      constructor = containerType.getConstructor(Date.class);
    }
    catch (SecurityException e)
    {
      throw new WicketRuntimeException(e);
    }
    catch (NoSuchMethodException e)
    {
      throw new WicketRuntimeException(e);
    }
  }

  

  
  /**
   * @see org.apache.wicket.util.convert.IConverter#convertToObject(java.lang.String,Locale)
   */
  @Override
  public T convertToObject(final String value, final Locale locale)
  {
    if ((value == null) || Strings.isEmpty(value))
    {
      return null;
    }
    else
    {
      try
      {
        return constructor.newInstance(parse(getDateFormat(locale), value, locale));
      }
      catch (IllegalArgumentException e)
      {
        throw new WicketRuntimeException(e);
      }
      catch (InstantiationException e)
      {
        throw new WicketRuntimeException(e);
      }
      catch (IllegalAccessException e)
      {
        throw new WicketRuntimeException(e);
      }
      catch (InvocationTargetException e)
      {
        throw new WicketRuntimeException(e);
      }
    }
  }

  /**
   * @see org.apache.wicket.util.convert.IConverter#convertToString(Object, java.util.Locale)
   */
  @Override
  public String convertToString(final T value, final Locale locale)
  {
    final Format dateFormat = getDateFormat(locale);
    if (dateFormat != null)
    {
      return dateFormat.format(value.getValue());
    }
    return value.toString();
  }

  private Format getDateFormat(Locale locale)
  {
    if (locale == null)
    {
      locale = Locale.getDefault();
    }
    return new SimpleDateFormat(this.pattern, locale);
  }

  @Override
  protected Class<T> getTargetType()
  {
    return containerType;
  }
}</code>

Der Konverter ist so implementiert, dass er beide Konvertierungsrichtungen unterstützt. Wir benötigen jetzt für unser Beispiel allerdings noch ein Model, dass diese beiden Typen als Wert liefert.

<code lang="java5">public class DateContainerModel extends LoadableDetachableModel<AbstractDateContainer>
{
  private final boolean full;

  public DateContainerModel(boolean full)
  {
    this.full = full;
  }

  @Override
  protected AbstractDateContainer load()
  {
    return full ? new FullDate(new Date()) : new SmallDate(new Date());
  }
}</code>

Und so wird das ganze benutzt:

<code lang="java5">public class DateFormatV3Page extends WebPage
{
  public DateFormatV3Page()
  {
    add(new Label("now", new DateContainerModel(false)));
    add(new Label("now2", new DateContainerModel(true)));

    setStatelessHint(false);
  }
}</code>

Während bei den anderen Beispielen immer die gleiche Darstellung gewählt wurde, können wir bei diesem Beispiel an der Darstellung erkennen, ob es funktioniert hat:
<blockquote>Date Format

Now: 29.11.2012

Now: 29.11.2012 23:42:15</blockquote>
Auch gespannt, welche Auswirkung das auf die Serialisierung gehabt hat?
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.dateformat.DateFormatV3Page, id = 4, render count = 1]'
DEBUG - TypeSizeReport             - 
===================================================================
|Type........................................................bytes|
-------------------------------------------------------------------
|de.wicketpraxis.usecase.dateformat.DateFormatV3Page...........139|
|org.apache.wicket.markup.html.basic.Label......................65|
|java.lang.Integer..............................................21|
|java.lang.String................................................9|
|org.apache.wicket.request.mapper.parameter.PageParameters.......3|
|java.lang.Boolean...............................................2|
|[Ljava.lang.Object;.............................................2|
|de.wicketpraxis.usecase.dateformat.DateContainerModel...........2|
===================================================================

DEBUG - TreeSizeReport             - 
============================================================================================
|  #|Type..............................................................%|.sum|.local|.child|
--------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.dateformat.DateFormatV3Page(4).........100%|.243|...137|...106|
| #4|  [Ljava.lang.Object;...........................................38%|..94|.....2|....92|
| #5|    org.apache.wicket.markup.html.basic.Label(now)..............29%|..72|....59|....13|
|#10|      java.lang.Integer(=1343434906).............................2%|...5|.....5|.....0|
|#12|      java.lang.String("now")....................................1%|...4|.....4|.....0|
| #8|      de.wicketpraxis.usecase.dateformat.DateContainerModel......0%|...2|.....1|.....1|
| #9|        java.lang.Boolean........................................0%|...1|.....1|.....0|
|#11|      java.lang.Integer(=-1).....................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.dateformat.DateFormatV3Page(4).....0%|...1|.....1|.....0|
|#13|    org.apache.wicket.markup.html.basic.Label(now2)..............8%|..20|.....6|....14|
|#16|      java.lang.Integer(=1343434906).............................2%|...5|.....5|.....0|
|#18|      java.lang.String("now2")...................................2%|...5|.....5|.....0|
|#14|      de.wicketpraxis.usecase.dateformat.DateContainerModel......0%|...2|.....1|.....1|
|#15|        java.lang.Boolean........................................0%|...1|.....1|.....0|
|#17|      java.lang.Integer(=-1).....................................0%|...1|.....1|.....0|
| #0|      de.wicketpraxis.usecase.dateformat.DateFormatV3Page(4).....0%|...1|.....1|.....0|
|#19|  java.lang.Integer(=1342845082).................................2%|...5|.....5|.....0|
|#23|  org.apache.wicket.request.mapper.parameter.PageParameters......1%|...3|.....3|.....0|
| #2|  java.lang.Integer(=1)..........................................0%|...1|.....1|.....0|
|#20|  java.lang.Integer(=-1).........................................0%|...1|.....1|.....0|
|#21|  java.lang.Integer(=4)..........................................0%|...1|.....1|.....0|
|#24|  java.lang.Integer(=1)..........................................0%|...1|.....1|.....0|
============================================================================================

DEBUG - TreeSizeReport             - 
=============================================================================================
|   #|Type..............................................................%|.sum|.local|.child|
---------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.dateformat.DateFormatV3Page(4).........100%|.243|...137|...106|
|  #4|  [Ljava.lang.Object;...........................................38%|..94|.....2|....92|
|null|    org.apache.wicket.markup.html.basic.Label(now|now2).........37%|..92|....65|....27|
|null|      java.lang.Integer(=1343434906|=-1).........................4%|..12|....12|.....0|
|null|      java.lang.String("now"|"now2").............................3%|...9|.....9|.....0|
|null|      de.wicketpraxis.usecase.dateformat.DateContainerModel......1%|...4|.....2|.....2|
|null|        java.lang.Boolean........................................0%|...2|.....2|.....0|
|null|      de.wicketpraxis.usecase.dateformat.DateFormatV3Page(4).....0%|...2|.....2|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1|=4).......................3%|...9|.....9|.....0|
| #23|  org.apache.wicket.request.mapper.parameter.PageParameters......1%|...3|.....3|.....0|
=============================================================================================</pre>
Auch wenn wir wieder etwas Platz gespart haben, ist die wichtigste Botschaft hier eine etwas andere. Wir haben den Code für die Darstellung aus der Seite herausgelöst. Dieser Code wird nicht mehr mit serialisiert. Und überall, wo man den passenden Typ benutzt, ist sichergestellt, dass die Darstellung Anwendungsweit die gleiche sein wird (sofern man nicht wieder etwas dagegen unternimmt). Außerdem kann man nun andere Optimierungen vornehmen. z.B. kann man überlegen, ob man beim Erzeugen der Formater einen Instanzpool benutzt.

<strong>Zusammenfassung</strong>

Ich hoffe, ich konnte ein wenig zeigen, welche Dinge man mit dem Tool sichtbar machen kann. Außerdem wurde hoffentlich deutlich, dass der Teufel im Detail steckt und er sich auch gern sehr gut versteckt. Wer hätte gedacht, dass die Klasse DateFormatSymbols so speicherhungrig ist. In den noch folgenden Beiträgen versuche ich wieder, die eine oder andere Überraschung ins Licht zu ziehen. Ich würde mich auch sehr über eure Erfahrungen und Anregungen freuen. Vielleicht ist ja jemand dabei, der damit ganz andere verrückte Dinge macht. Ich bin gespannt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2012-11-30 00:11:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-29 23:11:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-page-serializer-und-performanceoptimierung-teil-2-dateformat]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="converter"><![CDATA[Converter]]></category>
		<category domain="post_tag" nicename="dateformat"><![CDATA[DateFormat]]></category>
		<category domain="post_tag" nicename="kryo2"><![CDATA[Kryo2]]></category>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="serializer"><![CDATA[Serializer]]></category>
		<category domain="category" nicename="technologie"><![CDATA[Technologie]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:18:"110.47684383739515";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"63.38145418542754";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"45.22389465163335";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:17:"44.49765683062316";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:18:"28.228266131912754";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"25.645796453363932";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fehlersuche mit dem Wicket PageSerializer</title>
		<link>http://www.wicket-praxis.de/blog/2012/12/06/fehlersuche-mit-dem-wicket-pageserializer/</link>
		<pubDate>Thu, 06 Dec 2012 07:22:25 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[Die Entwicklung zustandsbehafteter Komponenten mit Wicket ist einfach und fühlt sich recht natürlich an, da man die meisten Sprachfeatures von Java benutzen kann. Trotzdem gibt es verschiedene Dinge zu beachten, damit die damit realisierten Anwendungen performant und effizient arbeiten. Damit eine Wicket-Anwendung auch mit sehr vielen Nutzern und mit sehr vielen zustandsbehafteten Komponenten umgehen kann, werden Seiten serialisiert (und bei Bedarf wieder deserialisiert) und verschwinden für die Zwischenzeit aus dem Speicher. Dieser Prozess ist wenig transparent und man erhält selten die Gelegenheit, sich mal anzusehen, was genau eigentlich alles serialisiert wird.

In diesem Artikel soll es darum gehen, die Serialisierung als Hilfsmittel zur Fehlersuche zu benutzen. Die Fehler, die damit auffindbar sind, beziehen sich z.B. einen auf Probleme, wenn Komponenten nicht alle temporären Daten freigeben (und damit unnötig Speicher verbrauchen und diese Daten natürlich auch veralten können) oder wenn bestimmte Daten nicht serialisiert werden dürfen, weil der Zustand nach dem zurückserialisieren nicht definiert ist.

Seit Wicket 1.5.9 und 6.1.x kann man mehr Einfluss auf die Serialisierung nehmen. Dabei kann man verschiedene Checks konfigurieren, die beim Serialisieren die Objektinstanzen prüfen, die serialisiert werden sollen. Wir möchten folgende Prüfungen vornehmen (ob Objekte überhaupt serialisierbar sind, wird von Wicket selbst geprüft):
<ul>
	<li>Entities dürfen nicht serialisiert werden (diese enthalten neben ORM-Magie meist vergängliche Daten)</li>
	<li>Modelle, die nicht detached sind (diese enthalten veralteted Daten, die zwar nach dem zurücklesen weg sind, aber so lange die Seite noch im Speicher liegt, verwendet werden)</li>
	<li>Komponenten, die nicht im Komponentenbaum hängen (da Wicket diese nicht erreichen kann, werden z.B. auch für keine Model-Instanz detach() aufgerufen)</li>
</ul>
<strong>Vorraussetzungen</strong>

Für unser Beispiel sind alle Entity-Instanzen mit folgendem Interface markiert:

<code lang="java5">public interface IEntity {
}</code>

Der Check gestaltet sich relativ einfach:

<code lang="java5">public class EntitySerializationNotAllowedChecker extends AbstractObjectChecker {

  @Override
  protected Result doCheck(Object object) {
    if (object instanceof IEntity)
      return new Result(Result.Status.FAILURE, "entity serialization not allowed");
    return Result.SUCCESS;
  }
}</code>

Jetzt müssen wir uns noch einen SerializerCheck konfigurieren:

<code lang="java5">public class DevelopmentSerializerCheck extends CheckingObjectOutputStream {

  public DevelopmentSerializerCheck() throws IOException {
    super(new ByteArrayOutputStream(),new OrphanComponentChecker(),new NotDetachedModelChecker(), new EntitySerializationNotAllowedChecker());
  }
}</code>

In diesem Beispiel sind unsere verschiedenen Checks enthalten. Die ersten beiden (OrphanComponentChecker und NotDetachedModelChecker) bringt Wicket bereits mit, den letzten Check haben wir selbst geschrieben. Da im Wicket-eigenene Serializer der Check erst durchgeführt wird, wenn ein Objekt nicht durch Java serialisiert werden konnte (z.B. weil das Objekt nicht das passende Interface implementiert hat), müssen wir unseren Check so einbinden, dass das schon im Vorfeld und jedes mal passiert. Dazu überschreiben wir den JavaSerializer (wer viel IO-Last hat, kann sich auch mal den DeflatedJavaSerializer ansehen).

<code lang="java5">public class DevelopmentJavaSerializer extends JavaSerializer {

  private static final Logger log = LoggerFactory.getLogger(DevelopmentJavaSerializer.class);

  public DevelopmentJavaSerializer(String applicationKey) {
    super(applicationKey);
  }

  @Override
  public byte[] serialize(Object object) {
    try {
      new DevelopmentSerializerCheck().writeObject(object);
      
      return super.serialize(object);
    } catch (IOException e) {
      log.error("error writing object " + object + ": " + e.getMessage(), e);
      throw new WicketRuntimeException(e);
    }
  }
}</code>

Wie man vielleicht bemerkt hat, habe ich dem ganzen einen Namen gegeben, der darauf hindeutet, dass man den Serializer besser nicht in einer Produktivumgebung benutzt. Wenn eine Seite einen Fehler wirft, konnte sie nicht serialisiert werden. Somit kann später nicht auf diese zurückgegriffen werden. Da wir strengere Regeln als Wicket selbst aufstellen, kann die Anwendung ohne unseren Check durchaus für viele Nutzer funktionieren, obwohl wir vielleicht noch nicht alle Fehler gefunden haben.

In der Wicket-Application konfigurieren wir den Serializer wie folgt:

<code lang="java5">@Override
public void init()
{
  super.init();
  ...
  if (getConfigurationType()==RuntimeConfigurationType.DEVELOPMENT) {
    getFrameworkSettings().setSerializer(new DevelopmentJavaSerializer(getApplicationKey()));
  }
  ...
}</code>

Damit sind die Vorbereitungen abgeschlossen. Wichtiger Hinweis: Zustandslose Seiten werden nicht serialisiert, sondern immer als neue Instanzen erzeugt. Für diese Seiten werden diese Prüfungen nicht durchgeführt.

<strong>Beispiele für Fehlerquellen</strong>

Das einfachste Beispiel ist das für unsere Entities, die nicht serialisiert werden sollen. Ich verzichte hier auf das Markup, weil das für das Ergebnis nicht relevant ist. Der Aufruf von setStatelessHint(false) ist notwendig, damit Wicket annimmt, das diese Seite serialisert werden muss. Es ist normalerweise nicht einfach, zustandlose Seiten zu erstellen, diesen Aufruf sollte man nur vornehmen, wenn man einen sehr guten Grund hat.

<code lang="java5">public class EntityAsFieldPage extends WebPage {

  MyEntity shouldNotBeSerialized=new MyEntity();
  
  public EntityAsFieldPage() {
    
    setStatelessHint(false);
  }

  static class MyEntity implements IEntity {
  }
}</code>

Wenn diese Seite aufgerufen wird, werden wir im Logfile folgendes finden (Wicket wird die Seite normal anzeigen, den Fehler bekommt ein Nutzer nicht zu sehen):
<pre>ERROR - ListenerCollection         - Error invoking listener: org.apache.wicket.Application$2@5a388c74
org.apache.wicket.util.objects.checker.CheckingObjectOutputStream$ObjectCheckException: entity serialization not allowed
A problem occurred while checking object with type: de.wicketpraxis.usecase.entities.EntityAsFieldPage$MyEntity
Field hierarchy is:
  0 [class=de.wicketpraxis.usecase.entities.EntityAsFieldPage, path=0]
    de.wicketpraxis.usecase.entities.EntityAsFieldPage$MyEntity de.wicketpraxis.usecase.entities.EntityAsFieldPage.shouldNotBeSerialized [class=de.wicketpraxis.usecase.entities.EntityAsFieldPage$MyEntity] <----- field that is causing the problem
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.internalCheck(CheckingObjectOutputStream.java:370)
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.check(CheckingObjectOutputStream.java:344)
  ...</pre>
Egal wie tief diese Instanz im Komponentenbaum hängen würde, durch die Serialisierung wird jedes Vorkommen geprüft und gefunden.

<strong>Models, Models, Models</strong>

Eine der häufigsten Fehlerquellen sind Wicket-Model-Instanzen. Das liegt sicher daran, dass man Models überall benutzt und man recht einfach Fehler einbauen kann. Ein einfaches Beispiel für einen Fehler:

<code lang="java5">public class DirectModelUsagePage extends WebPage {

  public DirectModelUsagePage() {

    final IModel<Date> dateModel = new LoadableDetachableModel<Date>() {

      @Override
      protected Date load() {
        return new Date();
      }
    };

    add(new WebMarkupContainer("now") {
      @Override
      public void onComponentTagBody(MarkupStream markupStream, ComponentTag openTag) {
        replaceComponentTagBody(markupStream, openTag, ""+dateModel.getObject());
      }
    });

    setStatelessHint(false);
  }
}</code>

In dem Beispiel wird ein Model verwendet, das temporär Daten erzeugt. Genauso gut könnten hier viele Datensätze geladen werden. Würden wir das Model z.B. einer Label-Komponente als Model mitgeben, würde sich das Label darum kümmern, das detach() auch für das Model aufgerufen wird. In diesem Beispiel wird allerdings das direkt Model benutzt. Das passiert recht häufig (z.B. Javascript-Code dynamisch erstellen möchte) und sieht auf den ersten Blick nicht wie ein Problem aus. Hier hilft ein einfaches überschreiben von detach() im WebMarkupContainer, der dann für das Model detach() aufruft. Daher sollte man soetwas immer in Komponenten auslagern, die sich darum kümmern, sonst läuft man Gefahr, dass man es mal vergisst. Wenn detach() nicht aufgerufen wird und die Seite noch im Speicher liegt, sieht man mit hoher Wahrscheinlichkeit alte Daten.

Im Log sehen wir folgendes:
<pre>ERROR - ListenerCollection         - Error invoking listener: org.apache.wicket.Application$2@312cfd62
org.apache.wicket.util.objects.checker.CheckingObjectOutputStream$ObjectCheckException: Not detached model found!
A problem occurred while checking object with type: org.apache.wicket.model.LoadableDetachableModel
Field hierarchy is:
  8 [class=de.wicketpraxis.usecase.models.DirectModelUsagePage, path=8]
    private java.lang.Object org.apache.wicket.MarkupContainer.children [class=org.apache.wicket.markup.html.WebMarkupContainer, path=8:now]
      private final org.apache.wicket.model.IModel de.wicketpraxis.usecase.models.DirectModelUsagePage$2.val$dateModel [class=org.apache.wicket.model.LoadableDetachableModel] <----- field that is causing the problem
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.internalCheck(CheckingObjectOutputStream.java:370)
  ...</pre>
Ein anderes Beispiel, bei dem nicht für alle Models detach aufgerufen wird, ist auch recht häufig:

<code lang="java5">public class ModelReadsModelPage extends WebPage
{
  public ModelReadsModelPage()
  {
    final IModel<Date> dateModel = new LoadableDetachableModel<Date>()
    {
      @Override
      protected Date load()
      {
        return new Date();
      }
    };
    
    IModel<String> dateAsString = new AbstractReadOnlyModel<String>() {
      
      @Override
      public String getObject() {
        return ""+dateModel.getObject();
      }
    };

    add(new Label("now", dateAsString));
    
    setStatelessHint(false);
  }
}</code>

Das zweite Model greift auf das erste Model zu. Das zweite Model wird dem Label mitgegeben. Wenn nun Wicket für alle Komponenten detach() aufruft, dann gibt das Label das an das zweite Model weiter, doch das erste Model bleibt für Wicket unsichtbar.

Im Log sehen wir folgendes:
<pre>ERROR - ListenerCollection         - Error invoking listener: org.apache.wicket.Application$2@7f0ab78a
org.apache.wicket.util.objects.checker.CheckingObjectOutputStream$ObjectCheckException: Not detached model found!
A problem occurred while checking object with type: org.apache.wicket.model.LoadableDetachableModel
Field hierarchy is:
  10 [class=de.wicketpraxis.usecase.models.ModelReadsModelPage, path=10]
    private java.lang.Object org.apache.wicket.MarkupContainer.children [class=org.apache.wicket.markup.html.basic.Label, path=10:now]
      java.lang.Object org.apache.wicket.Component.data [class=org.apache.wicket.model.AbstractReadOnlyModel]
        private final org.apache.wicket.model.IModel de.wicketpraxis.usecase.models.ModelReadsModelPage$2.val$dateModel [class=org.apache.wicket.model.LoadableDetachableModel] <----- field that is causing the problem
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.internalCheck(CheckingObjectOutputStream.java:370)
  ...</pre>
Auch hier kann man im zweiten Model detach() überschreiben und an das erste Model weitergeben. Allerdings sollte man diese Fehlerquelle aktiv vermeiden. Dazu gibt es verschiedene Ansätze. Eine Lösungsmöglichkeit habe ich unter http://www.wicket-praxis.de/blog/2009/10/28/wicket-model-transformation/ beschrieben, eine Implementierung kann man unter https://github.com/flapdoodle-oss/de.flapdoodle.wicket (wicket 6 - https://github.com/flapdoodle-oss/de.flapdoodle.wicket/tree/wicket6) finden und in eigene Projekte einbauen.

<strong>Komponenten ersetzen ist nicht immer evil</strong>

Es gibt sinnvolle Anwendungen, wo es notwendig ist, Komponenten aus dem Komponentenbaum zu entfernen um sie später, so wie sie sind, wieder einzufügen. Dabei bleibt der Zustand der Komponente erhalten. Allerdings sind diese Fälle sehr selten. Meist gibt es bessere Lösungen (Komponenten können auch unsichtbar sein, eine neuen Instanz einer Komponenten ist meist NICHT teuer, Komponenten-Factories kann man durchaus benutzen). In folgendem Beispiel wird durch einen Klick auf den Link labelA durch labelB ersetzt:

<code lang="java5">public class HiddenComponentPage extends WebPage {

  private static final String WICKET_COMP_ID = "label";

  Label labelA = new Label(WICKET_COMP_ID,Model.of("A"));
  Label labelB = new Label(WICKET_COMP_ID,Model.of("B"));
  
  public HiddenComponentPage() {

    add(labelA);
    add(new Link<Void>("link") {
      @Override
      public void onClick() {
        HiddenComponentPage.this.replace(labelB);
      }
    });
    setStatelessHint(false);
  }
}</code>

Somit hängt einer der Komponenten nicht im Komponentenbaum. Wenn man jetzt auf Funktionen der Komponente, die für Wicket nun unsichtbar geworden ist, zurückgreift, dann können Models geladen und nicht wieder aufgeräumt werden oder Fehler auftreten, die durch den fehlenden Wicket-Zyklus ausgelöst werden.

Im Log sehen wir folgendes:
<pre>ERROR - ListenerCollection         - Error invoking listener: org.apache.wicket.Application$2@175b28d8
org.apache.wicket.util.objects.checker.CheckingObjectOutputStream$ObjectCheckException: A component without a parent is detected.
A problem occurred while checking object with type: org.apache.wicket.markup.html.basic.Label
Field hierarchy is:
  4 [class=de.wicketpraxis.usecase.replacements.HiddenComponentPage, path=4]
    org.apache.wicket.markup.html.basic.Label de.wicketpraxis.usecase.replacements.HiddenComponentPage.labelB [class=org.apache.wicket.markup.html.basic.Label, path=label] <----- field that is causing the problem
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.internalCheck(CheckingObjectOutputStream.java:370)
  at org.apache.wicket.util.objects.checker.CheckingObjectOutputStream.check(CheckingObjectOutputStream.java:344)
  ...</pre>
Diese Fehler würde man durch andere Methoden sicher viel schwerer entdecken. Aus meiner Erfahrung hat sich dieser Ansatz recht gut bewährt, gerade auch wenn es darum geht, dass sich solche Fehler nicht wieder einschleichen. Ich bin gespannt, ob jemand noch andere Ideen hat, wie man das Konzept auf andere Anwendungsfälle erweitern kann.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date><![CDATA[2012-12-06 08:22:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-12-06 07:22:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fehlersuche-mit-dem-wicket-pageserializer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"58";s:5:"score";s:17:"42.21161048292193";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:17:"33.44026624580066";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:16:"25.5971687539225";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"100";s:5:"score";s:18:"24.295351910588565";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"23.299215240301358";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"102";s:5:"score";s:17:"16.35760259680305";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>67825</wp:comment_id>
			<wp:comment_author><![CDATA[Christoph]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mail@christophleiter.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.235.194.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-07 10:14:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-07 09:14:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hallo Michael,

danke fuer den informativen Beitrag. Ich habe aktuell einen Usecase fuer serialisierte Entities: Seiten mit AJAX. Benutzer haben eine Vielzahl von Controls zur Verfuegung, mit denen sie das aktuelle Entity bearbeiten. Dies geschieht ueber AJAX-Calls, da man den Benutzer direkt auf Fehler hinweisen oder Komponenten aktualisieren moechte. Das Entity soll aber erst in der DB gespeichert werden, wenn der Benutzer auf den Button "Speichern" klickt.

Verwende ich an dieser Stelle ein LDM fuer das Entity, so wird es fuer jeden AJAX-Request neu von der DB geladen und alle vorherigen Aenderungen gehen verloren.

Wuerdest du in diesem Fall auch die Entities serialisieren oder gibt es eine bessere Loesung?

Christoph]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355257635.3802";s:7:"message";s:53:"michael hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1354871651.824";s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67838</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mosmann.de/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.227.135.96]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-11 21:33:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-11 20:33:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In dem Fall würde ich eine serialisierbare Bean initial mit Werten aus der DB befüllen und dann unabhängig davon ändern. Ohne Ajax und mit klassischen Formularen funktioniert es eigentlich ähnlich, weil mit dem ersten Form-Submit die Werte aus der Eingabe maßgeblich sind. Interessant wird es allerdings dann, wenn jemand anderes in der DB ebenfalls Änderungen an den selben Daten vornehmen kann. Man sollte unter diesen Umständen vielleicht mit Versionen arbeiten.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>67825</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355258010.4907";s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"michael";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>462506</wp:comment_id>
			<wp:comment_author><![CDATA[susu penambah tinggi badan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.hilo-school.com/parenting/mengatasi-kegemukan-pada-anak/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[23.94.236.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-08-28 11:25:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-08-28 10:25:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>susu penambah tinggi badan</strong>

Fehlersuche mit dem Wicket PageSerializer | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1472379932.582674;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket Page Serializer und Performanceoptimierung – Teil 3 - Unerwünschte Gäste</title>
		<link>http://www.wicket-praxis.de/blog/2012/12/11/wicket-page-serializer-und-performanceoptimierung-teil-3-unerwunschte-gaste/</link>
		<pubDate>Tue, 11 Dec 2012 20:40:37 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[Hier folgt der 3. Teil der Serie (<a href="http://www.wicket-praxis.de/blog/2012/11/27/wicket-page-serializer-und-performanceoptimierung-teil-1/">Wicket Page Serializer Teil 1</a>). Dabei nähern wir uns dem Thema von vielleicht unerwarteter Seite.

<strong>Downside of final</strong>

Normalerweise kann ich die Verwendung von final in Variablendeklarationen immer begrüßen. Allerdings gibt es Nebeneffekte, die bekannt sein sollten und die unter Umständen unerwünschte Effekte in der Verwendung mit Wicket-Komponenten haben. Stellen wir uns folgendes Beispiel vor:

<code lang="java5">public class FinalsV1Page extends WebPage
{
  public FinalsV1Page()
  {
    final Irrelevant irrelevantToLabel=new Irrelevant();
    
    add(new Label("label", "Fun"){
      
      @Override
      protected void onInitialize()
      {
        super.onInitialize();
        if (false) {
          setDefaultModelObject(irrelevantToLabel.text);
        }
      }
    });
    setStatelessHint(false);
  }
  
  static class Irrelevant implements Serializable {
    String text="this could be something big.";
    byte[] veryBig=new byte[1024];
  }
}</code>

Das Beispiel ist natürlich konstruiert und kommt so in der freien Wildbahn nicht direkt vor. Allerdings ist das Muster häufiger anzutreffen. Man verwendet für Methodenparamter den Zusatz final oder man möchte auf eine Methode einer anderen Klasseninstanz in einer anonymen Klasse zugreifen und markiert die Instanzvariable absichtlich mit final.

Das ich die Verwendung des Zugriffs auf die Instanz verhindert habe (if false), soll verdeutlichen, dass kein Zugriff auf die Instanz stattfinden muss, sondern das es reicht, das das theoretisch möglich wäre.

Das Markup ist auch für dieses Beispiel irrelevant. Wenn die Seite nun Serialisiert wird, bekommen wir folgende Ausgabe:
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.finals.FinalsV1Page, id = 1, render count = 1]'
DEBUG - TypeSizeReport             - 
===================================================================
|Type........................................................bytes|
-------------------------------------------------------------------
|[B...........................................................1027|
|de.wicketpraxis.usecase.finals.FinalsV1Page...................157|
|de.wicketpraxis.usecase.finals.FinalsV1Page$1..................92|
|java.lang.String...............................................39|
|java.lang.Integer..............................................15|
|org.apache.wicket.request.mapper.parameter.PageParameters.......3|
|org.apache.wicket.model.Model...................................2|
|de.wicketpraxis.usecase.finals.FinalsV1Page$Irrelevant..........1|
===================================================================

DEBUG - TreeSizeReport             - 
============================================================================================
|  #|Type.............................................................%|..sum|.local|.child|
--------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.finals.FinalsV1Page(1)................100%|.1336|...155|..1181|
| #4|  org.apache.wicket.markup.html.basic.Label(label).............87%|.1169|....92|..1077|
|#13|    de.wicketpraxis.usecase.finals.FinalsV1Page$Irrelevant.....79%|.1057|.....1|..1056|
|#15|      [B.......................................................76%|.1027|..1027|.....0|
|#14|      java.lang.String("this...")...............................2%|...29|....29|.....0|
| #6|    org.apache.wicket.model.Model...............................0%|....6|.....2|.....4|
| #8|      java.lang.String("Fun")...................................0%|....4|.....4|.....0|
|#11|    java.lang.String("labe...").................................0%|....6|.....6|.....0|
| #9|    java.lang.Integer(=1343434906)..............................0%|....5|.....5|.....0|
| #0|    de.wicketpraxis.usecase.finals.FinalsV1Page(1)..............0%|....2|.....2|.....0|
|#10|    java.lang.Integer(=-1)......................................0%|....1|.....1|.....0|
|#16|  java.lang.Integer(=1342845082)................................0%|....5|.....5|.....0|
|#20|  org.apache.wicket.request.mapper.parameter.PageParameters.....0%|....3|.....3|.....0|
| #2|  java.lang.Integer(=1).........................................0%|....1|.....1|.....0|
|#17|  java.lang.Integer(=-1)........................................0%|....1|.....1|.....0|
|#18|  java.lang.Integer(=1).........................................0%|....1|.....1|.....0|
|#21|  java.lang.Integer(=1).........................................0%|....1|.....1|.....0|
============================================================================================

DEBUG - TreeSizeReport             - 
=============================================================================================
|   #|Type.............................................................%|..sum|.local|.child|
---------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.finals.FinalsV1Page(1)................100%|.1336|...155|..1181|
|  #4|  org.apache.wicket.markup.html.basic.Label(label).............87%|.1169|....92|..1077|
| #13|    de.wicketpraxis.usecase.finals.FinalsV1Page$Irrelevant.....79%|.1057|.....1|..1056|
| #15|      [B.......................................................76%|.1027|..1027|.....0|
| #14|      java.lang.String("this...")...............................2%|...29|....29|.....0|
|  #6|    org.apache.wicket.model.Model...............................0%|....6|.....2|.....4|
|  #8|      java.lang.String("Fun")...................................0%|....4|.....4|.....0|
|null|    java.lang.Integer(=1343434906|=-1)..........................0%|....6|.....6|.....0|
| #11|    java.lang.String("labe...").................................0%|....6|.....6|.....0|
|  #0|    de.wicketpraxis.usecase.finals.FinalsV1Page(1)..............0%|....2|.....2|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1).........................0%|....9|.....9|.....0|
| #20|  org.apache.wicket.request.mapper.parameter.PageParameters.....0%|....3|.....3|.....0|
=============================================================================================</pre>
&nbsp;Wie man deutlich sieht, hat er alles, was in der eigentlich unbenutzen Instanz enhalten war mit serialisiert. Das kann oft unumgänglich sein, allerdings glaube ich, dass man eben so oft zu besseren Lösungen kommt. Zum Vergleich ändern wir mal die eine Kleinigkeit:

<code lang="java5">public class FinalsV2Page extends WebPage
{
  public FinalsV2Page()
  {
    final Irrelevant irrelevantToLabel=new Irrelevant();
    
    add(new Label("label", "Fun"){
      
      @Override
      protected void onInitialize()
      {
        super.onInitialize();
        if (false) {
          setDefaultModelObject("this could be something big.");
        }
      }
    });
    setStatelessHint(false);
  }
  
  static class Irrelevant implements Serializable {
    String text="this could be something big.";
    byte[] veryBig=new byte[1024];
  }
}</code>

Wenn man sich jetzt ansieht, was davon in der Serialisierung übrig bleibt, dann erkennt man recht leicht den Unterschied:
<pre>DEBUG - KryoSerializer             - Going to serialize: '[Page class = de.wicketpraxis.usecase.finals.FinalsV2Page, id = 2, render count = 1]'
DEBUG - TypeSizeReport             - 
===================================================================
|Type........................................................bytes|
-------------------------------------------------------------------
|de.wicketpraxis.usecase.finals.FinalsV2Page...................157|
|de.wicketpraxis.usecase.finals.FinalsV2Page$1..................36|
|java.lang.Integer..............................................15|
|java.lang.String...............................................10|
|org.apache.wicket.request.mapper.parameter.PageParameters.......3|
|org.apache.wicket.model.Model...................................2|
===================================================================

DEBUG - TreeSizeReport             - 
===========================================================================================
|  #|Type.............................................................%|.sum|.local|.child|
-------------------------------------------------------------------------------------------
| #0|de.wicketpraxis.usecase.finals.FinalsV2Page(2)................100%|.223|...155|....68|
| #4|  org.apache.wicket.markup.html.basic.Label(label).............25%|..56|....36|....20|
| #6|    org.apache.wicket.model.Model...............................2%|...6|.....2|.....4|
| #8|      java.lang.String("Fun")...................................1%|...4|.....4|.....0|
|#11|    java.lang.String("labe...").................................2%|...6|.....6|.....0|
| #9|    java.lang.Integer(=1343434906)..............................2%|...5|.....5|.....0|
| #0|    de.wicketpraxis.usecase.finals.FinalsV2Page(2)..............0%|...2|.....2|.....0|
|#10|    java.lang.Integer(=-1)......................................0%|...1|.....1|.....0|
|#12|  java.lang.Integer(=1342845082)................................2%|...5|.....5|.....0|
|#16|  org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
| #2|  java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
|#13|  java.lang.Integer(=-1)........................................0%|...1|.....1|.....0|
|#14|  java.lang.Integer(=2).........................................0%|...1|.....1|.....0|
|#17|  java.lang.Integer(=1).........................................0%|...1|.....1|.....0|
===========================================================================================

DEBUG - TreeSizeReport             - 
============================================================================================
|   #|Type.............................................................%|.sum|.local|.child|
--------------------------------------------------------------------------------------------
|  #0|de.wicketpraxis.usecase.finals.FinalsV2Page(2)................100%|.223|...155|....68|
|  #4|  org.apache.wicket.markup.html.basic.Label(label).............25%|..56|....36|....20|
|  #6|    org.apache.wicket.model.Model...............................2%|...6|.....2|.....4|
|  #8|      java.lang.String("Fun")...................................1%|...4|.....4|.....0|
|null|    java.lang.Integer(=1343434906|=-1)..........................2%|...6|.....6|.....0|
| #11|    java.lang.String("labe...").................................2%|...6|.....6|.....0|
|  #0|    de.wicketpraxis.usecase.finals.FinalsV2Page(2)..............0%|...2|.....2|.....0|
|null|  java.lang.Integer(=1|=1342845082|=-1|=2)......................4%|...9|.....9|.....0|
| #16|  org.apache.wicket.request.mapper.parameter.PageParameters.....1%|...3|.....3|.....0|
============================================================================================&nbsp;</pre>
An diesem Beispiel kann man vielleicht sehen, dass es eine gute Strategie sein kann, Komponenten so klein wie möglich zu schneiden. Zum einen wird die Klasse bei mehrfacher Verwendung nur einmal serialisiert und außerdem läuft man nicht so große Gefahr, dass viele unerwünschte Dinge ebenfalls mitserialisiert werden. Und natürlich hat das auch Auswirkungen auf den Speicherverbrauch: solange eine Referenz auf ein Objekt gehalten wird, kann es nicht durch die Garbage-Collection aufgeräumt werden.

Wie kann man nun verhindern, dass so etwas unabsichtlich passiert: am einfachsten ist es, wenn man versucht, so wenig wie möglich anonyme Klassen zu verwenden. Das sollte sich schnell in vielfacher Hinsicht auszahlen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date><![CDATA[2012-12-11 21:40:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-12-11 20:40:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-page-serializer-und-performanceoptimierung-teil-3-unerwunschte-gaste]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:3:"362";s:5:"score";s:17:"39.08618990776774";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"70";s:5:"score";s:18:"28.578205042979864";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"21";s:5:"score";s:17:"20.51469057378244";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:3:"370";s:5:"score";s:18:"17.366447483849033";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:2:"88";s:5:"score";s:17:"17.08266364899761";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:2:"62";s:5:"score";s:18:"16.269390698710406";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>477193</wp:comment_id>
			<wp:comment_author><![CDATA[digital marketing agency in Glendale]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://Www.411.com/business/details?uid=AkZ_VHoF</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[107.173.182.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-21 07:14:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-21 06:14:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>digital marketing agency in Glendale</strong>

Wicket Page Serializer und Performanceoptimierung – Teil 3 &#8211; Unerwünschte Gäste | wicket praxis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1490076872.679004;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wicket AjaxBookmarkablePageLink - Ajax und SEO</title>
		<link>http://www.wicket-praxis.de/blog/2013/03/01/wicket-ajaxbookmarkablepagelink-ajax-und-seo/</link>
		<pubDate>Thu, 28 Feb 2013 23:54:02 +0000</pubDate>
		<dc:creator><![CDATA[michael]]></dc:creator>
		<guid isPermaLink="false">http://www.wicket-praxis.de/blog/?p=382</guid>
		<description></description>
		<content:encoded><![CDATA[Nutzer haben eine hohe Erwartung an die Geschwindigkeit, mit der auch Webanwendungen auf Nutzereingaben reagieren sollen. Nicht erst seit gestern wird deshalb auf verschiedene Arten versucht, die Antwortzeit auf ein Minimum zu drücken. Häufig werden dann Seiteninhalte per Ajax ausgetauscht. Das ist angenehm für den Nutzer, Suchmaschinen sind aber (zur Zeit) nicht in der Lage, über solche Interaktionshürden zu springen und damit diese Inhalte in den Suchindex aufzunehmen.

Bisher hat man sich dann oft für das eine (kein Ajax) oder das andere (Ajax, versteckte SEO-Links) entschieden. Mit Wicket ist es nicht so schwer, einen sehr mächtigen Ansatz zu wählen, der beides kombiniert und das Leben des Entwicklers vereinfachen kann.

Wir zäumen das Pferd etwas von hinten aus, aber am Ende wird das alles einen Sinn ergeben. Versprochen. Zuerst brauchen wir etwas, was eine Seitenklasse und PageParameter in einen Wert vereint:



<code lang="java5">public class BookmarkablePageDestination<T extends WebPage> {

  private final Class<? extends T> _pageClass;
  private final PageParameters _pageParameters;

  public BookmarkablePageDestination(Class<? extends T> pageClass, PageParameters pageParameters) {
    _pageClass = pageClass;
    _pageParameters = new PageParameters(pageParameters);
  }

  public Class<? extends T> getPageClass() {
    return _pageClass;
  }

  public PageParameters getPageParameters() {
    // not immutable, so we have to copy
    return new PageParameters(_pageParameters);
  }

  public String asUrl() {
    return RequestCycle.get().urlFor(_pageClass, _pageParameters).toString();
  }

  public static <T extends WebPage> BookmarkablePageDestination<T> with(Class<T> pageClass) {
    return new BookmarkablePageDestination<T>(pageClass, new PageParameters());
  }

  public static <T extends WebPage> BookmarkablePageDestination<T> with(Class<T> pageClass,
      PageParameters pageParameters) {
    return new BookmarkablePageDestination<T>(pageClass, pageParameters);
  }
}
</code>

Da die Klasse PageParameters nicht unveränderlich ist, müssen wir eine Kopie anfertigen, um unerwünschte Nebeneffekte zu vermeiden. Als nächstes erweitern wir die AjaxLink-Klasse um eine Funktion, die sie aus Suchmaschinensicht zu einem normalen Link macht.



<code lang="java5">public abstract class AjaxBookmarkablePageLink<T, P extends WebPage> extends AjaxLink<T> {

  public AjaxBookmarkablePageLink(String id, IModel<T> model) {
    super(id, model);
  }

  @Override
  protected void onInitialize() {
    super.onInitialize();

    add(new AttributeModifier("href", new LoadableDetachableModel<String>() {

      @Override
      protected String load() {
        return getDestination(getModelObject()).asUrl();
      }
    }));
  }

  protected abstract BookmarkablePageDestination<P> getDestination(T modelValue);
}
</code>

Da sich das Ziel jederzeit ändern kann, muss das href-Attribut immer wieder erneuert werden. Dabei machen wir das Ergebnis abhängig vom Wert aus dem Model. Wichtiger Hinweis an dieser Stelle: normalerweise müsste man innerhalb der LoadableDetachableModel-Klasse für das verwendete Model die detach()-Methode aufrufen. Da das Model bereits durch die Link-Komponente in den Wicket-Renderzyklus eingebunden ist, ist das hier nicht notwendig. Man sollte das aber immer im Hinterkopf behalten, wenn man die Funktionsweise ändert.

Wir benötigen noch etwas, wass den Zustand der Seite abbildet und das man in Seitenparameter konvertieren und aus Seitenparametern auslesen kann. Wir nehmen ein einfaches Beispiel und verändern einen Zähler.



<code lang="java5">public interface IState extends Serializable {
  IState oneUp();
  IState oneDown();
  int getCounter();
}
</code>

&nbsp;



<code lang="java5">public class StateConverter {

  private StateConverter() {
    // no instance
  }

  enum StateParameter {
    Count,
  };

  public static IModel<IState> asModel(PageParameters pageParameters) {
    return new Model<IState>(asState(pageParameters));
  }

  private static State asState(PageParameters pageParameters) {
    int count = pageParameters.get(StateParameter.Count.name()).toInt(0);
    return new State(count);
  }

  public static PageParameters asPageParameters(IState state) {
    return new PageParameters().add(StateParameter.Count.name(), state.getCounter());
  }

  static class State implements IState, Serializable {

    final int _count;

    public State(int count) {
      _count = count;
    }
    
    @Override
    public IState oneUp() {
      return new State(_count + 1);
    }
    
    @Override
    public IState oneDown() {
      return new State(_count - 1);
    }

    @Override
    public int getCounter() {
      return _count;
    }
  }
}
</code>

Jetzt brauchen wir eine Linkklasse, die den Zähler verändert.



<code lang="java5">public abstract class CountLink extends AjaxBookmarkablePageLink<IState, SeoPage> {

  private final WebMarkupContainer _ajaxBorder;

  public CountLink(String id, IModel<IState> model, WebMarkupContainer ajaxBorder) {
    super(id, model);
    _ajaxBorder = ajaxBorder;
  }

  @Override
  protected BookmarkablePageDestination<SeoPage> getDestination(IState state) {
    return BookmarkablePageDestination.with(SeoPage.class, StateConverter.asPageParameters(nextState(state)));
  }

  @Override
  public void onClick(AjaxRequestTarget target) {
    setModelObject(nextState(getModelObject()));
    target.add(_ajaxBorder);
  }

  protected abstract IState nextState(IState state);
}
</code>

Bei einem Klick auf den Link wird der Wert im Model verändert, der Wert aus getDestination() zeigt auf das potentielle Ziel, der Einfachheit halber wird außerdem eine Komponente übergeben, die per Ajax aktualisiert werden soll. Jetzt fügen wir alles zusammen:



<code lang="java5">public class SeoPage extends WebPage {

  public SeoPage(PageParameters pageParameters) {
    final IModel<IState> stateModel = StateConverter.asModel(pageParameters);

    final WebMarkupContainer ajaxUpdate = new WebMarkupContainer("ajaxUpdate");
    ajaxUpdate.setOutputMarkupId(true);

    ajaxUpdate.add(new Label("count", new PropertyModel<Integer>(stateModel, "counter")));

    ajaxUpdate.add(new CountLink("up", stateModel, ajaxUpdate) {

      @Override
      protected IState nextState(IState state) {
        return state.oneUp();
      }
    });

    ajaxUpdate.add(new CountLink("down", stateModel, ajaxUpdate) {

      @Override
      protected IState nextState(IState state) {
        return state.oneDown();
      }
    });

    add(ajaxUpdate);
  }
}
</code>

Zuerst wird aus den PageParametern der aktuelle Zustand der Seite ermittelt und in ein Model gepackt. Das Label zeigt den aktuellen Wert an, die zwei Links verändern den Wert. Das passende Markup dazu:



<code lang="html"><html>
<head>
  <title>Seo Ajax Bookmarkable Page Links</title>
</head>
<body>
  <div wicket:id="ajaxUpdate">
    <span wicket:id="count"></span><br> 
    <a wicket:id="up">Up</a>
     | 
    <a wicket:id="down">Down</a>
  </div>
</body>
</html>
</code>

Und dann erhält man folgendes Ergebnis:



<code lang="html"><body>
  <div wicket:id="ajaxUpdate" id="ajaxUpdate1">
    <span wicket:id="count">0</span><br> 
    <a wicket:id="up" id="up2" href="./seoPage?Count=1" onclick="var wcall=wicketAjaxGet(&#039;./seoPage?0-1.IBehaviorListener.1-ajaxUpdate-up&#039;,function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$(&#039;up2&#039;) != null;}.bind(this));return !wcall;">Up</a>
     | 
    <a wicket:id="down" id="down3" href="./seoPage?Count=-1" onclick="var wcall=wicketAjaxGet(&#039;./seoPage?0-1.IBehaviorListener.1-ajaxUpdate-down&#039;,function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$(&#039;down3&#039;) != null;}.bind(this));return !wcall;">Down</a>
  </div>
</body>
</code>

Wie man sieht, kann man beide Anforderungen mit etwas Aufwand vereinen. Je nach Anforderung kann man das Konzept in verschiedenste Richtungen erweitern. Ich hoffe, ich konnte ein wenig die Richtung zeigen:)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date><![CDATA[2013-03-01 00:54:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-28 23:54:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wicket-ajaxbookmarkablepagelink-ajax-und-seo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="seo"><![CDATA[seo]]></category>
		<category domain="category" nicename="wicket"><![CDATA[Wicket]]></category>
		<category domain="post_tag" nicename="wicket"><![CDATA[Wicket]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_3]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{i:0;O:8:"stdClass":2:{s:7:"post_id";s:2:"56";s:5:"score";s:17:"150.4857376367525";}i:1;O:8:"stdClass":2:{s:7:"post_id";s:2:"17";s:5:"score";s:17:"74.12761223355274";}i:2;O:8:"stdClass":2:{s:7:"post_id";s:2:"91";s:5:"score";s:17:"55.91289834506803";}i:3;O:8:"stdClass":2:{s:7:"post_id";s:2:"79";s:5:"score";s:17:"39.03709481231739";}i:4;O:8:"stdClass":2:{s:7:"post_id";s:3:"257";s:5:"score";s:18:"11.054664057146578";}i:5;O:8:"stdClass":2:{s:7:"post_id";s:3:"213";s:5:"score";s:18:"11.054664057146578";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_rp_related_posts_query_result_cache_expiration]]></wp:meta_key>
			<wp:meta_value><![CDATA[1386675936]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>68160</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael@mosmann.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.227.66.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-15 17:12:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-15 16:12:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Man kann auch den Anforderungen von SEO gerecht werden. Das fällt aber nicht einfach ab. Stateless-Ajax ist sicher eher etwas fragil, aber soweit muss man nicht gehen.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>67992</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366042352.8784189;s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67992</wp:comment_id>
			<wp:comment_author><![CDATA[A.L.]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alex@big.endian.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.235.241.45]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-03-01 08:43:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-03-01 07:43:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das ist in der Tat ein sehr gutes Konzept, vielen Dank für den schönen Artikel.

Solange allerdings in Wicket Seiten, die Ajax enthalten, konzeptionell immer eine Seiten-ID als Request-Parameter bekommen, hat man mit Wicket und SEO sowieso ein Problem.  Es gibt einige Ansätze, wie man das wegbekommt, die haben allerdings alle hochgradigen "Hack"-Charakter und scheinen mir nicht besonders ausgereift zu sein.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1362123829.037967;s:7:"message";s:38:"Akismet hat diesen Kommentar blockiert";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366042261.3230879;s:7:"message";s:51:"admin hat den Kommentarstatus zu approved geändert";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: www.wicket-praxis.de @ 2017-07-16 07:19:15 by W3 Total Cache -->